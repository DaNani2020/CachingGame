{
  "Assets/UniGLTF/LICENSE.html": {
    "href": "Assets/UniGLTF/LICENSE.html",
    "title": "| Cacher Game",
    "summary": "MIT License Copyright (c) 2018 ousttrue Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Assets/UniGLTF/README.html": {
    "href": "Assets/UniGLTF/README.html",
    "title": "UniGLTF-2.0 | Cacher Game",
    "summary": "UniGLTF-2.0 Unity-Supports 2019.4 and later You can import and export glTF-2.0 in Unity's editor and runtime. implement KHR_materials_unlit implement KHR_texture_transform (partial) Material PBR Convert as much as possible between glTF pbr and Unity Standard Shader. Converts metal roughness and occlusion RGBA channel incompatibility. Unlit import: UniGLTF's own UniGLTF/UniUnlit shader. export: You can export UniGLTF/UniUnlit and Unity unilt materials. Only UniGLTF/UniUnlit supports vertex colors. URP import only. experimental License MIT license Download https://github.com/vrm-c/UniVRM/releases Screenshots You can import almost all of gltf_sample_models"
  },
  "Assets/VRM/CHANGELOG.html": {
    "href": "Assets/VRM/CHANGELOG.html",
    "title": "Changelog | Cacher Game",
    "summary": "Changelog Please refer to the latest release note in Releases for all notable changes."
  },
  "Assets/VRM/Documentation/VRM.html": {
    "href": "Assets/VRM/Documentation/VRM.html",
    "title": "VRM | Cacher Game",
    "summary": "VRM The core library for UniVRM-0.XX. VRM/DepthFirstScheduler Asynchronous task scheduler. VRM/UniGLTF glTF 2.0 importer and exporter. VRM/UniHumanoid Unity humanoid utility with bvh importer. VRM/UniJSON JSON serializer and deserializer and schema utilities. VRM/UniVRM GLTF extension parts (BlendShape, FirstPerson, LookAt, Meta, etc.), VRMImporter, VRMExporter."
  },
  "Assets/VRM/LICENSE.html": {
    "href": "Assets/VRM/LICENSE.html",
    "title": "| Cacher Game",
    "summary": "MIT License Copyright (c) 2020 VRM Consortium Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice (including the next paragraph) shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Assets/VRM/README.html": {
    "href": "Assets/VRM/README.html",
    "title": "VRM | Cacher Game",
    "summary": "VRM The core library for UniVRM-0.XX. Import VRM (Unity 2019.3.4f1~) Window -> Package Manager -> Add package from git URL and add the followings in order: https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders https://github.com/vrm-c/UniVRM.git?path=/Assets/VRM => depends on VRMShaders or add the package name and git URL in Packages/manifest.json: { \"dependencies\": { \"com.vrmc.vrmshaders\": \"https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders\", \"com.vrmc.univrm\": \"https://github.com/vrm-c/UniVRM.git?path=/Assets/VRM\", } }"
  },
  "Assets/VRM10/vrmlib/README.html": {
    "href": "Assets/VRM10/vrmlib/README.html",
    "title": "VrmLib | Cacher Game",
    "summary": "VrmLib A 3D model utility for VRM."
  },
  "Assets/VRMShaders/CHANGELOG.html": {
    "href": "Assets/VRMShaders/CHANGELOG.html",
    "title": "Changelog | Cacher Game",
    "summary": "Changelog Please refer to the latest release note in Releases for all notable changes."
  },
  "Assets/VRMShaders/Documentation/VRMShaders.html": {
    "href": "Assets/VRMShaders/Documentation/VRMShaders.html",
    "title": "VRMShaders | Cacher Game",
    "summary": "VRMShaders VRM model's supported shaders in Unity: MToon UniUnlit"
  },
  "Assets/VRMShaders/LICENSE.html": {
    "href": "Assets/VRMShaders/LICENSE.html",
    "title": "| Cacher Game",
    "summary": "MIT License Copyright (c) 2020 VRM Consortium Copyright (c) 2018 Masataka SUMI for MToon Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice (including the next paragraph) shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Assets/VRMShaders/README.html": {
    "href": "Assets/VRMShaders/README.html",
    "title": "VRMShaders | Cacher Game",
    "summary": "VRMShaders VRM model's supported shaders in Unity. Shader と関連するユーティリティを切り離したパッケージ。 含まれるシェーダー UniUnlit Gltfの Unlit に適合するようにした。Unlit シェーダー MToon https://github.com/Santarh/MToon UniGLTF.ShaderPropExporter.PreShaderPropExporter Unityでは、ランタイムにMaterialのPropertyを列挙することができない。 Set/Get はできる。 事前に一覧を作成するユーティリティ。 UPM usage (Unity 2019.3.4f1~) Window -> Package Manager -> Add package from git URL and paste https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders. or add the package name and git URL in Packages/manifest.json: { \"dependencies\": { \"com.vrmc.vrmshaders\": \"https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders\", } }"
  },
  "Assets/VRMShaders/VRM/MToon/README.html": {
    "href": "Assets/VRMShaders/VRM/MToon/README.html",
    "title": "MToon | Cacher Game",
    "summary": "MToon Toon Shader with Unity Global Illumination Tutorial https://www.slideshare.net/VirtualCast/vrm-mtoon Version v3.9 Release Note https://github.com/Santarh/MToon/releases"
  },
  "Assets/humanoidcontrol4_free/CONTRIBUTING.html": {
    "href": "Assets/humanoidcontrol4_free/CONTRIBUTING.html",
    "title": "Contibuting to Humanoid Control Free | Cacher Game",
    "summary": "Contibuting to Humanoid Control Free If you want to contribute to this project, make sure you have access to the repository. You can request access by logging into our GitLab site with an GitHub or Google account. Besides that, it is best to contract us about you wanting to contribute to this project. This will ensure you will get access more quickly."
  },
  "Assets/humanoidcontrol4_free/README.html": {
    "href": "Assets/humanoidcontrol4_free/README.html",
    "title": "Installation | Cacher Game",
    "summary": "Installation You can import the Humanoid Control Free package in Unity directly with the Package Manager git package importer. See Unity: Installing from a Git URL Use the link from 'Clone with HTTP' (for example: https://gitlab.passervr.com/passer/unity/humanoidcontrol4_free.git) In this way you can always retrieve the latest version by pressing the Update button in the Package Manager. Optionally, you can use a tag to retrieve a specific version. For example:http://gitlab.passervr.com/passer/unity/humanoidcontrol4_free.git#4.1.0. This will give you a stable version which does not change. Updating can be done by retrieving the package with a link to a new release. ChangeLog and Releases All releases with UnityPackages and links for the Unity Package Manager: Releases. An RSS/Atom feed with all releases can be found on the Tags page. Click on the Tags feed icon in the top-right corner to retrieve the feed. Documentation For the latest version of the documentation, see PasserVR HumanoidControl Documentation Video"
  },
  "Assets/humanoidcontrol4_free/Third-Party-Notices.html": {
    "href": "Assets/humanoidcontrol4_free/Third-Party-Notices.html",
    "title": "| Cacher Game",
    "summary": "This asset is governed by the Asset Store EULA; however, the following components are governed by the licenses indicated below: Component Name: MakeHuman Characters License Type: \"CC0-1.0\" MakeHuman License Component Name: Humaonid Control Free License Type: \"MPL-2.0\" Humanoid Control Free License"
  },
  "Library/PackageCache/com.htc.upm.wave.xrsdk@dd738b632a/Samples~/XR/XR/Controller/README.html": {
    "href": "Library/PackageCache/com.htc.upm.wave.xrsdk@dd738b632a/Samples~/XR/XR/Controller/README.html",
    "title": "Controller Sample | Cacher Game",
    "summary": "Controller Sample Demonstrates retrieving input from an XR controller using the Unity Input System."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.3.1/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.3.1/CHANGELOG.html",
    "title": "Changelog | Cacher Game",
    "summary": "Changelog All notable changes to this package will be documented in this file. [2.3.1] - 2024-02-27 Unity Version Control is now available as part of the Version Control Package! You can enable Unity Version Control via Window > Unity Version Control to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added New view to list and manage locks. Fixed Fixed DropdownField not working properly on a ModalUtility window on MacOS. Fixed issue with existing checkout operations locking the workspace. Retained locks prevented to checkout assets. Reviewed initialization and application lifecycle. Fixed layout error when switching checkout status in the inspector. Fixed Diff option unavailable for .prefab. Fixed UI error when opening and closing multiple closable tabs. Ensured branch creations start from the latest changeset. Unable to expand added item list after collapsing. Pending Changes context menu had the view file history greyed out for asset+meta. Preconfigured date format was not recognized as a valid DateTime. Fixed finding changes operation being firing constantly. Removed obsolete content in package documentation. Fixed typo in locks tooltip. [2.2.0] - 2023-10-06 Unity Version Control is now available as part of the Version Control Package! You can enable Unity Version Control via Window > Unity Version Control to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added button for organization owner/admins to upgrade to DevOps subscription. Included new decorators for retained & locked files. Changed Updated description in the package.json, including an updated link to get started. Fixed Fixed failed operations when the workspace is already locked. [2.1.0] - 2023-09-01 Unity Version Control is now available as part of the Version Control Package! You can enable Unity Version Control via Window > Unity Version Control to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added command to support Hub creating a new project, and connecting a project to Unity Version Control. Show a message with a link to invite users to the organization after the first checkin. Changed Moved the button to invite users to the organization from the submenu to the toolbar. Removed Don't write cloudProjectId in ProjectSettings.asset anymore since it should only be managed by Services. Fixed Fixed Add to ignored/hidden changes list from the Project window creating a negative rule. Fixed Switch to changeset not working on Gluon partial workspace. [2.0.7] - 2023-07-25 Unity Version Control is now available as part of the Version Control Package! You can enable Unity Version Control via Window > Unity Version Control to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Fixed Fixed the Unity Version Control icon disappearing from the Editor Toolbar on domain reload. Fixed the popup stating \"An existing checkout operation has locked the workspace\" when trying to check in a scene with unsaved changes. [2.0.5] - 2023-05-31 Unity Version Control is now available as part of the Version Control Package! You can enable Unity Version Control via Window > Unity Version Control to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Fixed Fixed remaining references to 'Plastic SCM' in localized labels. [2.0.4] - 2023-04-14 Unity Version Control is now available as part of the Version Control Package! You can enable Unity Version Control via Window > Unity Version Control to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Fixed Fixed 'Texture2D' does not contain a definition for 'ignoreMipmapLimit' error when installing Unity Version Control on previous Unity Editor Versions Fixed broken sign in dialog style when waiting for user to complete sign in Fixed NullReferenceException when opening a new project and the user doesn't have a Unity Version Control organization linked to a Unity ID [2.0.3] - 2023-03-29 Unity Version Control is now available as part of the Version Control Package! You can enable Unity Version Control via Window > Unity Version Control to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Changed Changed the icons for Unity Version Control rebranding Changed onboarding workflow Fixed Fixed blurry icons in the Unity Version Control window and toolbar button Fixed Pending Changes tab not always opening its selected item's location in Project window Fixed \"Checked-out (changed)\" status icon not showing up on Pending Changes tab Fixed issue that prevented new packages from being installed unless user enters play mode [2.0.1] - 2023-02-17 Unity Version Control is now available as part of the Version Control Package! You can enable Unity Version Control via Window > Unity Version Control to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Changed Updated branding from \"Plastic SCM\" to \"Unity Version Control\" Improved offline experience by disabling the plugin when there is no internet connection [2.0.0] - 2023-01-11 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Changed Removed Collab from the package [1.17.7] - 2022-10-28 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added offline mode toggle for smoother offline experience Fixed Fixed performance issue with FindWorkspaceForPath method called multiple times every frame Fixed performance issue with UI.CooldownWindowDelayer.OnUpdate running on project without Plastic SCM workspace [1.17.6] - 2022-10-06 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Changed Changed the \"Go back to changeset\" option in Changesets tab to \"Revert to changeset\" Improved notification banner appearance Fixed Fixed editor refresh triggering when a workspace update is in progress Fixed pending changes show global ignored as private Removed encryption checkbox from create organization dialog [1.17.2] - 2022-07-06 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added notification banner on the status bar for live updates Changed Renamed \"Invite members to workspace\" option to \"Invite members to organization\" Fixed Fixed not being able to view changesets in a Gluon workspace Fixed not being able to insert carriage return in checkin dialog [1.17.1] - 2022-06-21 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Fixed Fixed missing references in synced prefabs [1.17.0] - 2022-06-13 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added option to enable changelists and display them in pending changes tab Added changelist related options to pending changes context menu Fixed Fixed editor hangs when there is no network available Fixed existing checkout has locked the workspace error Fixed checkin fails over unstable connection [1.15.18] - 2022-05-18 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Fixed Fixed editor hang when entering Play Mode [1.15.17] - 2022-04-27 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added checkin comment column to Incoming Changes view Changed Updated Go Back confirmation message to be consistent with feature Updated Create Child Branch dialog to focus on branch name field when opened Improved messaging of Subtractive Merge after using Go Back feature Fixed Fixed assets not added correctly when Plastic SCM window is not open Fixed wrong position of overlay icons on Pending Changes view Disallowed Go Back feature to a changeset from another branch [1.15.16] - 2022-03-28 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added \"Switch to changeset\" menu option in changesets view Added \"Go back to changeset\" menu option in changesets view Changed Removed category icons from views Removed \"com.unity.services.core\" package dependency Fixed Fixed light theme icons used in dark theme after pulling incoming changes Fixed \"Input string was not in a correct format\" error [1.15.15] - 2022-03-09 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added checkout option in scene prefab view Changed Updated file overlay icon size to adapt to project window zoom level Updated the styling of number of items in a category in Gluon incoming changes view Fixed Fixed Plastic X not opening from plugin menu Fixed error when trying to invite members to proect Fixed editor unhandled errors being hijacked by the plugin Fixed toolbar icon not displaying incoming changes notification when Plastic window is closed Fixed VCCache::instance != NULL error when opening a project with Plastic window opened [1.15.13] - 2022-02-14 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added branch name column in changeset view Changed Updated checkin comment box to keep the last comment after checkin error Fixed Fixed performance regression in large projects due to FindObjectsOfTypeAll calls [1.15.12] - 2022-01-27 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added option to \"Save Revision as\" to the context menu in the changesets view Added incoming changes overview bar for Gluon workspace Changed Updated the styling for number of items in category for pending changes view Updated the styling for number of items in category for changesets view Updated the styling for tabs close button Updated the color in different sections of the plugin Reduced dialog padding for the \"Create Branch\" dialog Updated the display overlay icons to show even if PlasticSCM window is closed Updated styling of number of items in incoming changes category Improved plugin initialization process and let the plugin functions without needing the Plastic window opened Disabled the invite button when user does not have invite permission or not on a cloud repo Fixed Fixed size info in incoming changes view does not match actual changes size Fixed checkin and checkout options not respecting inspector locked status Fixed buttons in inspector view displayed even when Plastic window is closed Fixed icon incorrect sizes Fixed errors on create branch dialog Fixed Newtonsoft.Json.dll conflicts with other external packages Fixed editor objects count increasing when hovering over Plastic window or toolbar button Fixed ArgumentOutOfRange exception when creating a branch Fixed scene reloading not happening after creating a new branch [1.15.7] - 2021-12-02 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added option to \"Save Revision as\" to the context menu in the changesets view Added incoming changes overview bar for Gluon workspace Changed Moved Plastic Package settings to the Unity Project Settings window Refined styling for Updating Workplace success state Updated texts for empty state and overview bar Removed Incoming Changes notification from empty state Updated the text for Forced Checkout option Refined the status overlay icons Updated the refresh icon on the toolbar Updated the texts for empty checkin message dialog Fixed Fixed capitalization of Pending Changes and File History tab names Fixed the amount of spacing after the Item column title in the Pending Changes tab Removed pin striping from line items in File History tab Fixed project view context menu and icons missing after Collaborate project migration Fixed migrated projects not downloading correctly from Unity Hub [1.15.4] - 2021-11-10 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Add option to \"Add to ignore file\" in context menu in the project view Added empty state message for Pending Changes tab Added success state message for Pending Changes tab Added metrics for Branches tab functionalities Changed Removed pinstriping in the Gluon Incoming Changes window Removed the “Nothing to download” bar from the Incoming Changes window when there are no items to download Changed the default metadata columns shown in the Incoming Changes screen Updated the alignment of sorting arrows to the right of the column Fixed Fixed UI overlays in Project view missing on changed assets when force checkout is disabled Fixed console error when selecting object in Scene view hierarchy or creating a new asset Fixed NullReferenceException after closing the Plastic SCM window [1.15.1] - 2021-10-21 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added visual overview bar to the incoming changes tab Added progress dialog for the migration process Added Branches tab that shows a list of all branches in the repository Added option and dialog to create a child branch from selected branch. Added option to switch to another branch Added option and dialog to rename a branch Added option to delete a branch Added a preference to save if the window should open the Branches tab by default Added metrics for Plastic SCM installation window usage Changed Updated texts for workspace modes selection and checkin comment box Updated status bar notification icons Fixed Fixed inverted text for the force checkout option Fixed typing capital O in checkin comment would open the selected item Fixed loading indicator not centered on Plastic SCM installation window Fixed installing Plastic SCM would sign out user from the plugin Removed extra refresh button on Gluon's Incoming Changes tab Fixed loading indicator not centered on Plastic SCM installation window Fixed missing Plastic SCM window option when user is not signed in on Unity Hub Removed meta file warning message for the deleted Beta folder Fixed Plastic SCM menu missing from Project view context menu [1.13.5] - 2021-09-27 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added workspace migration from Collab to Plastic which can be done with or without Plastic installed Added notification status icons Added light and dark mode versions of avatar icon Changed Updated texts for migration Improved usage analytics around Editor and Plugin version Workspace Migration Adjustments Fixed Renamed the CoreServices namespace so it doesn't conflict with other packages Devex integration to properly depend on Core Fixed some situations where the history window would be blank Fixed missing Enterprise login link Fixed low resolution icons in light theme [1.11.2] - 2021-08-27 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added horizontal scroll bar to Changesets list for easier viewing Added auto-login for SSO credentials handler Added metrics for changeset tab usage Added metrics for checkin actions Added new Undo icon Added missing API documentation Added ability to modify assets without checkout Added ability to allow empty checkin messages Added empty checking message localization Added Plastic toolbar button to Unity editor Added notification icon for incoming changes to Plastic toolbar button Changed Removed the unneeded refresh button from History Tab Moved search bar to the top right global icon section in all tabs Updated capitalization of options in the Settings context menu Updated tab button styling to be consistent with Unity Editor conventions Status bar visible across all tabs Moved refresh button to the toolbar at the top right corner of the window Moved changesets time period selector to the right corner of the window Removed \"Changes of changeset\" header on the Changesets tab Moved number of selected items next to \"Item\" metadata title on the Pending Changes tab Improved refresh icon resolution Changed changesets detail to appear in vertical column Reduced default number of columns in changesets tab The number of changesets is no longer displayed in changesets tab Changed Launch branch explorer into an icon with tooltip Removed the hide changes button in changesets tab Moved incoming change prompt and button into a status bar Changed \"Launch Plastic\" to \"Launch Plastic SCM\" in options menu Wording change for plastic installation Updated file status icons Fixed Fixed a bug where the Texture2D error would pop up after downloading a project Fixed a bug when context menu would sometimes disappear Fixed small textbox on checkin dialog when launched from context menu Fixed a workspace NullReferenceException bug Fixed notification icon not showing on Plastic window Fixed auto login errors not showing up for users Fixed unexpected error message after user switched workspace to a label [1.9.0] - 2021-07-13 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added Checkin and Update confirmation notification Added auto sign in when logged into Unity account Changed Simplified UI: decluttered UI Improved load time performance Fixed Fixed view not switching to workspace after creating an Enterprise Gluon workspace Fixed contextual menu not showing up in project view Fixed SSO renew token after password change Fixed some namespace collisions with Antlr3 [1.7.1] - 2021-06-25 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added support for inviting other members. This option is available from the gear / settings icon. Added support for signing in with Cloud Edition. This is available during the onboarding screen if you have never signed in. Added support for turning off Plastic in their project. This option removes the Plastic metadata from your directory. This option is available under Assets > Plastic SCM > Turn off Plastic SCM Added notification on the Plastic SCM tab title to indicate incoming changes. Users will no longer need to have the Plastic SCM window visible to know there are incoming changes. Auto configuration of SSO Added date column in incoming changes Changed Updating license to better conform with expected customer usage. Updated documentation file to meet standards. Updated third-party usage. No longer requires downloading of the full Plastic client. Basic features will work without additional installation. Features that require the full Plastic client will allow download and install as needed. Usability improvements around checking in code Improved update workspace tab UX Plastic SCM context menu is now available even if the Plastic SCM window is closed Fixed Stability and performance improvements [1.5.7] - 2021-04-07 Unreleased The Version Control package will be expanding to include both Collaborate and Plastic SCM version control interfaces. This release is preparing for that move and contains no new functionality or bug fixes for Collaborate. Changed Collaborate Package renamed to Version Control with changes to package display name and description. Fixed Fixed NPE when updating the version of the Collab package. [1.3.9] - 2020-07-13 Fixed Unnecessary use of texture compression in icons that slowed down platform switching Update publish button state when selected changes update Use colorized icons when changes are available. [1.3.8] - 2020-06-08 Fixed Fix incorrect priority of error messages Fix Collab button being stuck in inprogress state Fix error when partially publishing without the window open [1.3.7] - 2020-01-30 Changed Bulk revert is now supported. Collab is blocked in play mode. Fixed Fixed services window's links to open Collab. [1.3.6] - 2020-01-21 Fixed Fixed compile errors when removing the NUnit package by removing unnecessary references. [1.3.5] - 2020-01-08 Fixed Fix \"accept mine\" / \"accept remote\" icon swap in conflicts view. [1.3.4] - 2019-12-16 Changed Window state is no longer restored after the window is closed and opened. Fixed History tab failing to load on startup if it is left open in the previous session. Progress bar percentage not matching the bar. History list correctly updates after a new revision is published. UI instabilities when restoring or going back to a revision with a different package manifest. Improve handling of changes to the project id. [1.3.3] - 2019-12-10 Changed Disable UI test cases that can be unstable. [1.3.2] - 2019-12-05 Changed Update UX to UIElements. Increased minimum supported version to 2020.1. Update Documentation to required standards. [1.2.16] - 2019-02-11 Fixed Update stylesheet to pass USS validation [1.2.15] - 2018-11-16 Changed Added support for non-experimental UIElements. [1.2.11] - 2018-09-04 Fixed Made some performance improvements to reduce impact on ReloadAssemblies. [1.2.9] - 2018-08-13 Fixed Test issues for the Collab History Window are now fixed. [1.2.7] - 2018-08-07 Fixed Toolbar drop-down will no longer show up when package is uninstalled. [1.2.6] - 2018-06-15 Fixed Fixed an issue where Collab's History window wouldn't load properly. [1.2.5] - 2018-05-21 This is the first release of Unity Package CollabProxy. Added Collab history and toolbar windows Collab view and presenter classes Collab Editor tests for view and presenter"
  },
  "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/AccessRemoteProjects.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/AccessRemoteProjects.html",
    "title": "Access remote projects | Cacher Game",
    "summary": "Access remote projects In the Unity Hub v3, click Open > Open Remote Project to see the list of your version control repositories that contain a Unity project. Select the project and click Next. Select the Editor version and platform and click the change version button. Your local version control workspace will be created for you. The latest version of the project will be downloaded and the Editor will open with the latest version of your Unity project."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/AddMembers.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/AddMembers.html",
    "title": "Add team members | Cacher Game",
    "summary": "Add team members To invite team members to contribute to your project: From the toolbar, click Invite Members to Workspace. In your DevOps version control dashboard, click Add new user. You can also send invitations and add different permission types for each user."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/CreateProjects.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/CreateProjects.html",
    "title": "Create projects | Cacher Game",
    "summary": "Create projects To create projects: In the Unity Editor, open the Unity Version Control window and click on Create Workspace. It will suggest names for your repository (shared files and history on the server) and workspace (your local copy on your computer). If you wish to use an existing version control repository, click the three dots next to the repository name, and select a repository from the list. Select the type of workspace that fits your needs. Developer workspace With this workspace, you can work with branching and merging. Gluon workspace This workspace tailored for artists allows you to pick the files you want to work on and check them back in without updating your whole workspace. Add asset files associated with your project. version control will display the project files from the asset folder in the Pending changes tab. You can choose specific files to include or add all to the repository by selecting the files and clicking Checkin changes. version control will automatically perform a check in for appropriate folders and files – such as package files and project settings – when it’s set up from the Unity Editor. You can view these in the Changesets tab. Once your initial asset check in is complete, you’re set up with version control for Unity and ready to create. See also See also the get started detailed guides: Get started with a new repository. Get started with an existing repository."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/GetStarted.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/GetStarted.html",
    "title": "Get started with Unity Version Control | Cacher Game",
    "summary": "Get started with Unity Version Control The Version Control package provides an integration of Unity Version Control (Unity VCS, formerly Plastic SCM) in the Unity Editor. Unity Version Control enables you to work collaboratively by providing advanced features such as branching, locking, merging, and a standalone Desktop GUI. Learn more about Unity Version Control. To start with a new version control repository for your project, see Get started with a new repository. To start from an existing Unity Version Control repository, see Get started with an existing repository. For more information on how to get started, refer to the Unity Version Control documentation."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/GetStartedExistingRepository.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/GetStartedExistingRepository.html",
    "title": "Get started with an existing Unity Version Control repository | Cacher Game",
    "summary": "Get started with an existing Unity Version Control repository Suppose you want to start working on a Unity project in an existing Unity Version Control repository and already have a Unity Version Control account linked to your Unity ID. In that case, you will be able to open the project straight from the Unity Hub. A workspace will automatically be created for your project on your machine. In the Unity Hub v3 Beta, click Open > Open remote project to see the list of your Unity Version Control repositories that contain a Unity project. Click the project and click Next. Click the Editor version and platform and click the change version button. In the Editor pop-up, click the Migrate button to migrate your local workspace to a Unity Version Control workspace Once the migration is completed, click the Open Unity Version Control button. Accessing the Unity Version Control Window You can access the Unity Version Control window in the Unity Editor by clicking Window > Unity Version Control."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/GetStartedNewRepository.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/GetStartedNewRepository.html",
    "title": "Get started with a new version control repository | Cacher Game",
    "summary": "Get started with a new version control repository Note: To start from an existing version control repository, see Get started with an existing version control repository. You can walk through a straightforward onboarding wizard when creating a repository for your Unity project. This new wizard will help you: Set up your account and configure your repository for your Unity project, enabling you to sync to a version control Cloud Edition repository. Generate a standard ignore file that prevents unnecessary components of your Unity project from being checked in. Automatically do the first check-in so that your repository is in sync with your local changes. Open your Unity project. To access the version control window in the Unity Editor, click Window > version control: In the version control onboarding window, complete the steps to continue: Unity connects your project to your version control Cloud repository; version control automatically creates an ignore file in the workspace for Unity projects so it doesn't track files that shouldn't be part of the repository. It also creates a standard automatic checkin during the initial setup. So now you're all set to start using version control! Note: Basic version control actions, such as viewing pending changes, checking in changes, and viewing changesets, don’t require a version control Client install. However, if you want to use more advanced features, such as branching and diffing changeset, you will be prompted to download the version control client (if you have not already done so):"
  },
  "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/GitUsers.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/GitUsers.html",
    "title": "Unity version control for Git users | Cacher Game",
    "summary": "Unity version control for Git users GIT Unity VCS Explanation To Commit To Check in To Check in is to submit changes to the repo. Commit Changeset Each new change on the history of the repo, grouping several individual file and directory changes. Master Main When you create a repo in Unity VCS, there's always an \"empty\" branch. Unity VCS calls it Main. To checkout To update Downloading content to the workspace (working copy). This is called \"update\" because in Unity VCS, \"checkout\" has a different meaning. Checkout When you checkout a file in Unity VCS, you're saying you are going to modify the file. Exclusive checkout or lock This is locking a file so nobody can touch it. It’s only useful for non-mergeable files, like binaries, images, or art in a video game. Rebase Unity VCS handles branching differently than Git. In Unity VCS, a rebase is just a merge operation. Repository Repository Where the entire history of the project is stored. Working copy Workspace In Git, you have the working copy and the repository in the exact location. You have a working copy and a .git hidden dir with the repository. In Unity VCS, this is slightly different since repositories and workspaces are separated. You can have several workspaces working with the same local repository."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/Glossary.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/Glossary.html",
    "title": "Glossary | Cacher Game",
    "summary": "Glossary General terms Project In Unity, you use a project to design and develop a game. A project stores all of the files related to a game, such as the asset and Scene files. See 2D or 3D projects. Version Control A system for managing changes to a set of files. You can use Unity in conjunction with most version control tools, including Unity Version Control and Perforce. See Version Control. Ignore file A special file used in many Version Control Systems which specifies files to be excluded from version control. In Unity projects, several folders should be excluded from version control. Repository A shared history of changes made to the project's files, saved on a server. Workspace Your local copy of the repository, interacting with the version control system. It's where you download the project's files, make the required changes and perform checkins. Check-in Check-in is the act of submitting changes from your workspace to the shared repository. You can enter a comment before checking in your changes. Unity Version Control terms Developer Workflow Developers have access to the branch explorer directly from inside Unity and easily switch branches. Gluon Workflow Artists can take advantage of the Gluon visualized interface and workflow from inside Unity. Organization The organization handles different sets of repositories in the Cloud. Inside the organization, you can create as many repositories as you need."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/MainFeatures.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/MainFeatures.html",
    "title": "Overview of features | Cacher Game",
    "summary": "Overview of features Pending Changes The Pending Changes tab allows you to view all pending changes in your workspace. These changes are not checked into the repository. In this tab, you can select which files you want to check in, add a comment, and check in the changes. Note : You can check in a specific file using the version control contextual menu in the project view or the Checkin button in the Inspector window. In the example below, the user adds a GameScene. They can check in the scene using the Pending Changes tab or the Checkin option in the contextual menu. Incoming Changes The Incoming Changes tab allows you to view all incoming changes and conflicts and update your local project. Any changes made to your project prompts an \"Incoming changes\" notification at the top right of the version control window. Tip : Check the Incoming Changes tab frequently to avoid facing future change conflicts in your team. Project History Use the Changesets tab to view all changes made to your project as they occur chronologically, along with who made the changes and when. You can sort by columns and alter the chronological view of the story. Double-click any file in a changeset to go to the File History tab, and display every changeset. In the File History view, right-click on a change and click Save the revision as… to restore the file's former state. This is useful if you had previously deleted some logic that you now need. You can also view the changes made to a specific file in the Project view through a contextual menu, then revert to an earlier revision of the file. Locks The File locks tab allows you to list and filter all locks in your repository, and gives you the ability to release or remove them selectively. To open the view, you can use the \"Show Locks\" button available in the toolbar."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/MoreHelp.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/MoreHelp.html",
    "title": "More help | Cacher Game",
    "summary": "More help To find more information on working with the Unity version control plug-in, see Getting started with Unity Version control. You can also post and find questions related to Unity version control in the Unity forum."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/QuickStartGuide.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/QuickStartGuide.html",
    "title": "Quick start guide | Cacher Game",
    "summary": "Quick start guide The Version Control package provides an integration of Unity Version Control (Unity VCS, formerly Plastic SCM) in the Unity Editor. Get started with Unity Version Control"
  },
  "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/ReconnectCB.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/ReconnectCB.html",
    "title": "Connect Unity Cloud Build | Cacher Game",
    "summary": "Connect Unity Cloud Build Unity Cloud Build is a continuous integration that automatically creates multiplatform builds in the Cloud in minutes. You can point Cloud Build toward your version control system to: Automate new builds Build faster Catch problems earlier Iterate on your builds more efficiently with agility. To get started, see Pay as you go with Cloud Build."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/TableOfContents.html",
    "title": "| Cacher Game",
    "summary": "About the Version Control package Quick start guide Create projects Access remote projects Add team members Connect Cloud Build Get started with Unity Version Control Get started with a new version control repository Get started with an existing version control repository Main features Pending Changes Incoming Changes Project History Locks Unity Version Control for Git users Glossary General terms Unity Version Control terms More help"
  },
  "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.3.1/Documentation~/index.html",
    "title": "About the Version Control package | Cacher Game",
    "summary": "About the Version Control package The Version Control package provides an integration of Unity Version Control (Unity VCS, formerly Plastic SCM) in the Unity Editor. It is installed by default with the Editor, and follows the Unity support schedule. Currently, the minimum supported version of the Unity Editor is 2021.3 LTS. Quick start guide Get started with Unity Version Control"
  },
  "Library/PackageCache/com.unity.collab-proxy@2.3.1/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.3.1/LICENSE.html",
    "title": "| Cacher Game",
    "summary": "Version Control copyright © 2023 Unity Technologies Licensed under the Unity Package Distribution License (see https://unity3d.com/legal/licenses/Unity_Package_Distribution_License). Unless expressly provided otherwise, the software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.3.1/README.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.3.1/README.html",
    "title": "Unity Version Control Package | Cacher Game",
    "summary": "Unity Version Control Package This package provides an in-editor interface for teams to work with Unity Version Control (Unity VCS), our leading version control solution, directly in Unity. Note this project is the natural evolution of the old Collaborate package, hence its name. Documentation - Changelog - Yamato Compatibility The minimum supported version of the Unity Editor is 2021.3 LTS. Windows and macOS are officially supported. The solution is exclusively targeting .NetStandard 2.0, and will not work with the legacy Mono runtime. Maintenance This project is currently maintained by the VCS Ecosystem team (@vcs-ecosystem-team), part of UGS DevOps. All suggestions and issues are very welcome in the Slack channel #devs-unity-version-control. Development For developers Option 1: clone this repository out into the packages/ directory in a project. Option 2: clone elsewhere and link with the packages/manifest.json file in the project: \"com.unity.collab-proxy\": \"file:/some/path/to/package\" To add testing support also add the testibles section to the manifest. Your manifest should look like this: { \"dependencies\": { \"com.unity.collab-proxy\": \"file:/some/path/to/package\", ... }, \"testables\": [ \"com.unity.collab-proxy\", ... ] } For internal testers Simply add the git url into the packages/manifest.json file: \"com.unity.collab-proxy\": \"git://git@github.cds.internal.unity3d.com:unity/com.unity.cloud.collaborate.git\" If you need a specific revisision: \"com.unity.collab-proxy\": \"git://git@github.cds.internal.unity3d.com:unity/com.unity.cloud.collaborate.git#<rev>\" If you need more information, read the Documentation for package dependencies from git. Code style is as dictated in Unity Meta."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.3.1/Third Party Notices.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.3.1/Third Party Notices.html",
    "title": "| Cacher Game",
    "summary": "This package contains third-party software components governed by the license(s) indicated below: Component Name: File System Watcher https://docs.microsoft.com/en-us/dotnet/api/system.io.filesystemwatcher?view=net-5.0 License Type: MIT Copyright (c) Microsoft Corporation Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: Zlib64 https://zlib.net/ License Type: zlib/libpng License (Zlib) version 1.2.11, January 15th, 2017 Copyright (C) 1995-2017 Jean-loup Gailly and Mark Adler This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software. Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions: The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software. This notice may not be removed or altered from any source distribution. Jean-loup Gailly Mark Adler jloup@gzip.org madler@alumni.caltech.edu Component Name: LZ4 Library/LZ4x64 https://github.com/lz4 License Type: BSD [The BSD License] Copyright (c) 2011-2020, Yann Collet All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Component Name: Antlr3/Antlr https://www.antlr3.org/ License Type: BSD [The BSD License] Copyright (c) 2010 Terence Parr All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the author nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Component Name: Log4Net https://logging.apache.org/log4net/ License Type: Apache 2.0 Copyright (c) 2004-2017 The Apache Software Foundation Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
  },
  "Library/PackageCache/com.unity.editorcoroutines@1.0.0/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.editorcoroutines@1.0.0/CHANGELOG.html",
    "title": "Changelog | Cacher Game",
    "summary": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. [1.0.0] - 2020-04-01 Changed Package has been verified for 2020.2 [0.1.0-preview.2] - 2020-03-17 Changed Lowered data size for the EditorWaitForSeconds class by half. [0.1.0-preview.1] - 2020-01-08 Added Added support for AsyncOperation subclasses. Changed Fixed unstable test. [0.0.2-preview.1] - 2019-01-25 Changed Fixed a compilation issue caused by using the 'default' literal. [0.0.1-preview.5] - 2019-01-14 Changed Updated Readme.md. Added unified yield statement processor. Added stack based processing of nested yield statements. Updated tests. Lowered memory footprint of editor coroutine instances. Removed Removed recursive handling of nested yield statements. Removed specialized yield statement processors. [0.0.1-preview.4] - 2018-12-7 Added API documentation. Changed Fixed line endings for the EditorCourtineTests.cs source file. [0.0.1-preview.3] - 2018-10-11 Changed Updated LICENSE.md. Updated manifest to reflect correct minimum supported version. [0.0.1-preview.2] - 2018-10-11 Added Added stub documentation via com.unity.editorcoroutines.md. [0.0.1-preview.1] - 2018-10-10 Added Added nesting support for editor coroutines. Added abitrary enumerator support for editor coroutines. Created specialized EditorWaitForSeconds class with access to it's wait time ( same behavior as WaitForSeconds). This is the first release of Unity Package Editor Coroutines. Source code release of the Editor Coroutines package, with no added documentation or stripping of default Package Creation Kit files."
  },
  "Library/PackageCache/com.unity.editorcoroutines@1.0.0/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.editorcoroutines@1.0.0/Documentation~/TableOfContents.html",
    "title": "Unity Editor Coroutines | Cacher Game",
    "summary": "Unity Editor Coroutines Editor Coroutines overview"
  },
  "Library/PackageCache/com.unity.editorcoroutines@1.0.0/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.editorcoroutines@1.0.0/Documentation~/index.html",
    "title": "About Editor Coroutines | Cacher Game",
    "summary": "About Editor Coroutines The Editor Coroutines package allows the user to start the execution of iterator methods within the Editor similar to how we handle Coroutines inside MonoBehaviour scripts during runtime. Installing Editor Coroutines To install this package, follow the instructions in the Package Manager documentation. Note: While this package is in preview, the Package Manager needs to be configured to show Preview Packages. (Under the Advanced drop-down menu, enable Show preview packages.) Then search for the Editor Coroutines package. Using Editor Coroutines To learn how to use the Editor Coroutines package in your project, please refer to the Scripting API section of the documentation. Technical details Requirements This version of Editor Coroutines is compatible with the following versions of the Unity Editor: 2018.1 and later (recommended) Note: If you install the Memory Profiler package it will automatically install the Editor Coroutines package as a dependency. Known limitations Editor Coroutines version 0.0.1-preview.2 includes the following known limitation(s): The iterator functions passed to Editor Coroutines do not support yielding any of the instruction classes present inside the Unity Scripting API (e.g., WaitForSeconds, WaitForEndOfFrame), except for the CustomYieldInstruction derived classes with the MoveNext method implemented. Tip: yield return null is a way to skip a frame within the Editor. Package contents The following table indicates the root folders in the package where you can find useful resources: Location Description Documentation~ Contains the documentation for the package. Tests Contains the unit tests for the package. Document revision history Date Reason June 20, 2019 Removed deprecated manual link. Dec 7, 2018 Api documentation added. Matches package version 0.0.1-preview.4. Oct 11, 2018 Document created. Matches package version 0.0.1-preview.2."
  },
  "Library/PackageCache/com.unity.editorcoroutines@1.0.0/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.editorcoroutines@1.0.0/LICENSE.html",
    "title": "| Cacher Game",
    "summary": "com.unity.core.editorcoroutines copyright © 2018 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.editorcoroutines@1.0.0/README.html": {
    "href": "Library/PackageCache/com.unity.editorcoroutines@1.0.0/README.html",
    "title": "| Cacher Game",
    "summary": "Editor Coroutines"
  },
  "Library/PackageCache/com.unity.ext.nunit@1.0.6/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.ext.nunit@1.0.6/CHANGELOG.html",
    "title": "Changelog | Cacher Game",
    "summary": "Changelog [1.0.6] - 2020-11-30 isExplicitlyReferenced set to 0 (case 1296162) [1.0.5] - 2020-11-04 Removed pdb files [1.0.4] - 2020-11-03 Added the portable-pdb (DSTR-37) [1.0.3] - 2020-10-30 Fixed being able to load mdb or portable-pdb symbolsbug (DSTR-37) Minimum unity version updated (case 1279253) [1.0.2] - 2019-12-04 Added missed metafiles [0.0.1] - 2019-02-21 This is the first release of Unity Package com.unity.ext.nunit. Migrated the custom version of nunit from inside of unity."
  },
  "Library/PackageCache/com.unity.ext.nunit@1.0.6/Documentation~/ext.nunit.html": {
    "href": "Library/PackageCache/com.unity.ext.nunit@1.0.6/Documentation~/ext.nunit.html",
    "title": "Custom Nunit build to work with Unity | Cacher Game",
    "summary": "Custom Nunit build to work with Unity This version of nunit works with all platforms, il2cpp and Mono AOT. For Nunit Documentation: https://github.com/nunit/docs/wiki/NUnit-Documentation"
  },
  "Library/PackageCache/com.unity.ext.nunit@1.0.6/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.ext.nunit@1.0.6/LICENSE.html",
    "title": "| Cacher Game",
    "summary": "Copyright (c) 2018 Charlie Poole, Rob Prouse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Library/PackageCache/com.unity.ext.nunit@1.0.6/README.html": {
    "href": "Library/PackageCache/com.unity.ext.nunit@1.0.6/README.html",
    "title": "Custom Nunit build to work with Unity | Cacher Game",
    "summary": "Custom Nunit build to work with Unity This version of nunit works with all platforms, il2cpp and Mono AOT. For Nunit Documentation: https://github.com/nunit/docs/wiki/NUnit-Documentation"
  },
  "Library/PackageCache/com.unity.feature.development@1.0.1/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.feature.development@1.0.1/CHANGELOG.html",
    "title": "Changelog | Cacher Game",
    "summary": "Changelog [1.0.1] - 2021-06-15 Changes Added the Code Coverage package [1.0.0] - 2021-04-23 This is the first release of Engineering feature set."
  },
  "Library/PackageCache/com.unity.ide.rider@3.0.27/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.ide.rider@3.0.27/CHANGELOG.html",
    "title": "Code Editor Package for Rider | Cacher Game",
    "summary": "Code Editor Package for Rider [3.0.27] - 2023-11-30 Restore the ability to select Rider installation from the custom location Fix possible extra project regeneration on moving focus from Rider to Unity Improve performance of code generation for very large projects [3.0.25] - 2023-08-18 unification of functionality to search JetBrains installations and open solution and file in Rider [3.0.22] - 2023-05-2 RIDER-82999 Unity's plugin SyncAll does not regenerate project files, and instead does basically nothing. #2401 Compilation issue with Unity 2021.3.0f1 [3.0.21] - 2023-04-18 RIDER-92424 JetBrains Rider Editor 3.0.20 package Update for Unity, Cause's Rider to Slows to a Crawl after updating RIDER-92419 JetBrains Rider Editor 3.0.20 for Unity has duplicate assemblies loaded into runtime [3.0.20] - 2023-04-05 fix loading Rider integration EditorPlugin on first switch of External Editor to Rider, see RIDER-91185 Keep the the PackageManager in sync with the Rider changes made to the manifest.json, it should help with RIDER-77343 Support CompilerOptions.RoslynAdditionalFilePaths and CompilerOptions.AnalyzerConfigPath [3.0.18] - 2023-01-09 RIDER-74818 Unity doesn't get to play mode if Editor is not running and user starts debug or profiling Improve performance of project generation - avoid using Directory.Exists avoid doing ProjectGeneration twice on the first start-up [3.0.17] - 2022-12-01 Avoid adding asset project parts to both editor and player projects, fixes the following issues: RIDER-75500 Local package references completions shows duplicate entries if player projects are generated RIDER-73795 Conversion to guid is not offered for assemblies with generated player projects RIDER-71238 No usages can be found for the assembly if player projects are generated [3.0.16] - 2022-09-09 Update the changelog Add folders to the generated csproj files Avoid extra RequestScriptReload call on the first start Fix shader support for folders in packages, but outside asmdef [3.0.15] - 2022-05-24 Cleanup cache after project generation to reduce memory consumption Performance optimization RIDER-76126 Rider package should generate an empty csproj for empty Unity project RIDER-77206 Unity 2020.1.3 'PlayerSettings' does not contain a definition for 'suppressCommonWarnings [3.0.14] - 2022-04-21 Move Rider package persisted state to Library, to avoid vcs collisions or adding it specifically to gitignore [3.0.13] - 2022-03-24 fix RIDER-69927 \"Test not run\" status is shown for the test suite when running unit tests for Unity project fix RIDER-74676 Unity plugin \"JetBrainseRider Editor\" completely breaks <= 2019.1.9 fix RIDER-71503 Unity Hang on \"Domain Unload\", caused by dispose of FileSystemWatcher [3.0.12] - 2022-01-28 Fix bug, which was introduced in 3.0.10: New script was not added to the csproj, because cached list of assemblies was used. [3.0.10] - 2021-12-09 Fix presentation of the TargetFramework in the csproj Fix: Auto-generated solution doesn't compile when code overrides virtual functions in other assemblies Fix RIDER-72234 Avoid full project generation, when only content of assembly was changed Fix RIDER-71985 Building large Unity projects randomly fails Fix RIDER-72174 Looking for Rider installed by dotUltimate installer [3.0.9] - 2021-11-09 Fix path for Roslyn analyser supplied with a package Minimal requirement for roslyn analyzer scope is Unity 2020.3.6f1 and above [3.0.8] - 2021-11-08 Technical release [3.0.7] - 2021-05-07 RIDER-60815 Simplify extensions lists for Rider package Fix csc.rsp -nullable+ / -nullable- parsing https://github.com/van800/com.unity.ide.rider/issues/7 Support -warnaserror/-warnaserror-:/-warnaserror+: in csc.rsp [3.0.6] - 2021-04-06 Fix bug: For Unity 2021.1+ Switching external editor from VS => Rider won't create the connection between Unity and Rider. When PlayerSettings.suppressCommonWarnings is true, it is reflected in the generated csproj with NoWarn \"0169\", \"0649\" By default include T4 templates in the generated solution (RIDER-37159) RIDER-60554 Unity crash in case of project without Unity Test Framework Package. RIDER-60445 Fix presentation of Rider external editor, when it is installed in a custom location. Improve project files generation performance RIDER-60508 Project Generation for projects without any cs files - add reference to UnityEditor/UnityEngine, so that Rider would detect Unity path and version and provide rich features for shader file. [3.0.5] - 2021-02-25 More stable in case of possible Rider product code change, improve test. Allows using \"Rider for Unreal\" with Unity projects (https://youtrack.jetbrains.com/issue/RIDER-51203) Remove implicit dependency to Test-Framework package Fix \"Unreachable code detected\" warning (https://youtrack.jetbrains.com/issue/RIDER-57930) [3.0.4] - 2021-01-26 Use LangVersion provided by Unity for generated csproj Improve documentation Support nullable provided in csc,rsp Avoid doing work in Unity secondary processes in UNITY_2021_1_OR_NEWER with UnityEditor.MPE.ProcessLevel.Secondary [3.0.3] - 2020-11-18 Update License Avoid connecting Rider from secondary UnityEditor instances Fix RIDER-53082 - Generate csproj without cs files, when there are any assets inside [3.0.2] - 2020-10-27 Speedup ProjectGeneration Fix RIDER-51958. Callbacks OnGeneratedCSProjectFiles would not work, but show a Warning instead. Remove release configuration Call RequestScriptReload, when External Editor is changed in Unity. [3.0.1] - 2020-10-02 RIDER-46658 Rider does not run PlayMode tests when ValueSource is combined with parameterized TestFixture RIDER-49947 Invoking PlayerSettings.SetScriptingDefineSymbolsForGroup() does not update definitions in Rider. Add static entrypoint Packages.Rider.Editor.RiderScriptEditor.SyncSolution to allow generating solution from commandline. [2.0.7] - 2020-08-18 Improve performance Add support for asmdef Root Namespace in .csproj generation ProjectGeneration for custom roslyn analysers https://docs.unity3d.com/2020.2/Documentation/Manual/roslyn-analyzers.html Switch target platform in Unity would regenerate csproj files (https://github.com/JetBrains/resharper-unity/issues/1740) [2.0.6] - 2020-08-10 Improve performance Add support for asmdef Root Namespace in .csproj generation ProjectGeneration for custom roslyn analysers https://docs.unity3d.com/2020.2/Documentation/Manual/roslyn-analyzers.html Switch target platform in Unity would regenerate csproj files (https://github.com/JetBrains/resharper-unity/issues/1740) [2.0.5] - 2020-05-27 Fix Regression in 2.0.3: In Unity 2019.2.9 on Mac, changing csproj and calling AssetDatabase.Refresh is not regenerating csproj. Regenerate projects on changes in manifest.json and Project Settings (EditorOnlyScriptingUserSettings.json) (#51) Fix: Assembly references to package assemblies break IDE projects. Fix: Reporting test duration. [2.0.2] - 2020-03-18 fix bug in searching Rider path on MacOS [2.0.1] - 2020-03-05 Speed improvements, ProjectTypeGuids for unity-generated project Improve UI for Project Generation settings Changes in csc.rsp would cause project-generation Remove NoWarn 0169 from generated csproj Support custom JetBrains Toolbox installation location [1.2.1] - 2019-12-09 Load optimised EditorPlugin version compiled to net 461, with fallback to previous version. On ExternalEditor settings page: reorder Generate all ... after Extensions handled Better presentation for Rider of some version in ExternalEditors list Initial support for Code Coverage with dotCover plugin in Rider Added support for Player Project generation [1.1.4] - 2019-11-21 Fix warning - unreachable code [1.1.3] - 2019-10-17 Update External Editor, when new toolbox build was installed Add xaml to default list of extensions to include in csproj Avoid initializing Rider package in secondary Unity process, which does Asset processing Reflect multiple csc.rsp arguments to generated csproj files: https://github.com/JetBrains/resharper-unity/issues/1337 Setting, which allowed to override LangVersion removed in favor of langversion in csc.rsp Environment.NewLine is used in generated project files instead of Windows line separator. [1.1.2] - 2019-09-18 performance optimizations: avoid multiple evaluations avoid reflection in DisableSyncSolutionOnceCallBack project generation optimization fixes: avoid compilation error with incompatible Test Framework package [1.1.1] - 2019-08-26 parse nowarn in csc.rsp warning, when Unity was started from Rider, but external editor was different improved unit test support workaround to avoid Unity internal project-generation (fix #28) [1.1.0] - 2019-07-02 new setting to manage list of extensions to be opened with Rider avoid breaking everything on any unhandled exception in RiderScriptEditor cctor hide Rider settings, when different Editor is selected dynamically load only newer rider plugins path detection (work on unix symlinks) speed up for project generation lots of bug fixing [1.0.8] - 2019-05-20 Fix NullReferenceException when External editor was pointing to non-existing Rider everything was broken by null-ref. [1.0.7] - 2019-05-16 Initial migration steps from rider plugin to package. Fix OSX check and opening of files. [1.0.6] - 2019-04-30 Ensure asset database is refreshed when generating csproj and solution files. [1.0.5] - 2019-04-27 Add support for generating all csproj files. [1.0.4] - 2019-04-18 Fix relative package paths. Fix opening editor on mac. [1.0.3] - 2019-04-12 Fixing null reference issue for callbacks to Asset pipeline. [1.0.2] - 2019-01-01 This is the first release of Unity Package rider_editor. Using the newly created api to integrate Rider with Unity."
  },
  "Library/PackageCache/com.unity.ide.rider@3.0.27/CONTRIBUTING.html": {
    "href": "Library/PackageCache/com.unity.ide.rider@3.0.27/CONTRIBUTING.html",
    "title": "Contributing | Cacher Game",
    "summary": "Contributing All contributions are subject to the Unity Contribution Agreement(UCA) By making a pull request, you are confirming agreement to the terms and conditions of the UCA, including that your Contributions are your original creation and that you have complete right and authority to make your Contributions. Once you have a change ready following these ground rules. Simply make a pull request"
  },
  "Library/PackageCache/com.unity.ide.rider@3.0.27/Documentation~/README.html": {
    "href": "Library/PackageCache/com.unity.ide.rider@3.0.27/Documentation~/README.html",
    "title": "Code Editor Package for Rider | Cacher Game",
    "summary": "Code Editor Package for Rider This package is not intended to be modified by users. Nor does it provide any api intended to be included in user projects."
  },
  "Library/PackageCache/com.unity.ide.rider@3.0.27/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.ide.rider@3.0.27/Documentation~/TableOfContents.html",
    "title": "| Cacher Game",
    "summary": "About JetBrains Rider Editor Using the JetBrains Rider Editor package"
  },
  "Library/PackageCache/com.unity.ide.rider@3.0.27/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.ide.rider@3.0.27/Documentation~/index.html",
    "title": "About JetBrains Rider Editor | Cacher Game",
    "summary": "About JetBrains Rider Editor The JetBrains Rider editor package integrates support for the JetBrains Rider .NET Integrated Development Environment (IDE), into the Unity Editor. This package provides an end-point for Rider to call different Unity APIs and to generate .csproj and .sln files, which Rider uses to implement support for Unity in its plug-in. This package ensures that IDE features like autocomplete suggestions and flagging dependency conflicts work in Rider. It uses .cproj and .sln files which store information about your project such as: Versioning information Build files Platform requirements Web server or database settings Not all code in Unity is directly visible to code editors, particularly when using packages. This is because packages don’t provide their own .csproj files, and Unity doesn’t create them for installed packages by default. This means that IDE features like autocomplete suggestions and flagging dependency conflicts do not work with code in these packages. The purpose of this package is to produce the .csproj files that make these features possible by default when you use Rider. Installation As of Unity version 2019.2, this package comes as a part of the default Unity installation. If you are updating your project from an older version of Unity, you might need to install this package via the Package Manager. Requirements This version of the JetBrains Rider editor package is compatible with the following versions of the Unity Editor: 2019.2.6 or later To use this package, you must have the following third-party products installed: JetBrains Rider version 2019.3 or newer For more information about the Rider IDE, see the JetBrains Rider documentation. Submitting issues This package is maintained by JetBrains and Unity. Submit issues to the JetBrains/resharper-unity/issues GitHub page. Unity intends for this package to become accessible to the public on GitHub in the future."
  },
  "Library/PackageCache/com.unity.ide.rider@3.0.27/Documentation~/using-the-jetbrains-rider-editor-package.html": {
    "href": "Library/PackageCache/com.unity.ide.rider@3.0.27/Documentation~/using-the-jetbrains-rider-editor-package.html",
    "title": "Using the JetBrains Rider Editor package | Cacher Game",
    "summary": "Using the JetBrains Rider Editor package To use the package, go to Edit > Preferences > External Tools, click on the External Script Editor dropdown menu and select your version of Rider. When you select this option, the window reloads. After the window reloads, new settings that control production of .csproj files become available. External Tools tab in the Preferences window Commandline endpoints Q: Generate sln/csproj files for CI? A: Unity -batchmode -quit -projectPath ProjectPath -executeMethod Packages.Rider.Editor.RiderScriptEditor.SyncSolution Q: Generate sln/csproj and open External Editor? A: Unity -batchmode -quit -projectPath ProjectPath -executeMethod Packages.Rider.Editor.RiderScriptEditor.SyncSolutionAndOpenExternalEditor Package preferences Property: Description: Extensions handled This field lists the file extensions that open in JetBrains Rider. This field contains a variety of extensions by default. Generate .csproj files for: Each setting in this list enables or disables production of .csproj files for a different type of package. The Regenerate project files button updates existing .csproj files and creates the necessary new ones based on the settings you choose. These settings control whether to generate .csproj files for any installed packages. For more information on how to install packages, see the Adding and removing packages documentation. __ Embedded packages__ Any package that appears under your project’s Packages folder is an embedded package. An embedded package is not necessarily built-in; you can create your own packages and embed them inside your project. This setting is enabled by default. For more information on embedded packages, see the Embedded dependencies documentation. __ Local packages__ Any package that you install from a local repository stored on your machine, but from outside of your Unity project. This setting is enabled by default. __ Registry packages__ Any package that you install from either the official Unity registry or a custom registry. Packages in the Unity registry are available to install directly from the Package Manager. For more information about the Unity package registry, see the Package Registry section of the Unity Package Manager documentation. For information on creating and using custom registries in addition to the Unity registry, see the Scoped package registries documentation. __ Git packages__ Any package you install directly from a Git repository using a URL. __ Built-in packages__ Any package that is already installed as part of the default Unity installation. __ Tarball packages__ Any package you install from a GZip tarball archive on the local machine, outside of your Unity project. __ Unknown packages__ Any package which Unity cannot determine an origin for. This could be because the package doesn’t list its origin, or that Unity doesn’t recognize the origin listed. Player projects For each player project, generate an additional .csproj file named 'originalProjectName.Player.csproj'. This allows different project types to have their code included in Rider’s systems, such as assembly definitions or testing suites. This package also adds a second tab under Preferences named Rider, pictured below. Rider tab in the Preferences window Note The Logging Level menu does not control the level of Unity's logging, only the level of log messages that Rider package logs in its own log file. For more information on controlling Unity's logging level, see the Stack Trace Logging section of the Console Window documentation. Property: Description: Pass Console to Rider If Pass Console to Rider is enabled, Rider can access data that Unity sends to the Unity Console and display it within its own environment instead. Log file The Log file field contains an Open log button. Select this button to open the log file inside the Rider IDE. This button is unavailable when Logging Level is set to OFF. Logging Level The Logging Level menu controls how detailed are the Rider package logs. Those logs may be used for troubleshooting communication between Rider and Unity. Rider package logs all messages of the type you select as well as any messages of a more severe type. For example, if you choose WARN, then Rider logs all ERROR and FATAL messages as well as WARN messages. The message types are listed below in order of severity, with FATAL as the most severe type of message and TRACE as the least severe. OFF Rider does not produce any logs. **FATAL Logs information relating to serious problems that cause the application to crash. This setting produces the smallest logs. ERROR Logs information about errors that prevent some functionality from working, but don’t cause the application to fail (for example, a failed database connection). WARN Logs information about possible problems, or any unusual behaviour. Warnings don’t indicate that something has gone wrong, but that Unity detects something that might potentially cause an issue if not investigated. INFO Logs information about normal operation of the application, such as a successful database connection attempt. VERBOSE Logs detailed but not exhaustive information about your code. This setting is helpful for checking how your code executes or providing diagnostic information for other developers. TRACE Logs as much information about the application as possible. This can create a very large and detailed log, so it’s good practice to only use it when attempting to find the cause of a specific issue with your code."
  },
  "Library/PackageCache/com.unity.ide.rider@3.0.27/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.ide.rider@3.0.27/LICENSE.html",
    "title": "| Cacher Game",
    "summary": "MIT License Copyright (c) 2019 Unity Technologies Copyright (c) 2019 JetBrains s.r.o. All rights reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/CHANGELOG.html",
    "title": "Code Editor Package for Visual Studio | Cacher Game",
    "summary": "Code Editor Package for Visual Studio [2.0.22] - 2023-10-03 Integration: Add support for XDG_DATA_DIRS and .desktop files on Linux for VS Code discovery. Use compile-time platform-specifics instead of using runtime conditions. Project generation: Suppress USG0001 warnings. Mark referenced assemblies as private (to not copy extra files to output directory when building). Add Unity capability to SDK-Style projects. Prevent circular dependency errors with SDK-Style projects. [2.0.21] - 2023-09-05 Integration: Only disable the legacy com.unity.ide.vscode package going forward. Fix json parsing issues with specific non-UTF code pages. Project generation: Target netstandard2.1 instead of netstandard2.0. Set defaultSolution in settings.json. Remove files.exclude entries for root csproj and sln files in settings.json when needed. Add vstuc launch configuration to launch.json when needed. Add visualstudiotoolsforunity.vstuc entry to extensions.json when needed. You can prevent the package from patching those configuration files by creating a .vscode/.vstupatchdisable file. [2.0.20] - 2023-06-27 Integration: Internal API refactoring. Add support for Visual Studio Code. Project generation: Add support for Sdk Style project generation. Fix an issue related to missing properties with 2021.3. [2.0.18] - 2023-03-17 Integration: Performance improvements with EditorApplication.update callbacks. Project generation: Add extra compiler options for analyzers and source generators. [2.0.17] - 2022-12-06 Integration: Fix rare deadlocks while discovering or launching Visual Studio on Windows. Improve launching Visual Studio on macOs. Project generation: Include analyzers from response files. Update supported C# versions. Performance improvements. [2.0.16] - 2022-06-08 Integration: Prevent ADB Refresh while being in safe-mode with a URP project Fixed an issue keeping the progress bar visible even after opening a script with Visual Studio. [2.0.15] - 2022-03-21 Integration: Improved project generation performance. Added support for keeping file/folder structure when working with external packages. Fixed project generation not being refreshed when selecting Visual Studio as the preferred external editor. [2.0.14] - 2022-01-14 Integration: Remove package version checking. [2.0.13] - 2022-01-12 Integration: Fixed wrong path to analyzers in generated projects when using external packages. Fixed selective project generation not creating Analyzer/LangVersion nodes. Fixed asmdef references with Player projects. Documentation: Added new documentation including ToC, overview, how to use and images. [2.0.12] - 2021-10-20 Integration: Do not block asset opening when only a VS instance without a loaded solution is found. Only check package version once per Unity session. Improved support for Visual Studio For Mac 2022. [2.0.11] - 2021-07-01 Integration: Added support for Visual Studio and Visual Studio For Mac 2022. Fixed an issue when the package was enabled for background processes. Project generation: Use absolute paths for Analyzers and rulesets. [2.0.10] - 2021-06-10 Project generation: Improved project generation performance when a file is moved, deleted or modified. Integration: Improved Inner-loop performance by avoiding to call the package manager when looking up vswhere utility. Fixed a network issue preventing the communication between Visual Studio and Unity on Windows. [2.0.9] - 2021-05-04 Project generation: Added support for CLI. Integration: Improved performance when discovering Visual Studio installations. Warn when legacy assemblies are present in the project. Warn when the package version is not up-to-date. [2.0.8] - 2021-04-09 Project generation: Improved generation performance (especially with DOTS enabled projects). Improved stability. Updated Analyzers lookup strategy. Fixed .vsconfig file not generated when using \"regenerate all\". Integration: Improved automation plugins. Documentation: Open sourced automation plugins. [2.0.7] - 2021-02-02 Integration: Remove com.unity.nuget.newtonsoft-json dependency in favor of the built-in JsonUtility for the VS Test Runner. [2.0.6] - 2021-01-20 Project generation: Improved language version detection. Integration: Added support for the VS Test Runner. Added initial support for displaying asset usage. Fixed remaining issues with special characters in file/path. [2.0.5] - 2020-10-30 Integration: Disable legacy pdb symbol checking for Unity packages. [2.0.4] - 2020-10-15 Project generation: Added support for embedded Roslyn analyzer DLLs and ruleset files. Warn the user when the opened script is not part of the generation scope. Warn the user when the selected Visual Studio installation is not found. Generate a .vsconfig file to ensure Visual Studio installation is compatible. Integration: Fix automation issues on MacOS, where a new Visual Studio instance is opened every time. [2.0.3] - 2020-09-09 Project generation: Added C#8 language support. Added UnityProjectGeneratorVersion property. Local and Embedded packages are now selected by default for generation. Added support for asmdef root namespace. Integration: When the user disabled auto-refresh in Unity, do not try to force refresh the Asset database. Fix Visual Studio detection issues with languages using special characters. [2.0.2] - 2020-05-27 Added support for solution folders. Only bind the messenger when the VS editor is selected. Warn when unable to create the messenger. Fixed an initialization issue triggering legacy code generation. Allow package source in assembly to be generated when referenced from asmref. [2.0.1] - 2020-03-19 When Visual Studio installation is compatible with C# 8.0, setup the language version to not prompt the user with unsupported constructs. (So far Unity only supports C# 7.3). Use Unity's TypeCache to improve project generation speed. Properly check for a managed assembly before displaying a warning regarding legacy PDB usage. Add support for selective project generation (embedded, local, registry, git, builtin, player). [2.0.0] - 2019-11-06 Improved Visual Studio and Visual Studio for Mac automatic discovery. Added support for the VSTU messaging system (start/stop features from Visual Studio). Added support for solution roundtrip (preserves references to external projects and solution properties). Added support for VSTU Analyzers (requires Visual Studio 2019 16.3, Visual Studio for Mac 8.3). Added a warning when using legacy pdb symbol files. Fixed issues while Opening Visual Studio on Windows. Fixed issues while Opening Visual Studio on Mac. [1.1.1] - 2019-05-29 Fix Bridge assembly loading with non VS2017 editors. [1.1.0] - 2019-05-27 Move internal extension handling to package. [1.0.11] - 2019-05-21 Fix detection of visual studio for mac installation. [1.0.10] - 2019-05-04 Fix ignored comintegration executable. [1.0.9] - 2019-03-05 Updated MonoDevelop support, to pass correct arguments, and not import VSTU plugin. Use release build of COMIntegration for Visual Studio. [1.0.7] - 2019-04-30 Ensure asset database is refreshed when generating csproj and solution files. [1.0.6] - 2019-04-27 Add support for generating all csproj files. [1.0.5] - 2019-04-18 Fix relative package paths. Fix opening editor on mac. [1.0.4] - 2019-04-12 Fixing null reference issue for callbacks to AssetPostProcessor. Ensure Path.GetFullPath does not get an empty string. [1.0.3] - 2019-01-01 This is the first release of Unity Package visualstudio_editor. Using the newly created api to integrate Visual Studio with Unity."
  },
  "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/CONTRIBUTING.html": {
    "href": "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/CONTRIBUTING.html",
    "title": "Contributing | Cacher Game",
    "summary": "Contributing All contributions are subject to the Unity Contribution Agreement(UCA) and Microsoft Contributor License Agreement (CLA) By making a pull request, you are confirming agreement to the terms and conditions of the UCA and CLA, including that your contributions are your original creation and that you have complete right and authority to make your contributions. Once you have a change ready following these ground rules. Simply make a pull request"
  },
  "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/README.html": {
    "href": "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/README.html",
    "title": "Code Editor Package for Visual Studio | Cacher Game",
    "summary": "Code Editor Package for Visual Studio This package is not intended to be modified by users. Nor does it provide any api intended to be included in user projects."
  },
  "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/TableOfContents.html",
    "title": "| Cacher Game",
    "summary": "About Visual Studio Editor Using the Visual Studio Editor package"
  },
  "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/index.html",
    "title": "Code Editor Package for Visual Studio | Cacher Game",
    "summary": "Code Editor Package for Visual Studio About Visual Studio Editor The Visual Studio Editor package provides the Unity Editor with support for Unity-specific features from the Visual Studio Tools for Unity extension in Visual Studio and Visual Studio for Mac. These include IntelliSense auto-complete suggestions, C# editing, and debugging. Installation This package is a built-in package and installed by default. Note: If you’re using a version of the Unity Editor before 2019.4, you’ll need to install this package through the package manager. Requirements This version of the Visual Studio Editor package is compatible with the following versions of the Unity Editor: 2019.4 and later To use this package, you must have the following third-party products installed: On Windows: Visual Studio 2019 version 16.9 or newer with Visual Studio Tools for Unity 4.0.9 or newer. On macOS: Visual Studio for Mac 2019 version 8.9 or newer with Visual Studio Tools for Unity 2.0.9 or newer. For more information about using Visual Studio with Unity, see Microsoft’s Visual Studio Tools for Unity documentation. Submitting issues This package is maintained by Microsoft and Unity. Submit issues directly from Visual Studio and Visual Studio for Mac from the Help > Submit Feedback > Report a Problem menu. Unity will make this package accessible to the public on GitHub in the future."
  },
  "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/using-visual-studio-editor.html": {
    "href": "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/using-visual-studio-editor.html",
    "title": "Using the Visual Studio Editor package | Cacher Game",
    "summary": "Using the Visual Studio Editor package To use the package, go to Edit > Preferences > External Tools > External Script Editor and select the version of Visual Studio you have installed. When you select this option, the window reloads and displays settings that control production of .csproj files. Generate .csproj files Each setting in the table below enables or disables the production of .csproj files for a different type of package.When you click Regenerate project files, Unity updates the existing .csproj files and creates the necessary new ones based on the settings you choose. These settings control whether to generate .csproj files for any installed packages. For more information on how to install packages, see Adding and removing packages. Property Description Embedded packages Any package that appears under your project’s Packages folder is an embedded package. An embedded package is not necessarily built-in; you can create your own packages and embed them inside your project. This setting is enabled by default. For more information on embedded packages, see Embedded dependencies. Local packages Any package that you install from a local repository stored on your machine, but from outside of your Unity project. This setting is enabled by default. Registry packages Any package that you install from either the official Unity registry or a custom registry. Packages in the Unity registry are available to install directly from the Package Manager. For more information about the Unity package registry, see The Package Registry section of the Unity Package Manager documentation. For information on how to create and use custom registries in addition to the Unity registry, see Scoped package registries. Git packages Any package you install directly from a Git repository using a URL. Built-in packages Any package that is already installed as part of the default Unity installation. Tarball packages Any package you install from a GZip tarball archive on the local machine, outside of your Unity project. Unknown packages Any package which Unity cannot determine an origin for. This could be because the package doesn’t list its origin, or that Unity doesn’t recognize the origin listed. Player projects For each player project, generate an additional .csproj file named ‘originalProjectName.Player.csproj’. This allows different project types to have their code included in Visual Studio’s systems, such as assembly definitions or testing suites."
  },
  "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/LICENSE.html",
    "title": "| Cacher Game",
    "summary": "MIT License Copyright (c) 2019 Unity Technologies Copyright (c) 2019 Microsoft Corporation. All rights reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/ThirdPartyNotices.html": {
    "href": "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/ThirdPartyNotices.html",
    "title": "| Cacher Game",
    "summary": "This package contains third-party software components governed by the license(s) indicated below: Component Name: VSWhere License Type: \"MIT\" The MIT License (MIT) Copyright (C) Microsoft Corporation. All rights reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: benbuck/EnvDTE License Type: Zero-Clause BSD Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE."
  },
  "Library/PackageCache/com.unity.ide.vscode@1.2.5/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.ide.vscode@1.2.5/CHANGELOG.html",
    "title": "Code Editor Package for Visual Studio Code | Cacher Game",
    "summary": "Code Editor Package for Visual Studio Code [1.2.5] - 2022-02-07 Introduce OnGeneratedCSProjectFiles, OnGeneratedCSProject and OnGeneratedSlnSolution callbacks. Always use forward slash in source paths Analyzers use absolute paths Ruleset files for roslyn analyzers Extra snap search paths on Ubuntu Specific c# language version for specific unity versions No longer hide .gitignore in VSCode file explorer [1.2.3] - 2020-10-23 Remove workaround for VSCode omnisharp (as of https://github.com/OmniSharp/omnisharp-vscode/issues/4113 we no longer need to disable the referenceoutputassemblies). [1.2.2] - 2020-09-04 VSC-14 - synchronize solution file when adding new assembly [1.2.1] - 2020-05-15 Source filtering adds support for asmref [1.2.0] - 2020-03-04 Do not reference projects that has not been generated (case 1211057) Only open files that exists (case 1188394) Add individual toggle buttons for generating csprojects for packages Add support for Roslyn analyzers in project generation through csc.rsp and compiled assembly references Remove Release build target from csproj and sln [1.1.4] - 2020-01-02 Delta project generation, only recompute the csproj files whose script modified. [1.1.3] - 2019-10-22 Exe version of vscode will use Normal ProcessWindowStyle while cmd will use Hidden [1.1.2] - 2019-08-30 Fixing OSX open command arguments [1.1.1] - 2019-08-19 Support for Player Project. Generates specific csproj files containing files, reference, defines, etc. that will show how the assembly will be compiled for a target platform. [1.1.0] - 2019-08-07 Adds support for choosing extensions to be opened with VSCode. This can be done through the GUI in Preferences. Avoids opening all extensions after the change in core unity. [1.0.7] - 2019-05-15 Fix various OSX specific issues. Generate project on load if they are not generated. Fix path recognition. [1.0.6] - 2019-04-30 Ensure asset database is refreshed when generating csproj and solution files. [1.0.5] - 2019-04-27 Add support for generating all csproj files. [1.0.4] - 2019-04-18 Fix relative package paths. Fix opening editor on mac. Add %LOCALAPPDATA%/Programs to the path of install paths. [1.0.3] - 2019-01-01 This is the first release of Unity Package vscode_editor. Using the newly created api to integrate Visual Studio Code with Unity."
  },
  "Library/PackageCache/com.unity.ide.vscode@1.2.5/CONTRIBUTING.html": {
    "href": "Library/PackageCache/com.unity.ide.vscode@1.2.5/CONTRIBUTING.html",
    "title": "Contributing | Cacher Game",
    "summary": "Contributing All contributions are subject to the Unity Contribution Agreement(UCA) By making a pull request, you are confirming agreement to the terms and conditions of the UCA, including that your Contributions are your original creation and that you have complete right and authority to make your Contributions. Once you have a change ready following these ground rules. Simply make a pull request"
  },
  "Library/PackageCache/com.unity.ide.vscode@1.2.5/Documentation~/README.html": {
    "href": "Library/PackageCache/com.unity.ide.vscode@1.2.5/Documentation~/README.html",
    "title": "Code Editor Package for Visual Studio Code | Cacher Game",
    "summary": "Code Editor Package for Visual Studio Code This package is not intended to be modified by users. Nor does it provide any api intended to be included in user projects."
  },
  "Library/PackageCache/com.unity.ide.vscode@1.2.5/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.ide.vscode@1.2.5/LICENSE.html",
    "title": "| Cacher Game",
    "summary": "MIT License Copyright (c) 2019 Unity Technologies Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/CHANGELOG.html",
    "title": "Changelog | Cacher Game",
    "summary": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. [3.2.1] - 2023-04-27 Fixed Newtonsoft DLL when compiling with netstandard 2.0. [3.2.0] - 2023-04-19 Fixed Newtonsoft DLL public key token so it properly supports assembly strong name. Support Newtonsoft's JsonSelectSettings.RegexMatchTimeout. [3.1.0] - 2023-02-28 Updated AOT and Editor DLLs to corresponds to Newtonsoft.Json version 13.0.2 [3.0.2] - 2022-03-29 Removed test code from package. [3.0.1] - 2022-02-21 Updated license file [3.0.0] - 2022-01-27 Updated Documentation [3.0.0-preview.1] - 2022-01-25 Updated AOT and Editor DLLs to corresponds to Newtonsoft.Json version 13.0.1 Removed deprecated Portable DLL Updated README Updated Documentation [2.0.2] - 2020-10-04 Updated README Added package signature for validation [2.0.1-preview.1] - 2020-11-14 Updated README and Internal Fixtures [2.0.0] - 2020-04-20 This is the release of Unity Package Nuget.NewtonsoftJson v2.0.0. Updated dll to AOT compatible version to allow for IL2CPP compilation platform targets Added dll to Portable compatible version to allow for additional platform targets Updated associated Package Documents [2.0.0-preview] - 2019-11-14 This is the preview of Unity Package Nuget.NewtonsoftJson v2.0.0-preview. Changed dll to AOT compatible version to allow for IL2CPP compilation platform targets [1.1.2] - 2019-10-31 This is the release of Unity Package Nuget.NewtonsoftJson v1.1.2. Fixed tests for 2018.4. [1.1.1] - 2019-10-30 This is the release of Unity Package Nuget.NewtonsoftJson v1.1.1. Added some sanity tests to catch issues in the CI. [1.1.0] - 2019-10-29 This is the release of Unity Package Nuget.NewtonsoftJson v1.1.0. Use .net standard 2.0 version of the dll. Renamed the dll to match the assembly name. Users will need to update their assembly references. [1.1.0-preview.1] - 2019-08-09 This is the first preview of Unity Package Nuget.Newtonsoft.Json version 1.1.0. Updated to bug fix release 12.0.2 of Newtonsoft Json. Updated package description. [1.0.1-preview.2] - 2019-10-02 This is the second preview release of Unity Package Nuget.NewtonsoftJson v1.0.1. Use .net standard 2.0 version of the dll. [1.0.1-preview.1] - 2019-08-13 This is the first preview release of Unity Package Nuget.Newtonsoft.Json v1.0.1. Renamed the dll to match the assembly name. Users will need to update their assembly references. [1.0.0] - 2019-08-08 This is the first release of Unity Package Nuget.Newtonsoft.Json. No notable changes from the previous preview release. [1.0.0-preview.4] - 2019-08-06 This is the fourth preview release of Unity Package Nuget.Newtonsoft.Json. Remove the unused asmdef file and make it such that the dll needs to be explicitly included. [1.0.0-preview.3] - 2019-07-03 This is the third preview release of Unity Package Nuget.Newtonsoft.Json. Update the documentation for the package and the package description to state that this package is for internal Unity use only. [1.0.0-preview.2] - 2019-06-21 This is the second preview release of Unity Package Nuget.NewtonsoftJson. The name of the package has been changed to avoid a naming issue with npm. [1.0.0-preview.1] - 2019-06-21 This is the first preview release of Unity Package Nuget.NewtonsoftJson. This is the first preview of a the custom Unity package for NewtonsoftJson. Please report any bugs."
  },
  "Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/Documentation~/index.html",
    "title": "Newtonsoft Json Unity Package | Cacher Game",
    "summary": "Newtonsoft Json Unity Package This is a Unity package for Newtonsoft Json and corresponds to Newtonsoft.Json version 13.0.2. Documentation for this Package is provided as links to the Json.NET Documentation. Json.NET is a popular JSON framework for .NET Documentation Json.NET Main Page Json.NET Documentation Json.NET Source Code Use Cases Flexible JSON serializer for converting between .NET objects and JSON LINQ to JSON for manually reading and writing JSON Write indented, easy-to-read JSON Convert JSON to and from XML Supports .NET Standard 2.0, .NET 2, .NET 3.5, .NET 4, .NET 4.5, Silverlight, Windows Phone and Windows 8 Store"
  },
  "Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/LICENSE.html",
    "title": "| Cacher Game",
    "summary": "Nuget.Newtonsoft.Json copyright © 2022 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/README.html": {
    "href": "Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/README.html",
    "title": "Newtonsoft.JSON | Cacher Game",
    "summary": "This package wraps the Json.NET DLLs. Newtonsoft.JSON Unity Package for [Newtonsoft's JSON library] (https://www.newtonsoft.com/json) This package includes the DLL version of JSON.Net Version: 13.0.1. It also has the AOT DLL for additional Platform Compatibility. This package is intended to be inherited as a dependency, and should not be directly installed, by end users."
  },
  "Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/Third Party Notices.html": {
    "href": "Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/Third Party Notices.html",
    "title": "| Cacher Game",
    "summary": "This package contains third-party software components governed by the license(s) indicated below: Component Name: Newtonsoft.Json License Type: MIT The MIT License (MIT) Copyright (c) 2007 James Newton-King Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: Json.Net.Unity3D License Type: MIT The MIT License (MIT) Copyright (c) Copyright (c) 2016 SaladLab Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: Newtonsoft.Json-for-Unity License Type: MIT The MIT License (MIT) Copyright (c) Copyright (c) 2019 Kalle Jillheden (jilleJr) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: com.newtonsoft.json License Type: MIT MIT License Copyright (c) 2019 Mike Wuetherick Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/CHANGELOG.html",
    "title": "Changelog | Cacher Game",
    "summary": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. [1.2.2] - 2023-01-30 Fixed Fixed exception thrown when removing marker. [1.2.1] - 2023-01-02 Changed Updated What's New page [1.2.0] - 2023-01-02 Added Added support for removing vsync time, so we can see actual CPU duration over multiple frames. A drop down has been added to 'remove' a marker from the analysis and has entries for \"FPS Wait\", \"Present Wait\" and \"Custom\" where you can select any marker from the table using the right click context menu to \"Remove Marker\". Added optional standard deviation (SD) column into marker table (on single view) for sorting data based on variation of marker timings in over the frames. Added export of the comparison table as CSV. Changed Improved profile analysis performance. Updated minimal suppourted version to Unity 2020.3. Fixed Fixed bug when depth filter and marker vsync removal both applied. Fixed commas in CSV export file. [1.1.1] - 2021-10-04 Fixed Fixed pulling frame data from the Profiler to exclude first and last frames if their main thread profiler data is incomplete, so that they don't skewer the analysis results (case 1359686). Fixed IndexOutOfRangeException thrown when using Profiler or selecting Profiler frames in Profile Analyzer. (1366931) [1.1.0] - 2021-07-23 Fixed Fixed x axis display on frame time graph when capture doesn't match Unity Profiler contents. Fixed selected marker name to be updated even when Profiler fails to sync selection. [1.1.0-pre.2] - 2021-04-16 Changed Ensured forward compilation compatibility of ProfilerWindow API usage. Fixed Fixed Frame View Dropdown not showing time in Microseconds when Microseconds are set as display unit type. Fixed ArgurmentOutOfRange exception on 'Clear Selection' usage in Frame Control. Improved loading and analysis progressbar progression to be monotonously incremental and reflect actual stage correctly. Fixed the marked frame time overlay so that it works on loaded data (case 1327888). Fixed keyboard frame controls so that they do not play an error sound (case 1327931). Fixed RangeSettings.IsEqual so that it doesn't throw an exception when there is a different dataView.selectedIndices. [1.1.0-pre.1] - 2021-02-22 Changed Used the new EditorWindow.docked API on 2020.1 and later to replace reflection usage. Made the Thread Selection window a utility window. Added a progress bar, which shows data loading progress. All no longer collapses in the thread view because it was superfluous and held no discernible purpose. Added information to the frame summary tooltip to show the selected ranges. Selecting the Frame, Thread, and Marker Summary title labels now also toggles their foldout. Timings in tooltips now display up to seven digits with a unit type change if below 0.01. This ensures the value is readable and correct. Frame Time Graph selection modifiers (Next, Previous, Grow, Shrink etc.) now work when multiple regions are selected. Added new (hidden) columns to the comparison tab for Percentage Diff for each of the diff types The Depth Slice drop-down is searchable and scrollable for Unity versions 2019.1 or newer. Improved tooltips on the top 10 marker duration time. Fixed The Thread Summary and Marker Summary views now correctly clip their contents when scrolling on 2018.4 and below. Marker detail bars are no longer drawn on top of the list's headers when scrolling. Fixed an issue with saving when there is no data loaded, which previously caused a null reference exception. Add to and Remove from name filter is no longer case sensitive. Optimized frame selection with Show Filtered Threads option enabled and All Threads turned on. Fixed an issue where the Upper Quartile of frame time option did not fit in the Graph scale dropdown in Thread Summary. Improved the error message when the Profile Analyzer fails to load a .data file. Fixed an issue where changing the depth slice and right-clicking on a marker caused an error in 2018.4 and earlier. Fixed the automatic increase of an unsaved file counter in Single view. Improved the Marker Column mode so that it is separate for Single and Compare view. The tooltip of the frame graph's scale control is now clearer and matches the documentation. Fixed an issue where a frame of '0' was incorrectly shown in the Marker Summary when the marker had a duration of 0ms. Fixed an issue with Selection Synchronization between Profiler Window and Profile Analyzer in Unity 2021.1 or newer. Added a log message when the loading or analysis fails due to domain reload. Fixed an issue with the table context menu, where it was not disabled during data processing. Fixed an issue where exporting a marker table that contained markers with commas or quotation marks to the .csv format would break the format. [1.0.3] - 2020-07-31 Fixes Fixed warnings in code so package will not break Unity projects that have warnings as errors enabled. [1.0.2] - 2020-06-30 Fixes Fixed issue where second profiler instance could appear after entering play mode when profile analyzer is open Improved performance of pulling data from Unity profiler Pull Data button now enabled when profiler is recording. This will stop the recording for the duration of the action of pulling of data. Fixed Median sorting in Comparison mode when value missing from one data set, Missing values always sorted before 0 values. [1.0.1] - 2020-06-16 Fixes Fixed \"median marker time (in currently selected frames)\" in tooltip for 'Top 10 markers'. Fixed profile analyzer 5.6 support Fixed minor visual artefact when no marker selection Fixed issue where frame time graph tooltips were not always appearing when hovering Marker Summary - Count Values are now correctly sorted in descending order Hiding selected marker in comparison view if lacking 2 valid data sets Corrected bucketing of histogram data for counts. Display was fractionally incorrect Fixed sorting of frames (by time/count) to be more stable by providing a secondary sort by frame index Marker table export now orders by descending median time (to match the default UI sort option). [1.0.0] - 2020-06-02 Changes Export window updates. Includes tooltips, better on screen positioning. If opened and then new data set loaded. New data set now correctly exported. Frame Time graph now shows border when selected Keys 1 and 2 select the first or second frame time graph to take keyboard focus Frame Time graph now shows highlighted when all frames selected, un highlighted when no frames selected. Fixes Improved histogram display when 0 range. Widened frame index buttons when frame value large 'total number of markers' value in Compare tab now corrected to use unfiltered count Improved error messages when jumpping to frame when profiler data doesn't match profile analyzer data [0.7.0-preview.4] - 2020-05-29 Changes Thread selection window Now only applys thread selection changes when clicking 'Apply'. Closing the window no longer applies the changes automatically. Now contains buttons to Reset to previous thread selection, Select just \"Main Thread\" or \"Common\" set selection (Main, Render and Jobs). Apply button is now greyed out while analysis is running. Group column enabled and used to split off group from thread name, default to by group first Re sorted when selection changed (so states sort correctly when sorting by state) Sort order preserved when buttons pressed and re-opening Fixed sort order for threads (10 after 9 rather than between 1 and 2) Marker sorting Marker table column filtering now preserved when clicking Analyse or Compare or tab switching. Compare table bars to now sort by bar size (=delta value) rather than the left/right value. Marker table bars now start sorted by descending size which is more common usage. Added depths columns into the comparison table and a 'Depth' option in the Marker Columns dropdown Added thread count into thread summary area Added threads column into marker tables (threads the marker occurs on) Thread summary now contains thread count, unique count per data set and selection count Frame time area now allows adding to the selection by holding CTRL (or COMMAND on Mac) Frame range value now includes tooltip to give more detail about the selection Improved text string for depth filter status on the top marker display Fixes Detected and ignored invalid frame markers (duration < 0) Fixed/Removed warnings on loading data in compare view when selection active. Disabled \"Analyze\" button while analysis is already running Fixed Marker Summary 'Top' dropdown selection text width Fixed thread selection window sort order Fixed tooltip on 'count' bars to be scalar value (not a time unit) Clamped selected region shown when zoomed in on frame time graph Frame Control value no longer overlaps with drop-down list when Units are set to Microseconds Fixed thread count text when analysis completes after swapping single/compare tabs during analysis Fixed Frame View's tooltip \"total time\" when rapidly changing frames Fixed overlapping text when selecting single frame when zoomed in Histogram frame count now lists \"1 frame\" when single frame rather than \"1 frames\" Mode: text in top bar now same size as rest of text. Clear Selection in marker right click context menu now only shown if a selection has been made Cut/Paste now supported in the include/exclude marker name filter Frame Time graph frame selection grow/shrink now keeps current selection in paired graph Fixed frame start/end display for \"Select Frames that contain this marker (within whole data set)\" Corrected bucketing of histogram data. Display was fractionally incorrect Histogram now shows non zero height bar if an item in the bucket Fixed right click \"Remove from Included Filters\" when using (quoted) markers with spaces in names Fixed data auto-load from Single to Compare tab when capturing after entering playmode Fixed auto right calculation to use most common difference Fixed auto right display to show + or - and not both at the same time Fixed infinite analysis loop when auto right calculation was clamping to max depth in the other data set Auto right now clamps to min/max depth rather than reverting to 'all' Fixed thread count bug when using comparison mode and loading data on top of existing data Selected marker refocused in marker list when table is regenerated (e.g. when selecting all frames containing the marker). Column by which the Marker Details is sorted by is now maintained when entering Play Mode Updated frame time graph context menu to make hotkeys more consistent with out Unity UI layouts Percent symbol no longer cut off in Mean frame contribution when the value is 100% Frame time graph now scales up when zooming when comparing data with different frame amounts Changing 'Auto Right' tick box no longer causes re-analysis if depth settings unchanged Most tooltips now show values without rounding, so its more obvious when low values give non zero deltas. Fixed individual max tooltip Disabled 'Pull data' button when Unity profiler is still capturing data (as the pull would not complete). Fixed right frame index in exported comparison CSV file. Frame selection no longer changed when moving the cursor in the Filter text box with arrow keys Help text now continues to be shown after entering play mode, while no data set loaded/pulled Fixed frame index button heights when alternative (Verdana) font used. Fixed cache styles to be updated when changing theme (to fix text colour in filters area) Single click (without drag) now always single frame rather than the group of frames in the pixel wide area. Split frame range into start and end rows to display more information when values large Marker Summary comparison times are now limited to 5 digits to prevent text clipping off Enhancements Optimised filter processing for more responsive scrolling when a large marker filter list is supplied. Optimised thread name summary display [0.6.0-preview.1] - 2020-02-04 Fixed a crash with the thread selection API in Unity 2020.1 Fixed marker and thread scroll bars Added extra documentation for public API elements [0.5.0-preview.2] - 2019-09-19 Minor documentation update to fix the changelog formatting [0.5.0-preview.1] - 2019-09-18 Features Added self time option to display 'exclusive' time of markers excluding time in children. Added ability to filter to a parent marker to reduce the marker list to a part of the tree. Added option to filter the column list to set groups (including custom). Added column for total marker time over the frame Added copy to clipboard on table entries Added export option for marker table Enhancements Improved Top N Markers graph to make it clearer this is for the median frames of each data set. Added thread count display (next to marker count). Added frame index to more tooltips to improve clarity of the data values (marker table, frame and marker summary). Added additional visual bars for total and count diffs. Added abs count column. Improved performance of adding to include/exclude filter via the right click menu by only refreshing the table (and no longer rerunning full analysis) Improved performance for scrolling by caching strings for profile table and comparison table. Added unaccounted time into the Top N Markers graph when total is less than the median frame time Added grow/shrink selection hot keys and menu options Added tooltip info for frame time duration for selection range Fixes Fixed issue with combined marker count when data sets have some unique markers. Fixed bars less than 1 pixel wide to clamp to min width of 1. Fixed help text for new editor skin in 2019.3 Fixed bug with calculation of the auto right depth offset (see with 2017.4/2018.4 comparisons) Improved the frame offset times in the frame time and comparison frame time exports Fixed bug with missing first frame of data / frame offset incorrect when reloading .pdata [0.4.0-preview.5] - 2019-04-02 Updated package.json file to indicate this package is valid for all unity versions [0.4.0-preview.4] - 2019-04-02 Fixed issue in 2017.4 with unsupported analytics API and a GUI style. [0.4.0-preview.3] - 2019-04-01 First public release of Profile Analyzer. [0.1.0-preview] - 2018-12-07 This is the first beta release of Profile Analyzer The profile analyzer tool augments the standard Unity Profiler. It provides multi frame analysis of the profiling data."
  },
  "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/TableOfContents.html",
    "title": "| Cacher Game",
    "summary": "About Profile Analyzer What's new Upgrade guide Profile Analyzer window Single view Compare view Frame Control pane Filters pane Frame Summary Thread Summary Marker Summary Statistics in the Profile Analyzer Workflows Collecting and viewing data Comparing frames from the same data set Comparing frames from different data sets Ordering frames by length"
  },
  "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/analyzing-mulitple-datasets.html": {
    "href": "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/analyzing-mulitple-datasets.html",
    "title": "Comparing frames from different data sets | Cacher Game",
    "summary": "Comparing frames from different data sets This workflow explains how to compare two frames from different data sets. In this example, it shows how to compare the median frames from each data set. Comparing the median frames helps you understand what might be happening in a frame that is central to the distribution for each data set. Step 1: Collect performance data to analyze Open the Profile Analyzer window (menu: Window > Analysis > Profile Analyzer). Click the Compare button in the toolbar to enter the Compare view. Collect some profiling data. To pull data from an active profiling session, click the Pull Data button. This pulls in the current set of available frames from the Profiler. If you don't have an active profile session, click the Open Profiler Window button, then load or record some data. For more information on how to collect data, see the workflow documentation on Collecting and viewing data. Pull a different data set that you want to analyze into each graph in the Frame Control pane. Step 2: Select frames of interest Enable Pair Graph Selection. Right-click on one of the graphs in the Frame Control pane and then choose Select Median Frame from the context menu. The Profile Analyzer then analyzes the two median frames of the data sets like this: You can then look further and compare the differences between the median frames of each data set. For further information, see the Ordering frames by length workflow, which extends the selected range and number of frames used from the middle of the frame distribution."
  },
  "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/collecting-and-viewing-data.html": {
    "href": "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/collecting-and-viewing-data.html",
    "title": "Collecting and viewing data | Cacher Game",
    "summary": "Collecting and viewing data This workflow explains how to populate the Unity Profiler and Profile Analyzer with data. Note that the Profile Analyzer only analyzes CPU data from the Profiler. Step 1: Open the Unity Profiler Go to the menu: Window > Analysis > Profiler or press Ctrl+7 (Command+7 on macOS). If you have the Profile Analyzer window open, you can click the Open Profiler Window button. Step 2: Populate the Profiler with data To use the Profile Analyzer, you must populate it with data from the Profiler. To add data to the Profiler, you can either record some new data, or load a Profiler capture file in the .data file format. a) Record new data Click the Attach to Player dropdown at the top of the window (next to the Record button) and select a player to profile. By default this is set to Playmode. Click the Record button to start recording data. If you enabled Autoconnect to Profiler in the Build Settings, the Profiler automatically collects data when you start a built player. For more information on how to record data in the Profiler, see the documentation on Profiling your application in the Unity User Manual. b) Load data To load a saved .data file, in the top right of the Profiler window, select the Load button. Step 3: Pull the data into the Profile Analyzer window Open the Profile Analyzer window (menu: Window > Analysis > Profile Analyzer) and then select the Pull Data button in the Frame Control pane. The Profile Analyzer then pulls in the data that is loaded in the Profiler window. Tip The Profiler window and the Profile Analyzer window require a lot of screen real-estate. Docking the two windows together in a single tabbed window lets you navigate between the two views quickly. The Profile Analyzer in the Compare mode docked next to the Profiler in one window Step 4: Load and save Profile Analyzer data To save the data from the Profile Analyzer, click the Save button in any view. Select where you would like to save your data, and then Unity saves the data in the .pdata format. To load this data, click the Load button in any view. Note When you load data into the Profile Analyzer, the data must be in the Profile Analyzer .pdata format. If you have data from the Profiler in the .data file format, open it in the Profiler first, and in the Profile Analyzer select the Pull Data button."
  },
  "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/compare-view.html": {
    "href": "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/compare-view.html",
    "title": "Compare view | Cacher Game",
    "summary": "Compare view In the Compare view you can load two data sets, which the Profiler Analyzer displays in two different colors. It displays the information from both data sets in a similar way to the Single view and has the same panes and panels. For information on navigating the window, see the Profile Analyzer window navigation documentation. The Compare view with two data sets loaded. Loading data To load data into the Compare view, select the Pull Data button in the frame control pane, and the Profile Analyzer pulls in any data in the Profiler window. Alternatively, select the Load button to load Profile Analyzer (.pdata) data you have saved from a previous session. Note If you select the Load option, the data must be in the Profile Analyzer .pdata format. If you have data from the Profiler in the .data file format, open it in the Profiler first, and then select the Pull Data button in the Profile Analyzer. For more information on how to pull data into the Profile Analyzer, see the workflow documentation on Collecting and viewing data. Marker Comparison list The Marker Comparison pane contains a sortable list of markers with a number of useful statistics, including the difference between the two sets. The proportional graphs with the < and > labels visualize the values of each marker, so you can see the difference between the timings of both samples. If you select a marker in the list, the Marker Summary panel displays in depth information on the marker. Each marker in the list is an aggregation of all the instances of that marker, across all filtered threads and in all ranged frames. You can filter the columns in the Marker Comparison list to a more relevant set. This is particularly useful if you want to filter out irrelevant data when you look for Time or Count values. To filter the columns, select the Marker columns dropdown from the Filters pane. For more information on how to filter data, see the Filters documentation. Marker Comparison columns and groups By default, the Marker columns dropdown in the Filters pane has six preset column layouts that you can use to adjust the layout of the Marker Comparison pane. They are: Time and count: Displays information on the average timings and number of times the markers were called. Time: Displays information on the average timings of the markers. Totals: Displays information about the total amount of time the markers took on the whole data set. Time with totals: Displays information about both the average and total times of the markers. Count totals: Displays information about the total number of times the markers were called. Count per frame: Displays information on the average total per frame the markers were called. Depths: Displays information on where the markers are in the Hierarchy. For more information, see the documentation on Depth Slices in Filters pane. Threads: Displays the name of the thread that the markers appear on. For more information, see the documentation on the Thread window in Filters pane. You can also use the Custom column layout to select your own custom mix of columns to add to the layout. To do this, right click on the header of any column, and manually enable or disable any of the columns as necessary. Note In this pane, the Left label refers to the first data set loaded into the Frame Control pane, which is colored blue. The Right label refers to the second data set, which is colored orange. The following table shows the columns that the Profile Analyzer displays when you select that layout. Time and count Time Totals Time with totals Count totals Count per frame Depths Threads Marker Name ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓ Left Median Right Median ✓ ✓ ✓ < > ✓ ✓ ✓ Diff ✓ ✓ Diff Percent Abs Diff ✓ ✓ ✓ Count Left Count Right ✓ ✓ < Count > Count ✓ Count Delta ✓ ✓ Count Delta Percent Abs Count ✓ Count Left Frame Count Right Frame ✓ < Frame Count > Frame Count ✓ Count Delta Frame ✓ Count Delta Percent Frame Abs Frame Count ✓ Total Left Total Right ✓ ✓ < Total > Total ✓ ✓ Total Delta ✓ Total Delta Percent Abs Total ✓ ✓ Depth Left Depth Right ✓ Depth Diff ✓ Threads Left Threads Right ✓ The following table explains what each column does: Column Description Marker Name Displays the name of the marker. Left Median Right Median The sum of activity for the marker. Left Median displays the first data set loaded into the Frame Control pane, colored blue. Right Median displays the second data set loaded into the Frame Control pane, colored orange. < > A visual representation of the Left Median (<) and Right Median (>) data. Diff The difference between the summed values in each data set. Negative values mean that the left (blue) set of data is bigger, positive means the right (orange) set of data is bigger. Diff Percent The difference relative to the first data set. Abs Diff The absolute difference between the summed values in each data set. Count Left Count Right The number of times the marker started or stopped. Count Left displays the first data set loaded into the Frame Control pane, colored blue. Count Right displays the second data set loaded into the Frame Control pane, colored orange. < Count > Count A visual representation of the Count Left and Count Right data. Count Delta The difference between the Count values in each data set. Negative values mean that the left (blue) set of data is bigger, positive means the right (orange) set of data is bigger. Count Delta Percent The difference in count relative to the first data set. Abs Count The absolute difference between the Count values for the selected frames. Negative values mean that the left (blue) set of data is bigger, positive means the right (orange) set of data is bigger. Count Left Frame Count Right Frame The average count of the marker over all non-zero frames. Count Left Frame displays the first data set loaded into the Frame Control pane, colored blue. Count Right Frame displays the second data set loaded into the Frame Control pane, colored orange. < Frame Count > Frame Count A visual representation of the Count Left Frame and Count Right Frame data. Count Delta Frame The difference between the Count Left Frame and Count Right Frame values. Negative values mean that the left (blue) set of data is bigger, positive means the right (orange) set of data is bigger. Count Delta Percent Frame The difference in average count relative to the first data set. Abs Frame Count The absolute difference between the number of times the marker started or stopped in each data set. Total Left Total Right The total time for the marker over the selected frames. Total Left displays the first data set loaded into the Frame Control pane, colored blue. Total Right displays the second data set loaded into the Frame Control pane, colored orange. < Total > Total A visual representation of the Total Left and Total Right data. Total Delta The difference between the total times over the selected frames in each data set. Negative values mean that the left (blue) set of data is bigger, positive means the right (orange) set of data is bigger. Total Delta Percent The difference in total time relative to the first data set. Abs Total The absolute difference between the total times over all of the selected frames in each data set. Depth Left Depth Right The level, or depth, that the marker appears at. The marker might appear on multiple depth levels. Depth Left displays the first data set loaded into the Frame Control pane, colored blue. Depth Right displays the second data set loaded into the Frame Control pane, colored orange. Depth Diff The difference between the Depth Left and Depth Right values. Threads Left Threads Right The name of the thread that the marker appears on. Threads Left displays the first data set loaded into the Frame Control pane, colored blue. Threads Right displays the second data set loaded into the Frame Control pane, colored orange. Marker Comparison context menu commands If you right-click on a marker in the Marker Comparison list you can control the filter and list even further. Command Function Select Frames that contain this marker (within whole data set) Select all the frames from the entire data set that contain an instance of this marker. Select Frames that contain this marker (within current selection) Select all the frames from a selected range of data that contain an instance of this marker. Select All Selects the entire data set, if you have a range of data selected. Add to / Remove From Include Filter Add or remove the selected marker to the Include filter. This filters the marker list to only markers that match. Add to Exclude Filter Add the selected marker to the Exclude filter. This removes the marker from the marker list. This is useful if you want to remove markers that are using up resources and skewing the markers that you are interested in. Set as Parent Marker Filter Limit the analysis to this marker and markers included below it on the callstack. For more information, see the Parent Marker documentation on the Filters page. Clear Parent Marker Filter Select this to clear the marker as a parent marker filter. Copy To Clipboard Copies the selected value to the clipboard. Analyzing data in Compare view For further information on how to analyze data in Compare view, see the workflow documentation on Comparing frames from different data sets and Comparing frames from the same data set."
  },
  "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/comparing-frames-same-dataset.html": {
    "href": "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/comparing-frames-same-dataset.html",
    "title": "Comparing frames from the same data set | Cacher Game",
    "summary": "Comparing frames from the same data set This workflow explains how to compare two frames from the same data set. In this example, it explains how to compare the median and longest frames in a data set. Comparing the median and longest frames is useful to help understand what is happening in the longest frame that is not happening in an average frame, or what is taking longer than average to complete. Step 1: Collect performance data to analyze Open the Profile Analyzer window (menu: Window > Analysis > Profile Analyzer) and collect some profiling data. To pull data from an active profiling session, click the Pull Data button. This pulls in the current set of available frames from the Profiler. If you don't have an active profile session, click the Open Profiler Window button, then load or record some data. For more information on how to collect data, see the workflow documentation on Collecting and viewing data. Step 2: Open Compare view Click the Compare button in the toolbar to switch to the Compare View. Step 3: Select the median and longest frames In the Frame Control pane, right click on the top graph and choose Select Median Frame from the context menu. Next, right click on the lower graph and choose Select Longest Frame in the context menu. The Profile Analyzer then analyzes the two frames and displays the data for the median and longest frames: The Profile Analyzer window with the median and longest frames of the same data set selected"
  },
  "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/filtering-system.html": {
    "href": "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/filtering-system.html",
    "title": "Filters pane | Cacher Game",
    "summary": "Filters pane You can use the Filters pane in the Single and Compare view to reduce and filter the working data set. You can limit the data set by filters such as partial marker name match, a specific thread, or a specific stack level. As well as filtering by match, you can set the filter to exclude any markers by name. This is particularly useful to exclude markers the might distort the view, or aren't statistically relevant. Single view Filters pane (above) and Compare view Filters pane (below). Note the addition of further Depth Slice controls in the Compare view. The pane has the following controls: Control Function Name Filter Enter the name of a marker you would like to filter the data set by. Once you start typing, the Profile Analyzer automatically filters the Marker details pane to display the matching markers. You can also right click on a marker in the Marker details pane and select Add to Include Filter to add it to the filter. To include a marker name with a space, surround it in quotation marks Choose Any from the dropdown to match any of the terms to the markers in the list. Select All from the dropdown to match all of the listed terms to the markers in the list. Exclude Names Enter the name of a marker you would like to exclude from the data set. Once you start typing, the Profile Analyzer automatically filters the Marker details pane to display the matching markers. You can also right click on a marker in the Marker details pane and select Add to Exclude Filter to exclude it from the filter. Select Any from the dropdown to match any of the terms to the markers in the list. Select All from the dropdown to match all of the listed terms to the markers in the list. Thread Select which thread or threads to filter the data set by. Click the Select button to open the Thread window and filter the data set further. For more information, see the Thread window section of this page. Depth Slice Set the depth level of the Hierarchy to display. The Marker Details/Comparison view then displays all the markers on this level only. In the Compare view, the Auto Right checkbox is enabled by default, which automatically aligns the depth of the two data sets. For more information, see the Depth Slice section of this page. Parent Marker Displays the parent marker the data set is filtered by. To filter by a parent marker, right click on it in the Marker Details/Comparison list and then select Set As Parent Marker Filter. For more information, see the Parent Marker section of this page. Analyze (Single view) Compare (Compare view) Contains details of the number of markers and threads in the data set. Note: The button is redundant, because the Profile Analyzer automatically updates the marker pane with the filters you set. However, you can hover on the button to see timings of the analysis or comparison. Analysis type Select what times the Profile Analyzer includes in its analysis, from either Total or self. The Total option sets the marker times to inclusive, which means the time spent in the marker and its children is included in the filter. The Self option sets the marker times to exclusive, which means that the the time in the marker's children is excluded from the filter. Units Select the unit of measurement of time to display in the Profile Analyzer. Choose between Milliseconds (default) or Microseconds. Note: If you select Microseconds, the Profile Analyzer displays larger timings in milliseconds. Marker Columns Select a layout for the Marker Details/Comparison pane. For more information on the columns in this pane, see the documentation on Single view Marker Details list and Compare view Marker Comparison list. Thread window By default, the Profile Analyzer displays the markers on the main thread in the Marker Details/Comparison pane. To analyze the markers on other threads, under Threads, click the Select button, and the Threads window opens. The Thread window To add more threads to the analysis, enable the checkboxes next to their names, then click the Apply button. The Profile Analyzer then updates the data set. There are two pre-defined sets of threads: Main Only and Common Set. Main Only selects just the Main Thread, and the Common Set selects the Main Thread, plus the Render and Jobs threads. Click the Clear button to clear all of the threads you've selected, and Reset to reset the selection back to the previous thread set. Depth Slice When you select a Depth Slice level in the dropdown, it corresponds to the level of the marker within the hierarchy of the thread. You can visualize this in the Profiler window as follows: The Profile Analyzer in the Single view with a Depth Slice of 3 selected in the Filters pane. The Profiler window with the CPU Usage module selected, in Timeline view. Note that the markers in the Marker Details list correspond to the markers in the third level of the Main Thread's hierarchy. In the Compare view, the Profile Analyzer automatically aligns the depth of the two data sets so that the top level markers are aligned correctly. The value of the offset is displayed in brackets after the Auto Right checkbox. To override the automatic depth alignment, disable the Auto Right checkbox and then manually set the depth levels for the left (blue) and right (orange) sets. This is useful if you're comparing data sets from different versions of Unity. Parent Marker To filter the dataset by a specific marker and its children, right click on the marker in the Marker Details/Comparison pane and then select Set As Parent Marker Filter. You can visualize this in the Profiler window as follows: The Profile Analyzer in the Single view with the data filtered by the parent marker of BehaviourUpdate. The same frame opened in the Profiler window, with this thread highlighted. Note that the markers in the Timeline view correspond to those filtered in the Profile Analyzer."
  },
  "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/frame-range-selection.html": {
    "href": "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/frame-range-selection.html",
    "title": "Frame Control pane | Cacher Game",
    "summary": "Frame Control pane You can use the Frame Control pane in both the Single and Compare views to select a range of frames to reduce the working set. The Frame Control pane is laid out as follows: The Frame Control in the Single view (top), and in the Compare view (bottom) Control Function A: Pull Data / Load / Save Click the Pull Data button to pull any data that is loaded in the Profiler window. Click the Save button to save the data as a .pdata file. Click the Load button to load a .pdata file. Note: You can only load a .pdata file. If you have data from the Profiler in the .data file format, open it in the Profiler first, and then select the Pull Data button in the Profile Analyzer. B: Frame control scale You can adjust the scale of the y-axis of the Frame Control graph by selecting this dropdown. By default, it scales to the maximum value of the data set. You can also choose from traditional frame boundaries. 16.67ms is equivalent to 60Hz/FPS, 33.33ms is equivalent to 30Hz/FPS, and 66.67ms is equivalent to 15Hz/FPS. C: Selected thread This displays the name of the marker which is selected in the Marker Details pane. When you select a thread from this list, the Profile Analyzer highlights its corresponding timings on the Frame Control graph in a green-blue color. D: Pair Graph Selection (Compare view only) When you enable this checkbox, the Profile Analyzer reflects any changes you make in the range selection of a data set in both data sets. This is important to ensure you compare the exact same number of frames in both data sets and get an accurate comparison. Selecting a frame range The Profile Analyzer uses all the frames in the data sets unless you select a sub-range. When you select a sub-range, it limits the analysis to just those frames which lets you focus on a specific frame or set of frames. To select a range of frames, click and drag on the Frame Control graph. To clear the selection, right click on the Frame Control graph and select Clear Selection. To help visualize which frames are in the current selection, the start and end frame number, plus the frame count in square brackets appears on the x-axis of the graph. The Frame Control in the Single view (top), with 187 frames selected, starting on frame 37 and ending on frame 224. The Compare view (bottom) has Pair Graph Selection enabled, with the same 237 frames selected on both graphs, starting on frame 135 and ending on frame 371. Frame range controls You can control the selection of data in both the Single and Compare views by using the following shortcuts, or by right-clicking and selecting an option from the context menu. Note In Compare view, make sure you enable the Pair Graph Selection checkbox to carry out the following commands on both graphs at the same time. Shortcuts Shortcut Function Shift+click Hold down the Shift key while clicking on the selection on the Frame Control graph to move the selection around freely. Left/Right arrow Move the selection forward or backwards by one frame. Ctrl + click (Command + click on macOS) Selects multiple parts of the data set. Hold down the Ctrl key (Command key on macOS) while making a selection and then click, and optionally drag, on different sections of the chart to select multiple parts of the data set. Equals (=) Extend the selection by one frame on each end of the selection. Alt+Equals (⌥ + Equals on macOS) Reduce the selection by one frame on each end of the selection. Shift+Equals Extend the selection by 10 frames on each end of the selection. Hyphen (-) Reduce the selection by one frame on each end of the selection. Alt+Hyphen (⌥ + Hyphen on macOS) Extend the selection by one frame on each end of the selection. Shift+Hyphen Reduce the selection by 10 frames on each end of the selection. Comma (,) Extend the start of the selection by one frame. Alt+Comma (⌥ + Comma) on macOS Reduce the start of the selection by one frame. Shift+Comma Extend the start of the selection by 10 frames. Period (.) Extend the end of the selection by one frame. Alt+Period (⌥ + Period on macOS) Reduce the end of the selection by one frame. Shift+Period Extend the end of the selection by 10 frames. 1 2 Compare view only In Compare view, with Pair Graph Selection disabled, use the 1 or 2 key on your keyboard to switch between frames. 1 selects the top data, and 2 selects the bottom data. Context menu commands Right click on the Frame Control graph to bring up the context menu. Menu item Function Clear Selection Clears the selected range. The Profile Analyzer then performs the analysis on the whole data set. Invert Selection Inverts the selected range. Select Shortest Frame Selects the frame with the shortest time. Select Longest Frame Selects the frame with the longest time. Select Median Frame Selects the frame with the Median time. Move selection left / right Move the whole selection one frame backwards, or one frame forwards. Grow selection Extend the selection by one frame on each end of the selection. Select the (fast) operation to extend the selection by 10 frames at each end. Shrink selection Reduce the selection by one frame on each end of the selection. Select the (fast) operation to reduce the selection by 10 frames at each end. Grow selection left / right Extend the start or the end of the selection by one frame. Select the (fast) operation to extend the start or the end of the selection by 10 frames. Shrink selection left /right Reduce the selection by one frame at the beginning or the end of the selection. Select the (fast) operation to reduce the start or the end of the selection by 10 frames. Zoom Selection Zoom the Frame Control graph to display the selected range only. Zoom All Zoom out to show all frames. The current selection range is highlighted. Show Selected Marker Enable this setting to highlight the selected marker's time on the Frame Control graph. By default, this setting is enabled and the Profile Analyzer highlights the marker's timings in green on the graph. Show Filtered Threads Enable this setting to highlight the current filtered thread times on the Frame Control graph. The Profile Analyzer highlights the timings in purple. This setting is disabled by default. Show Frame Lines Enable this setting to display the common frame boundaries as a horizontal line on the Frame Control graph. This setting is enabled by default. Order By Frame Duration Enable this setting to display the order of the frames by their duration from smallest to largest on the Frame Control graph, rather than by frame index. By default, this setting is disabled. This setting is particularly useful to group similar performant frames together."
  },
  "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/frame-summary.html": {
    "href": "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/frame-summary.html",
    "title": "Frame Summary | Cacher Game",
    "summary": "Frame Summary The Frame Summary pane displays a summary of the frame times for the range of data selected. This pane provides useful information about the frames in the data selection, including the maximum, minimum, upper and lower quartile, mean, and median timings. The Frame Summary pane in Single view (left,) and Compare view (right) The Frame Summary pane is a good way for you to see at an overview what frames might be an outlier and how evenly distributed the timings are in the data set. For example, in the above screenshot, in the Compare view, while the median values are fairly similar, with little difference, the maximum frame value differs greatly, which suggests that the Right data set had more spikes in performance, that you could focus investigating further. Statistics Statistic Description Frame Count The number of frames selected in the Frame Control pane. In Compare view, the Left count corresponds to the first data set loaded into the Profile Analyzer, colored blue, and the Right count corresponds to the second data set loaded into the Profile Analyzer, colored orange. The Diff count is the difference in frame count between the Right and Left values. When this number is negative, it indicates that the Left frame count is larger than the Right frame count. When the Diff is a positive number, it means that the Right frame count is larger than the Left frame count. Start The frame number that the data selection starts on. In Single view, you can click the button next to this number to jump to the relevant frame in the Profiler window. End The frame number that the data selection ends on. In Single view, you can click the button next to this number to jump to the relevant frame in the Profiler window. Max The largest (maximum) frame time in the data selection. In Compare view, the Diff column shows the difference between the Right and Left timings. Upper Quartile Displays the upper quartile of the data set. In Compare view, the Diff column shows the difference between the Right and Left timings. Median Displays the median value of the data set. In Compare view, the Diff column shows the difference between the Right and Left timings. Mean Displays the mean value of the data set. In Compare view, the Diff column shows the difference between the Right and Left timings. Lower Quartile Displays the lower quartile of the data set. In Compare view, the Diff column shows the difference between the Right and Left timings. Min The smallest (minimum) frame time in the data selection. In Compare view, the Diff column shows the difference between the Right and Left timings. Underneath the statistics, the Profile Analyzer displays the timings as a histogram and box and whisker plot. For further information on the statistics available and how to analyze them, see the documentation on Statistics in the Profile Analyzer."
  },
  "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/index.html",
    "title": "About the Profile Analyzer package | Cacher Game",
    "summary": "About the Profile Analyzer package The Profile Analyzer aggregates and visualizes frame and marker data from a set of Unity Profiler frames to help you understand their behavior. You can use the Profile Analyzer to compare two sets of data side-by-side, which complements the single frame analysis already available in the Unity Profiler. For information on how to use the Profile Analyzer, see the documentation on the Profile Analyzer window The Profile Analyzer window, with two sets of data loaded Installing the Profile Analyzer To install this package into versions of Unity that support the package manager follow the instructions in the Package Manager documentation. When using any Unity version newer than 2021.2.0a5, you can just click this link to install it by name. Earlier versions of Unity For earlier versions, follow this link to the Profile Analyzer download and place the contents into your Project's Assets folder. Requirements This version of the Profile Analyzer is compatible with the following versions of the Unity Editor: 5.6 and later Known limitations The Profile Analyzer has the following known limitations: The original Profile data is not saved in the Profile Analyzer .pdata file. Therefore, you should store both the Unity Profiler .data file (or the .raw file exported from a stand alone player) along with the .pdata file. When you click on a marker, the Profile Analyzer attempts to jump to the same marker in the Unity Profiler if the same data is loaded. You must make a selection in the Unity Profiler beforehand for this to work. In the Unity Profiler in the UI view, the vertical height is not correct. On Unity 5.6 and 2017.4, the Thread Select Window allows you to collapse the 'All' threads item, which has no purpose."
  },
  "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/marker-summary.html": {
    "href": "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/marker-summary.html",
    "title": "Marker Summary | Cacher Game",
    "summary": "Marker Summary The Marker Summary pane summarizes the marker data of the current selected item in the Marker Details list. You can use this pane to get an overview of the markers that contribute the most amount of time to the data set. For more information on the statistics in this pane, see the Statistics documentation. The Marker Summary pane, in Single View (left), and Compare View (right) Statistics Statistic Description Marker name Displays the name of the selected marker. Mean frame contribution Visualization of the marker's mean frame contribution as a percentage of the data set's total time. First frame Link to the frame that the marker first appeared in. Click the button to jump to the relevant frame in the Profiler window. Top by frame costs Displays the longest occurrences of the marker in the data set. Use the dropdown to display up to 10 entries in the list. Max The largest (maximum) frame time in the data selection. In Compare view, the Diff column shows the difference between the Right and Left timings. Upper Quartile Displays the upper quartile of the data set. In Compare view, the Diff column shows the difference between the Right and Left timings. Median Displays the median value of the data set. In Compare view, the Diff column shows the difference between the Right and Left timings. Mean Displays the mean value of the data set. In Compare view, the Diff column shows the difference between the Right and Left timings. Lower Quartile Displays the lower quartile of the data set. In Compare view, the Diff column shows the difference between the Right and Left timings. Min The smallest (minimum) frame time in the data selection. In Compare view, the Diff column shows the difference between the Right and Left timings. Individual Max The maximum value of an individual marker instance. Individual Min The minimum value of an individual marker instance."
  },
  "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/ordering-frames-by-cost.html": {
    "href": "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/ordering-frames-by-cost.html",
    "title": "Ordering frames by length | Cacher Game",
    "summary": "Ordering frames by length This workflow explains how to order the frame data in the Profile Analyzer by frame length, shortest to longest, which results in an s-curve style graph. The Profile Analyzer groups frames with similar performance together, which enables you to create sub-ranges over a set of similar performing frames without including any outliers. This is particularly useful to normalize the data and to focus on only the shortest, longest, or average frames in the data set. This workflow applies for both Single view and Compare view. Step 1: Collect performance data to analyze Open the Profile Analyzer window (menu: Window > Analysis > Profile Analyzer) and collect some profiling data. To pull data from an active profiling session, click the Pull Data button. This pulls in the current set of available frames from the Profiler. If you don't have an active profile session, click the Open Profiler Window button, then load or record some data. For more information on how to collect data, see the workflow documentation on Collecting and viewing data. Step 2: Order the data set If you are in the Compare view, enable the Pair Graph Selection checkbox. By default, the data set is ordered by frame number. To order the frames by their length, right click on a graph in the Frame Control pane, and select Order by Frame Duration. The Profile Analyzer then orders the graph from shortest to longest frame. Step 3: Select frames of interest Click and drag on the graph to select a range of frames with similar performance from the middle of the distribution. Top, the Frame Control pane in Single view, with the graph ordered by frame duration, and a range of frames selected. Bottom, the Frame Control pane in Compare view, with the graph ordered by frame duration, and a range of frames selected. You can now use the Profile Analyzer to analyze data from frames that have a similar performance."
  },
  "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/profile-analyzer-window.html": {
    "href": "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/profile-analyzer-window.html",
    "title": "Profile Analyzer window | Cacher Game",
    "summary": "Profile Analyzer window The Profile Analyzer window visualizes frame, thread, and marker data from the Unity Profiler window. You can use it to analyze the performance of specific markers, threads, and frames. To open the Profile Analyzer window, in the Unity Editor go to menu: Window > Analysis > Profile Analyzer. The Profile Analyzer window on start up, with no data loaded. The Profile Analyzer has two views: Single: The Single view displays one set of Profiler data. You can use this view to analyze specific events on one set of profiling data. Compare: In the Compare view, you can load two sets of Profiler data to compare. You can use the Compare view to compare two different sets of profiling data, or to compare different events in the same data set. In both views, the Profile Analyzer displays min, max, median, mean, and lower/upper quartile values of the selected frame range. It also displays information on the distribution of each profiler marker in histograms and box and whisker plots. Pulling and analyzing performance data The Profile Analyzer only analyzes CPU data. It can either analyze data from the active set of frames loaded into the Profiler, or from a saved Profile Analyzer .pdata file. The Profile Analyzer aggregates the activity of each marker, and generates useful statistics to help you analyze the marker costs over a number of threads and frames. This includes summing the runtime and counts of each occurrence of every marker for all active threads and frames the Profile captured. Pulling data from the Profiler window To pull data from an active profiling session, click the Pull Data button. This pulls in the current set of available frames from the Profiler and visualizes the analyzed results. If you don't have an active profile session, click the Open Profiler Window button, then load or record some data. Loading and saving a data set You can save or reload any data that the Profile Analyzer analyzes at any point in time. This means you can share your analysis with others and load the results into the Single or Compare view at any time. To save the data from the Profile Analyzer, click the Save button in any view. This saves the data in the .pdata format. To load this data, click the Load button in any view. Note If you select the Load option, the data must be in the Profile Analyzer .pdata format. If you have data from the Profiler in the .data file format, open it in the Profiler first, and then select the Pull Data button in the Profile Analyzer. For more information on how to pull data into the Profile Analyzer, see the workflow documentation on Collecting and viewing data. Window navigation The controls and navigation for the Profile Analyzer window are very similar in both the Single and Compare view. The Profile Analyzer window has the following controls across both views, which you can access at the top of the window: Control Function Single Enter the Single view mode. This is the default view mode. Compare Enter the Compare view mode. You can compare two sets of profiling data in this mode. Export Export the data into a .csv format. When you click this button, a dialog box opens and you can choose from: Marker table: Exports the marker data visible in Single view Single Frame Times: Exports the frame data visible in the Single view Comparison Frame Times: Exports both sets of data visible in the Compare view. This button is disabled if you haven't imported any data into the Profile Analyzer window. Open Profiler Window Click this button to open the Profiler window. When the Profiler window is open, this button changes to Close Profiler Window. When you load some data into the Profile Analyzer window, the window populates with the profiling data, and is laid out as follows: *The Profile Analyzer window in Single view Pane Description A: Frame control Displays individual frame timings, ordered by frame index or frame duration. You can also use this pane to select a range of frames for the Profile Analyzer to analyze. For more information on this pane, see the Frame control documentation. In Compare View, to select the same range on both sets of data, enable Pair Graph Selection underneath the charts and then click and drag a selection on either of the charts. For more information on this pane, see the Frame control documentation. B: Filters Use the filter pane to limit the data that the Profile Analyzer displays. You can filter by partial match name, thread, or depth slice. You can also exclude markers to remove any markers that aren't relevant from the filtered view. For more information on how to use the filter pane, see the Filter documentation. C: Top 10 markers on median frame(s) Visualizes the ten highest duration markers that contributed to the frame. In Compare view, this shows the ten highest markers for both sets of data. You can select any of the markers in this pane to see more information on them. The Profile Analyzer reflects changes you make to the Depth filter in this pane. In Compare view, to adjust how the Profile Analyzer draws the markers against each other, use the Ratio dropdown. Normalised displays the two data sets relative to their own time at the selected depth. Longest displays the absolute difference between the two sets at the selected depth. D: Marker details for currently selected range (Single view) Marker Comparison for currently selected range (Compare view) A sortable list of markers, with detailed information on their timings. For more information on the particular statistics available in these panes, see the documentation on Single view marker details list and Compare view Marker Comparison list. E: Frame summary Displays a summary of frame times. For more information on this pane, see the documentation on Frame Summary. F: Thread summary Displays information about the threads in the data set. For more information, see the documentation on the Thread Summary pane. G: Marker summary Summarizes the marker data of the current selected item in the Marker Details list. For more information, see the Marker summary documentation. Frame buttons If the data you analyze in the Profile Analyzer is also loaded into the Profiler window, you can click on the frame buttons in the Profile Analyzer window to jump to the relevant frames in the Profiler. The Frame Summary pane with the frame buttons highlighted. Frame range selection You can limit the analysis to a subset or selection of frames. To do this, you can click and drag on the chart in the Frame Control pane at the top of the Single and Compare views and select a range, or use the context menu commands to select a range. For more information on using the frame range pane, see the Frame Control pane documentation. Filtering You can also filter the data to limit the number of markers the Profile Analyzer displays. This includes filtering by thread, call depth and name substrings. You can order the remaining markers by any of the available metrics in the marker list control. For more information on how to use the filter system, see the Filters pane documentation."
  },
  "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/single-view.html": {
    "href": "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/single-view.html",
    "title": "Single view | Cacher Game",
    "summary": "Single view The Single view displays information about a single set of profiling data. You can use it to analyze how markers perform across frames. The view is divided into several frames, which contain information on frame timings, as well as min, max, median, mean, and lower / upper quartile values for frames, threads, and markers. For information on navigating the window, see the Profile Analyzer window navigation documentation. The Single view in the Profile Analyzer window, with some data loaded Loading data To load data into the Single view, select the Pull Data button in the frame control pane, and the Profile Analyzer pulls in any data in the Profiler window. Alternatively, select the Load button to load Profile Analyzer (.pdata) data you have saved from a previous session. Note If you select the Load option, the data must be in the Profile Analyzer .pdata format. If you have data from the Profiler in the .data file format, open it in the Profiler first, and then select the Pull Data button in the Profile Analyzer. For more information on how to pull data into the Profile Analyzer, see the workflow documentation on Collecting and viewing data. Marker details list The Marker details pane contains a sortable list of markers with a number of useful statistics. If you select a marker in the list, the Marker Summary panel displays in depth information on the marker. Each marker in the list is an aggregation of all the instances of that marker, across all filtered threads and in all ranged frames. You can filter the columns in the Marker details to a more relevant set. This is particularly useful if you want to filter out irrelevant data when you look for Time or Count values. To filter the columns, select the Marker columns dropdown from the Filters pane. For more information on how to filter data, see the Filters documentation. Marker details columns and groups By default, the Marker columns dropdown in the Filters pane has six preset column layouts that you can use to adjust the layout of the Marker details pane. They are: Time and count: Displays information on the average timings and number of times the markers were called. Time: Displays information on the average timings of the markers. Totals: Displays information about the total amount of time the markers took on the whole data set. Time with totals: Displays information about both the average and total times of the markers. Count totals: Displays information about the total number of times the markers were called. Count per frame: Displays information on the average total per frame the markers were called. Depths: Displays information on where the markers are in the Hierarchy. For more information, see the documentation on Depth Slices in Filters pane. Threads: Displays the name of the thread that the markers appear on. For more information, see the documentation on the Thread window in Filters pane. You can also use the Custom column layout, to select your own custom mix of columns to add to the layout. To do this, right-click on the header of any column, and manually enable or disable any of the columns as necessary. The following table shows the columns that the Profile Analyzer displays when you select that layout. Time and count Time Totals Time with totals Count totals Count per frame Depths Threads Custom only Marker Name ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓ Depth ✓ ✓ ✓ ✓ ✓ ✓ ✓ Median ✓ ✓ ✓ Median Bar ✓ ✓ ✓ Mean ✓ SD ✓ Min ✓ ✓ ✓ Max ✓ ✓ ✓ Range ✓ ✓ ✓ Count ✓ ✓ Count Bar ✓ Count Frame ✓ ✓ Count Frame Bar ✓ Count SD ✓ 1st ✓ At Median Frame ✓ ✓ ✓ Total ✓ ✓ Total Bar ✓ ✓ Threads ✓ The following table explains what each column does: Column Description Marker Name Displays the name of the marker. Depth The depth in the hierarchy that the marker appears on. Median The median value of the marker's time distribution. Median Bar A visualization of the Median value. Mean The average value of the marker's time distribution. SD The standard deviation of the marker's time distribution. Min The minimum value of the marker's time distribution. Max The maximum value of the marker's time distribution. Range The difference between the marker's Min and Max timings. Count The number of times the marker was pushed / popped. Count Bar A visualization of the Count value. Count Frame The average number of times per frame that the marker was pushed/popped. Count Frame Bar A visualization of the Count Frame value. Count SD The standard deviation of Count value. 1st The frame number in which the marker first was pushed / popped. At Median Frame The sum of activity for the marker in the median frame. Total The total time spent for this marker in all selected frames. Total Bar A visualization of the Total value. Threads The name of the thread that the marker appears on. Marker Details context menu commands If you right click on a marker in the Marker Details list you can control the filter and list even further. Command Function Select Frames that contain this marker (within whole data set) Select all the frames from the entire data set that contain an instance of this marker. Select Frames that contain this marker (within current selection) Select all the frames from a selected range of data that contain an instance of this marker. Select All Selects the entire data set, if you have a range of data selected. Add to / Remove From Include Filter Add or remove the selected marker to the Include filter. This filters the marker list to only markers that match. Add to Exclude Filter Add the selected marker to the Exclude filter. This removes the marker from the marker list. This is useful if you want to remove markers that are using up resources and skewing the markers that you are interested in. Set as Parent Marker Filter Limit the analysis to this marker and markers included below it on the callstack. For more information, see the Parent Marker documentation on the Filters page. Clear Parent Marker Filter Select this to clear the marker as a parent marker filter. Copy To Clipboard Copies the selected value to the clipboard."
  },
  "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/statistics.html": {
    "href": "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/statistics.html",
    "title": "Statistics in the Profile Analyzer | Cacher Game",
    "summary": "Statistics in the Profile Analyzer The Profile Analyzer displays a number of statistics about the data you're analyzing in the Frame, Thread, and Marker Summary panes.. Available statistics Statistic Description Min Min represents the lowest (minimum) value for the marker or frame time. Max Max represents the largest (maximum) value for the marker or frame time. Median Median is the middle value of a data set, and separates the higher half from the lower half of a data set. Mean Mean is the average value in a data set. It represents the sum of all of the values in the data set divided by the number of values in the data set. Lower and Upper Quartiles The lower quartile is the middle number between the smallest number and the median of the data set. The upper quartile is the middle value between the median and the highest value of the data set. Interquartile Range The interquartile range shows the range of values in the central 50% of the data. The range is equal to the difference between the upper and lower quartile values. How the statistics are represented The statistics are displayed in several ways in the Profile Analyzer. In the Frame, Thread, and Marker summary panes, the statistics are displayed as raw numbers as well as in histograms and box and whisker plots to give a visual representation of time distribution. The following section gives some examples of some common distributions you might find in your analysis. Single view Even distribution In this example, the graphs display a distribution of marker calls that range from 16.75ms to 17.26ms. The histogram on the left shows that a lot of the buckets are being hit at a fairly even amount. This is also evident in the box and whisker plot on the right where the box is large and is towards the middle of the upper and lower bounds. Outlier In this example, the graphs display a distribution of marker calls that range from 0.67ms to 5.32ms. The histogram on the left shows that the lower end buckets are used the most and only some of the more expensive buckets are hit. This is also reflected in the box and whisker plot, where the box appears towards the bottom of the range but the whisker, or upper bound of the range, is high up. Compare view Similar distribution In this example, there are two distributions that are similar, and both the histogram and box and whisker plots show a very similar pattern. This shows that the marker activity in both sets is similar. Different distribution In this example, there are two distributions that are different; both the histogram and the box and whisker plots show that the marker in the left (blue) data set ran for longer. The histogram shows that the blue data set used more expensive buckets, and the box and whisker plot is drawn higher up on its range. This means that the marker activity in left (blue) data set is more costly and should be investigated further. Overlapping distributions In this example, there are two distributions that are similar. Both data sets have the same lower bound and have some overlap in the middle of the range, but the right (orange) dataset uses some of the more expensive buckets and has a higher upper bound. This means that the activity in right (orange) data set is more costly or is being called more times and should be investigated further."
  },
  "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/thread-summary.html": {
    "href": "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/thread-summary.html",
    "title": "Thread Summary | Cacher Game",
    "summary": "Thread Summary The Thread Summary pane displays information about the threads in the data set. You can use the information in this pane to compare and understand the number of threads used in the data set. By default, the Profile Analyzer only displays information about the Main Thread. To add more threads to the analysis, use the Thread button in the Filters pane. For more information, see the documentation on the Filters pane. The Thread Summary pane in Single View (left), and Compare View (right) Statistics Statistic Description Total Count The total number of threads in the data set, or data selection. The Compare view also has a Total column, which displays the total count for all threads across both data sets. Unique Count (Compare view only) The number of unique threads in each data set. A unique thread is one that is not in the other data set. The Total column displays the total of unique threads across both data sets. Selected The number of threads selected in the data set. To add more threads use the Thread button in the Filters pane. Graph Scale Select a scale for the plot. You can choose from: Median frame time Upper quartile of frame time Max frame time. At the bottom of the pane, there is a summary of the median run time of the current filtered threads with a box and whisker plot of them. You can use these graphs to analyze which threads Unity spends the most time on."
  },
  "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/upgrade-guide.html": {
    "href": "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/upgrade-guide.html",
    "title": "Profile Analyzer upgrade guide | Cacher Game",
    "summary": "Profile Analyzer upgrade guide You do not need to take any actions to upgrade your project when you update this package."
  },
  "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/whats-new.html": {
    "href": "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/whats-new.html",
    "title": "What's new in 1.2.2 | Cacher Game",
    "summary": "What's new in 1.2.2 Summary of changes in Profile Analyzer version 1.2.2. The main updates in this release include: Added Added support for removing vsync time, so we can see actual CPU duration over multiple frames. A drop down has been added to 'remove' a marker from the analysis and has entries for \"FPS Wait\", \"Present Wait\" and \"Custom\" where you can select any marker from the table using the right click context menu to \"Remove Marker\". Added optional standard deviation (SD) column into marker table (on single view) for sorting data based on variation of marker timings in over the frames. Added export of the comparison table as CSV. For a full list of changes and updates in this version, see the Profile Analyzer package changelog."
  },
  "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/LICENSE.html",
    "title": "| Cacher Game",
    "summary": "Profile Analyzer copyright © 2020 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/README.html": {
    "href": "Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/README.html",
    "title": "Profile Analyzer | Cacher Game",
    "summary": "Profile Analyzer What Is This The Profile Analyzer aggregates and visualises frame and marker data from a set of Unity Profiler frames to help you reason about their behaviour over a number of frames, complementing the single frame analysis already available in the Unity Profiler. Features: Multi frame analysis of a single scan Each marker is shown with its median, min, max values over all frames, including histogram and box and whisker plots to view the distribution Various filtering options are available to limit the markers displayed by thread, call depth and name substrings. Data can be sorted for each of the displayed values. Comparison of two multi frame profile scans Each marker is shown with the difference in values between the scans, including with a visualisation to help quickly identify the key differences. Supports comparison of scans from two different Unity versions, or before and after an optimization is applied. How To Run Add the Profile Analyzer folder to your Unity project or install as a package. The 'Profile Analyzer' tool is opened via the menu item below the 'Window/Analysis' Menu in the Unity menu bar (or just in the 'Window' menu prior to 2018.1). Capturing Data Use the standard Unity Profiler to record profiling data from your application. In the Profile Analyzer pull the profiler data from the Unity Profiler. The profile data will be analyzed and appear in the single view along with both sides of the Compare View. This capture can be saved as a .pdata file for later comparision or sharing with others. Comparing Two Data Sets Pull data or load a previous .pdata file into the Left and Right slots to compare the two sets, comparison results will instantly appear. More Information For more information on the UI and common workflows please see the full documentation."
  },
  "Library/PackageCache/com.unity.settings-manager@2.0.1/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.settings-manager@2.0.1/CHANGELOG.html",
    "title": "Changelog | Cacher Game",
    "summary": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. [2.0.1] - 2021-11-02 Bug Fixes [case:1289586] Fix performance problem when using Perforce and Polybrush due to AssetDatabase.IsOpenForEdit. [case:1347042] Fix performance problem when using Perforce and Polybrush due to AssetDatabase.IsOpenForEdit. [1.0.3] - 2020-06-21 Bug Fixes Fixed PackageSettingsRepository dirtying the settings file when no changes are present. [1.0.2] - 2020-02-26 Bug Fixes Fixed obsolete API use in Unity 2019.3. Changes Update Yamato configuration. [1.0.1] - 2019-11-25 Changes Make sure version control integration grants write access before trying to save package settings. Bug Fixes Fixed samples not compiling with Unity 2019.3. Fix package settings repo potentially initializing with a null dictionary. [1.0.0] - 2019-04-03 Bug Fixes Fixed compile errors on Unity 2018.4. [0.1.0-preview.8] - 2019-03-29 Features Support saving multiple settings repositories within a project Changes Rename ProjectSettingsRepository -> PackageSettingsRepository. Update readme with a complete code example. Add additional documentation and unit tests. Setting repositories now have names. Bug Fixes Fixed missing gear icon in Settings Provider implementation. [0.1.0-preview.4] - 2019-02-28 Package configuration update. [0.1.0-preview.3] - 2019-02-27 Small code update in sample. [0.1.0-preview.2] - 2019-02-22 Rebuild meta files. [0.1.0-preview.1] - 2019-02-01 Move samples outside of main package. [0.1.0-preview.0] - 2018-10-08 This is the first release of Unity Package Settings Manager."
  },
  "Library/PackageCache/com.unity.settings-manager@2.0.1/Documentation~/settings-manager.html": {
    "href": "Library/PackageCache/com.unity.settings-manager@2.0.1/Documentation~/settings-manager.html",
    "title": "Settings Manager | Cacher Game",
    "summary": "Settings Manager The Settings Manager is a framework that lets you convert any serializable field into a setting, including a pre-built settings interface. Installation To install this package, follow the instructions in the Package Manager documentation. This package provides a sample that demonstrates how to implement custom user settings. To install them, follow these instructions: Make sure the Settings Manager package is installed in your Unity project. In the Package Manager window, locate the Settings Manager package select it from the list. The Details view displays information about the Settings Manager package. From the Details view, click the Import button under the Samples section. Requirements This version of the Settings Manager package is compatible with the following versions of the Unity Editor: 2018.4 and later Using the Settings Manager The Settings class is responsible for setting and retrieving serialized values from a settings repository. Use settings repositories to save and load settings for a specific scope. This package provides two settings repositories: The UserSettingsRepository, backed by the EditorPrefs class, lets you save user preferences. The FileSettingsRepository saves a JSON file to the ProjectSettings directory in order to save project settings. You can create and manage all settings from a singleton Settings instance. For example: using UnityEditor.SettingsManagement; namespace UnityEditor.SettingsManagement.Examples { static class MySettingsManager { internal const string k_PackageName = \"com.example.my-settings-example\"; static Settings s_Instance; internal static Settings instance { get { if (s_Instance == null) s_Instance = new Settings(k_PackageName); return s_Instance; } } } } Getting and setting values Your Settings instance should implement generic methods to set and retrieve values: MySettingsManager.instance.Get<float>(\"myFloatValue\", SettingsScope.Project); There are two arguments: key, and scope. The Settings class finds an appropriate ISettingsRepository for the scope, while key and T are used to find the value. Keys are unique among types: you can re-use keys as long as its type is different. Alternatively, you can use the UserSetting<T> class to manage settings. This is a wrapper class around the Settings get/set properties, which makes it easy to make any field a saved setting. // UserSetting<T>(Settings instance, string key, T defaultValue, SettingsScope scope = SettingsScope.Project) Setting<int> myIntValue = new Setting<int>(MySettingsManager.instance, \"int.key\", 42, SettingsScope.User); UserSetting<T> caches the current value, and keeps a copy of the default value so that it may be reset. You can also use UserSetting<T> fields with the [UserSettingAttribute] attribute, which lets the SettingsManagerProvider automatically add it to a settings inspector. Settings Provider To register your settings so they appear in the Project Settings window, you can either write your own SettingsProvider implementation, or use the UserSettingsProvider and let it automatically create your interface. Making use of UserSettingsProvider comes with many benefits, including a uniform look for your settings UI, support for search, and per-field or mass reset support. using UnityEngine; namespace UnityEditor.SettingsManagement.Examples { static class MySettingsProvider { const string k_PreferencesPath = \"Preferences/My Settings\"; [SettingsProvider] static SettingsProvider CreateSettingsProvider() { // The last parameter tells the provider where to search for settings. var provider = new SettingsManagerProvider(k_PreferencesPath, MySettingsManager.instance, new [] { typeof(MySettingsProvider).Assembly }); return provider; } } } To register a field with the UserSettingsProvider, decorate it with [UserSettingAttribute(string displayCategory, string key)]. Note The [UserSettingAttribute] decoration is only valid for static fields. For more complex settings that require additional UI (or that don't have a built-in Editor), use UserSettingBlockAttribute to access the settings provider GUI. For more information, look at the sample source file SettingsExamples.cs under the Assets/Samples/Settings Manager/<version>/User Settings Example/PackageWithProjectAndUserSettings folder in your Unity project root. Tip If you don't see this path or file, follow the steps under the Installation section to import it."
  },
  "Library/PackageCache/com.unity.settings-manager@2.0.1/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.settings-manager@2.0.1/LICENSE.html",
    "title": "| Cacher Game",
    "summary": "com.unity.settings-manager copyright © 2021 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.settings-manager@2.0.1/README.html": {
    "href": "Library/PackageCache/com.unity.settings-manager@2.0.1/README.html",
    "title": "Settings Manager | Cacher Game",
    "summary": "Settings Manager A framework for making any serializable field a setting, complete with an procedurally populated Settings Provider. Quick Start Settings are saved in ISettingsRepository instances. Two default implementations are provided, one for saving user settings (UserSettingsRepository) and one for per-project settings (ProjectSettingsRepository). Settings repositories are responsible for saving and loading preferences. You may work directly with ISettingsRepository, or create a Settings instance to manage them. Creating a Settings is convenient because it allows you to make use of the UserSetting class and attribute. The most common case will be for packages to create a Settings manager with two repositories, one for user settings (SettingsScope.User) and one for per-project settings (SettingsScope.Project). Below is an example of how most packages will use this api. using UnityEditor; using UnityEditor.SettingsManagement; using UnityEngine; public class MySettings { static Settings s_SettingsInstance; public static Settings instance { get { if(s_SettingsInstance == null) s_SettingsInstance = new Settings(\"com.unity.my-package\"); return s_SettingsInstance; } } // Register a new SettingsProvider that will scrape the owning assembly for [UserSetting] marked fields. [SettingsProvider] static SettingsProvider CreateSettingsProvider() { var provider = new UserSettingsProvider(\"Preferences/My Settings\", instance, new [] { typeof(MySettings).Assembly }); return provider; } } public class Test { [UserSetting(\"User Settings\", \"My User Int Value\")] static UserSetting<int> userSetting = new UserSetting<int>(MySettings.instance, \"MyInteger\", 42, SettingsScope.User); [UserSetting(\"Project Settings\", \"My Project Int Value\")] static UserSetting<int> projectSetting = new UserSetting<int>(MySettings.instance, \"MyInteger\", 42, SettingsScope.Project); [MenuItem(\"Debug/Print Settings Values\")] static void PrintValues() { Debug.Log($\"User integer is: {(int) userSetting}, and project integer is {(int) projectSetting}\"); } } Values are set and retrieved using generic methods on on your Settings instance: MySettingsManager.instance.Get<float>(\"myFloatValue\", SettingsScopes.Project); The Settings class will handle finding an appropriate ISettingsRepository for the scope (and optional repository name), while key and T are used to find the value. Setting keys are unique among types, meaning you may re-use keys as long as the setting type is different. // UserSetting<T> is a wrapper class that handles saving and loading serializable values. It is compatible with the `[UserSetting]` attribute, which is used to automatically populate a settings provider. UserSetting<int> myIntValue = new UserSetting<int>(MySettingsManager.instance, \"MyIntegerKey\", 42, SettingsScopes.User); UserSetting<T> caches the current value, and keeps a copy of the default value so that it may be reset. UserSetting<T> fields are also eligible for use with the [UserSetting] attribute, which lets the UserSettingsProvider automatically add it to a settings inspector. Settings Provider To register your settings in the Settings Window you can either write your own SettingsProvider implementation, or use the provided UserSettingsProvider and let it automatically create your interface. Making use of UserSettingsProvider comes with many benefits, including a uniform look for your settings UI, support for search, and per-field or mass reset support. using UnityEngine; namespace UnityEditor.SettingsManagement.Examples { static class MySettingsProvider { [SettingsProvider] static SettingsProvider CreateSettingsProvider() { var provider = new UserSettingsProvider(\"Preferences/My Settings\", MySettingsManager.instance, new [] { typeof(MySettingsProvider).Assembly }); return provider; } } } To register a field with UserSettingsProvider, simply decorate it with [UserSetting(string displayCategory, string key)]. [SettingAttribute] is only valid for static fields. For more complex settings that require additional UI (or simply don't have a built-in editor), you can use UserSettingBlockAttribute. This provides access to the settings provider GUI. See SettingsExamples.cs for more on this."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/CHANGELOG.html",
    "title": "Changelog | Cacher Game",
    "summary": "Changelog [1.1.33] - 2022-07-12 Fixed an issue where using Assert.Expect with the same string multiple times can lead to incorrect errors in some cases (DSTR-442). Improved the logging when using multiple Assert.Expect that the logs appear in another order than expected (DSTR-442). Moved the targetPlatform specified when running tests in the TestRunnerApi from the Filter to the ExecutionSettings (DSTR-186). Fixed an issue where an inheritance of UnityPlatformAttribute which was not working (ESTT-70). Fixed the log of excluded platforms which was not displaying the right information. Added filename and linenumber to test finished message (DSTR-505). Add the possibility of running tests in a specified order from a test list (DSTR-494). [1.1.32] - 2022-04-06 Ensured that BuildTargetGroup is set correctly before TestPlayerBuildModifier is invoked (DSTR-394). Added a TestSetting that allows to build an Android App Bundle instead of APK. [1.1.31] - 2022-02-03 Fixed \"Open source code\" on tests when located inside a package. Added editor analytics events. Added buildPlayerPath argument. Path to where built player with tests is saved. [1.1.30] - 2021-10-15 Added validation of IEnumerator return type for parameterized tests with UnityTest attribute (DSTP-743). Fixed runInBackground reset to original value after finishing to run playmode tests (DSTR-248). Fixed issue with circular assembly references when constructing the test tree (DSTR-300). [1.1.29] - 2021-08-12 Nested enumerator execution order fix (DSTR-227). Fix UI not running any tests if run select on a nested namespaces (DSTR-256). [1.1.28] - 2021-06-25 Fix CountDownEvent reference due to com.unity.ext.nunit update. Various performance optimization to fix \"Test execution timed out. No activity received from the player in 600 seconds.\"(DSTR-100). [1.1.27] - 2021-06-15 Fix empty reason on passed tests results xml (DSTR-63) Fix Repeat and Retry attribute for UnityTest in PlayMode (DSTR-237). Remove XDK Xbox One platform after Unity 2020.3 Fixed issue when . suffix was applied to BuildTargets without extension. Added support for GameCoreXboxOne and GameCoreXboxSeries reduced location path length. [1.1.26] - 2021-05-25 Fix html bug in TestRunnerApi API code snippet (DS-1973). Fix typo bug in PreBuildSetup code example (DS-1974). Fix incorrect syntax in command line reference (DS-1971). Fixed a bug where test filter would match project or player path (DSTP-412). Added playerGraphicsAPI TestSettings parameter [1.1.25] - 2021-05-05 Fixed a bug where test filter would match project or player path (DSTP-412). Added playerGraphicsAPI TestSettings parameter [1.1.24] - 2021-03-04 Improving UTF documentation(DSTR-120) Updated \"Actions outside of tests\" section of user manual. Added flow charts to clarify execution order for SetUp/TearDown, TestActions, and complete flow (DSTR-121). Fixed accepted values for scriptingBackend argument to be string literals instead of int values (DSTR-122). Fixed possible values of ResultState to be Passed, Failed, Skipped, Inconclusive, plus labels instead of Success and Failure (DSTR-125). Added NUNit version information (DSTR-130). Added namespace information for LogAsset in user manual (DSTR-124). Added instructions for creating additional sets of tests (DSTR-129). Added information on testResults XML output format and exit codes (DSTR-131). Updated description of testPlatform command line argument to clarify accepted values and their meaning (DSTR-123). Reduce time taken by filtering operations when only a subset of tests is run. Reduced the time taken to rebuild the test tree and to scan for assets a test created but did not delete. Reduce the per-test overhead of running tests in the editor. Added profiler markers around test setup, teardown, and execution. Fixed unstable timeout bug (DSTR-21). [1.1.23] - 2021-01-21 Improving UTF documentation(DSTR-120) Updated \"Actions outside of tests\" section of user manual. Added flow charts to clarify execution order for SetUp/TearDown, TestActions, and complete flow (DSTR-121). Fixed accepted values for scriptingBackend argument to be string literals instead of int values (DSTR-122). Fixed possible values of ResultState to be Passed, Failed, Skipped, Inconclusive, plus labels instead of Success and Failure (DSTR-125). Added NUNit version information (DSTR-130). Added namespace information for LogAsset in user manual (DSTR-124). Added instructions for creating additional sets of tests (DSTR-129). Added information on testResults XML output format and exit codes (DSTR-131). Updated description of testPlatform command line argument to clarify accepted values and their meaning (DSTR-123). [1.1.22] - 2021-01-21 Fixed issue where test result of an explicit test was set to skipped in case it was passing and running from command line with testfilter set to the explicit test (DS-1236). Fixed an issue where tests located in assemblies that did not directly reference any test assemblies were not included (DSTR-30). Fixed an issue where UnitySetup methods were incorrectly being rerun when entering playmode, rather than being skipped (DSTR-68). Internal: Remove ##utp message AssemblyCompilationErrors (DS-1277) Fixed issue where if the timeout was exceeded in SetUp the timeout exception was not thrown(DSTR-21). Removed ability to Enable playmode tests for all assemblies from the TestRunner UI, since it is a deprecated behavior. It enforces to use of assembly definition files (DSTR-45). Fixed typo in LogAssert.cs documentation. [1.1.21] - 2020-12-04 Fixed issue where test result of an explicit test was set to skipped in case it was passing and running from command line with testfilter set to the explicit test (DS-1236). Fixed an issue where tests located in assemblies that did not directly reference any test assemblies were not included (DSTR-30). Fixed an issue where UnitySetup methods were incorrectly being rerun when entering playmode, rather than being skipped (DSTR-68). Internal: Remove ##utp message AssemblyCompilationErrors (ds-1277) Fixed issue where if the timeout was exceeded in SetUp the timeout exception was not thrown(DSTR-21). Removed ability to Enable playmode tests for all assemblies from the TestRunner UI, since it is a deprecated behavior. It enforces to use of assembly definition files (DSTR-45). [1.1.20] - 2020-12-04 The logscope is now available in OneTimeTearDown. Fixed an issue where failing tests would not result in the correct exit code if a domain reload happens after the test has run (DS-1304). If a player build fails, the test specific build settings should be cleaned up and the original values restored as intended (DS-1001). Added better error message when using TestRunCallbackAttribute and the implementation is stripped away (DS-454). Fixed an issue where the test results xml would have a zero end-time for tests executed before a domain reload (DSTR-63). Fixed OpenSource in case of a Test in a nested class (DSTR-6) UnityTests with a domain reload now works correctly in combination with Retry and Repeat attributes (DS-428). Fixed OpenSource in case of Tests located inside a package (DS-432) [1.1.19] - 2020-11-17 Command line runs with an inconclusive test result now exit with exit code 2 (case DS-951). Fixed timeout during UnitySetUp which caoused test to pass instead of failing due to wrong time format. Timeout exeption thrown when timeout time is exeded in the UnitySetup when using WaitForSeconds(n). Updating com.unity.ext.nunit version Method marked with UnityTest that are not returning IEnumerator is now giving a proper error (DS-1059). [1.1.18] - 2020-10-07 Fixed issue of timeout during UnitySetUp which wasn't detected and allowed the test to pass instead of failing (case DSTR-21) [1.1.17] - 2020-10-05 Fixed an issue where the WaitForDomainReload yield instruction would sometimes let the test continue for one frame before the domain reload. Added support for negation in filters using !. E.g. !CategoryToExclude. Fixed an issue where if the first test enters PlayMode from UnitySetup then the test body will not run on consecutive runs (case 1260901). Clear Results button clears the test results in the GUI (DSTR-16) Improved UI in Test Runner window, added new options: Run Selected Tests in player Build/Export project with all tests in player Build/Export project with selected tests in player Fixed issue on loading EditMode or Playmode test tree in the wrong tab when switching between tabs when TestRunner is loading (DS-865) [1.1.16] - 2020-07-09 Follow up on fix when UTF picks up on outdated compilation errors [1.1.15] - 2020-07-02 Fixed an issue where an exception is thrown on getting the enumerator of a UnityTest would result in stopping the test run instead of failing it (case 1212000). Including a trailing semi-colon in a testName filter no longer results in all tests being run (case 1171200). Fixed and issue when Unity Test Framework exits editor on an outdated script compilation error (during api updates) [1.1.14] - 2020-04-03 Added the 'assemblyNames' command line argument for filtering on the assembly level. The dll and project level of the tree view should now correctly show the results when running tests in a player (case 1197026). Optimize usage of player connection when transfering test results (case 1229200). Ignore internal test framework tests assertions (case 1206961). [1.1.13] - 2020-03-16 Fixed an issue where a combination of Entering / Exiting playmode and recompiling scripts would result in the test run repeating (case 1213958). Fixed a regression from 1.1.12 where prefabs left in the scene would be cleaned up to aggressively. Fixed Test execution timed out. No activity received from the player in 600 seconds error when player is not supposed to start (case 1225147) [1.1.12] - 2020-03-02 Now 'Open error line' for a failed UTF test does not throw exceptions for corrupted testable pdb in Editor release mode (case 1118259) Fixed an issue where running a test fixture would also run other fixtures with the same full name (namespace plus classname) in other assemblies (case 1197385). Running tests with the same full name, with a domain reload inbetween, will no longer fail to initialize the fixture of the second class (case 1205240). Running a playmode tests with \"Maximize on Play\" will now correctly show the result of the tests in the test runner window (case 1014908). Fixed an issue where leaving a game object in a scene with a DontSaveInEditor hideFlags would result in an error on cleanup (case 1136883). Now ITestPlayerBuildModifier.ModifyOptions is called as expected when running tests on a device (case 1213845) [1.1.11] - 2020-01-16 Fixed test runner dlls got included into player build (case 1211624) Passing a non-full-path of XML file for -testResults in Unity Batchmode issue resolved, now passing \"result.xml\" creates the result file in the project file directory (case 959078) Respect Script Debugging build setting when running tests [1.1.10] - 2019-12-19 Introduced PostSuccessfulLaunchAction callback Fixed an issue where canceling a UnityTest while it was running would incorrectly mark it as passed instead of canceled. Added command line argument for running tests synchronously. The test search bar now handles null values correctly. The test output pane now retains its size on domain reloads. [1.1.9] - 2019-12-12 Rolled back refactoring to the test run system, as it caused issues in some corner cases. [1.1.8] - 2019-11-15 Ensured that a resumed test run is continued instantly. [1.1.7] - 2019-11-14 Fixed an issue with test runs after domain reload. [1.1.6] - 2019-11-12 Building a player for test will no longer look in unrelated assemblies for relevant attributes. [1.1.5] - 2019-10-23 Fixed a regression to synchronous runs introduced in 1.1.4. [1.1.4] - 2019-10-15 Running tests in batch mode now correctly returns error code 3 (RunError) when a timeout or a build error occurs. Fixed an issue where a test run in a player would time out, if the player takes longer than 10 minutes to run. Added command line argument and api setting for specifying custom heartbeat timeout for running on players. [1.1.3] - 2019-09-23 Fixed a regression where tests in a player would report a timeout after a test run is finished. Made it possible for the ui to change its test items when the test tree changes without script compilation. Added synchronous runs as an option to the TestRunnerApi. [1.1.2] - 2019-09-11 Fixed an issue where Run Selected would run all tests in the category, if a category filter was selected, regardless of what tests were selected. Unsupported attributes used in UnityTests now give an explicit error. Added support for the Repeat and Retry attributes in UnityTests (case 1131940). Tests with a explicit timeout higher than 10 minutes, no longer times out after running longer than 10 minutes when running from command line (case 1125991). Fixed a performance regression in the test runner api result reporting, introduced in 2018.3 (case 1109865). Fixed an issue where parameterized test fixtures would not run if selected in the test tree (case 1092244). Pressing Clear Results now also correctly clears the counters on the test list (case 1181763). Prebuild setup now handles errors logged with Debug.LogError and stops the run if any is logged (case 1115240). It now also supports LogAssert.Expect. [1.1.1] - 2019-08-07 Tests retrieved as a test list with the test runner api incorrectly showed both mode as their TestMode. Fixed a compatibility issue with running tests from rider. [1.1.0] - 2019-07-30 Introduced the TestRunnerApi for running tests programmatically from elsewhere inside the Editor. Introduced yield instructions for recompiling scripts and awaiting a domain reload in Edit Mode tests. Added a button to the Test Runner UI for clearing the results. [1.0.18] - 2019-07-15 Included new full documentation of the test framework. [1.0.17] - 2019-07-11 Fixed an issue where the Test Runner window wouldn’t frame selected items after search filter is cleared. Fixed a regression where playmode test application on the IOS platform would not quit after the tests are done. [1.0.16] - 2019-06-20 Fixed an issue where the Test Runner window popped out if it was docked, or if something else was docked next to it, when re-opened (case 1158961) Fixed a regression where the running standalone playmode tests from the ui would result in an error. [1.0.15] - 2019-06-18 Added new [TestMustExpectAllLogs] attribute, which automatically does LogAssert.NoUnexpectedReceived() at the end of affected tests. See docs for this attribute for more info on usage. Fixed a regression where no tests would be run if multiple filters are specified. E.g. selecting both a whole assembly and an individual test in the ui. Fixed an issue where performing Run Selected on a selected assembly would run all assemblies. Introduced the capability to do a split build and run, when running playmode tests on standalone devices. Fixed an error in ConditionalIgnore, if the condition were not set. [1.0.14] - 2019-05-27 Fixed issue preventing scene creation in IPrebuildSetup.Setup callback when running standalone playmode tests. Fixed an issue where test assemblies would sometimes not be ordered alphabetically. Added module references to the package for the required modules: imgui and jsonserialize. Added a ConditionalIgnore attribute to help ignoring tests only under specific conditions. Fixed a typo in the player test window (case 1148671). [1.0.13] - 2019-05-07 Fixed a regression where results from the player would no longer update correctly in the UI (case 1151147). [1.0.12] - 2019-04-16 Added specific unity release to the package information. [1.0.11] - 2019-04-10 Fixed a regression from 1.0.10 where test-started events were triggered multiple times after a domain reload. [1.0.10] - 2019-04-08 Fixed an issue where test-started events would not be fired correctly after a test performing a domain reload (case 1141530). The UI should correctly run tests inside a nested class, when that class is selected. All actions should now correctly display a prefix when reporting test result. E.g. \"TearDown :\". Errors logged with Debug.LogError in TearDowns now append the error, rather than overwriting the existing result (case 1114306). Incorrect implementations of IWrapTestMethod and IWrapSetUpTearDown now gives a meaningful error. Fixed a regression where the Test Framework would run TearDown in a base class before the inheriting class (case 1142553). Fixed a regression introduced in 1.0.9 where tests with the Explicit attribute could no longer be executed. [1.0.9] - 2019-03-27 Fixed an issue where a corrupt instance of the test runner window would block for a new being opened. Added the required modules to the list of package requirements. Fixed an issue where errors would happen if the test filter ui was clicked before the ui is done loading. Fix selecting items with duplicate names in test hierarchy of Test Runner window (case 987587). Fixed RecompileScripts instruction which we use in tests (case 1128994). Fixed an issue where using multiple filters on tests would sometimes give an incorrect result. [1.0.7] - 2019-03-12 This is the first release of Unity Package com.unity.test-framework. Migrated the test-framework from the current extension in unity."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/CONTRIBUTING.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/CONTRIBUTING.html",
    "title": "Contributing | Cacher Game",
    "summary": "Contributing If you are interested in contributing, here are some ground rules: ... Define guidelines & rules for what contributors need to know to successfully make Pull requests against your repo ... All contributions are subject to the Unity Contribution Agreement(UCA) By making a pull request, you are confirming agreement to the terms and conditions of the UCA, including that your Contributions are your original creation and that you have complete right and authority to make your Contributions. Once you have a change ready following these ground rules. Simply make a pull request"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/TableOfContents.html",
    "title": "| Cacher Game",
    "summary": "Unity Test Framework overview Edit Mode vs. Play Mode tests Getting started with UTF How to create a new test assembly How to create a test How to run a test How to create a Play Mode test How to run a Play Mode test as standalone Resources Extending UTF How to split the build and run process for standalone Play Mode tests How to run tests programmatically How to get test results How to retrieve the list of tests Reference Running tests from the command-line UnityTest attribute Setup and cleanup at build time IPrebuildSetup IPostBuildCleanup Actions outside of tests Action execution order UnitySetUp and UnityTearDown OuterUnityTestAction Domain Reloads Custom attributes ConditionalIgnore attribute PostBuildCleanup attribute PrebuildSetup attribute TestMustExpectAllLogs attribute TestPlayerBuildModifier attribute TestRunCallback attribute UnityPlatform attribute UnitySetUp attribute UnityTearDown attribute UnityTest attribute Custom equality comparers ColorEqualityComparer FloatEqualityComparer QuaternionEqualityComparer Vector2EqualityComparer Vector3EqualityComparer Vector4EqualityComparer Custom equality comparers with equals operator Test Utils Custom yield instructions IEditModeTestYieldInstruction EnterPlayMode ExitPlayMode RecompileScripts WaitForDomainReload Custom assertion LogAssert Custom constraints Is Parameterized tests MonoBehaviour tests MonoBehaviourTest<T> IMonoBehaviourTest TestRunnerApi ExecutionSettings Filter ITestRunSettings ICallbacks IErrorCallbacks"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/edit-mode-vs-play-mode-tests.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/edit-mode-vs-play-mode-tests.html",
    "title": "Edit Mode vs. Play Mode tests | Cacher Game",
    "summary": "Edit Mode vs. Play Mode tests Let’s clarify a bit what Play Mode and Edit Mode test means from the Unity Test Framework perspective: Edit Mode tests Edit Mode tests (also known as Editor tests) are only run in the Unity Editor and have access to the Editor code in addition to the game code. With Edit Mode tests it is possible to test any of your Editor extensions using the UnityTest attribute. For Edit Mode tests, your test code runs in the EditorApplication.update callback loop. Note: You can also control entering and exiting Play Mode from your Edit Mode test. This allow your test to make changes before entering Play Mode. Edit Mode tests should meet one of the following conditions: They should have an assembly definition with reference to nunit.framework.dll and has only the Editor as a target platform: \"includePlatforms\": [ \"Editor\" ], Legacy condition: put tests in the project’s Editor folder. Play Mode tests You can run Play Mode tests as a standalone in a Player or inside the Editor. Play Mode tests allow you to exercise your game code, as the tests run as coroutines if marked with the UnityTest attribute. Play Mode tests should correspond to the following conditions: Have an assembly definition with reference to nunit.framework.dll. Have the test scripts located in a folder with the .asmdef file. The test assembly should reference an assembly within the code that you need to test. \"references\": [ \"NewAssembly\" ], \"optionalUnityReferences\": [ \"TestAssemblies\" ], \"includePlatforms\": [], Recommendations Attributes Use the NUnit Test attribute instead of the UnityTest attribute, unless you need to yield special instructions, in Edit Mode, or if you need to skip a frame or wait for a certain amount of time in Play Mode. References It is possible for your Test Assemblies to reference the test tools in UnityEngine.TestRunner and UnityEditor.TestRunner. The latter is only available in Edit Mode. You can specify these references in the Assembly Definition References on the Assembly Definition."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extending.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extending.html",
    "title": "Extending Unity Test Framework | Cacher Game",
    "summary": "Extending Unity Test Framework It is possible to extend the Unity Test Framework (UTF) in many ways, for custom workflows for your projects and for other packages to build on top of UTF. These extensions are a supplement to the ones already offered by NUnit. Some workflows for extending UTF include: How to split the build and run process for standalone Play Mode tests How to run tests programmatically How to get test results How to retrieve the list of tests"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extension-get-test-results.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extension-get-test-results.html",
    "title": "How to get test results | Cacher Game",
    "summary": "How to get test results You can receive callbacks when the active test run, or individual tests, starts and finishes. You can register callbacks by invoking RegisterCallbacks on the TestRunnerApi with an instance of a class that implements ICallbacks. There are four ICallbacks methods for the start and finish of both the whole run and each level of the test tree. Example An example of how listeners can be set up: Note: Listeners receive callbacks from all test runs, regardless of the registered TestRunnerApi for that instance. public void SetupListeners() { var api = ScriptableObject.CreateInstance<TestRunnerApi>(); api.RegisterCallbacks(new MyCallbacks()); } private class MyCallbacks : ICallbacks { public void RunStarted(ITestAdaptor testsToRun) { } public void RunFinished(ITestResultAdaptor result) { } public void TestStarted(ITestAdaptor test) { } public void TestFinished(ITestResultAdaptor result) { if (!result.HasChildren && result.ResultState != \"Passed\") { Debug.Log(string.Format(\"Test {0} {1}\", result.Test.Name, result.ResultState)); } } } Note: The registered callbacks are not persisted on domain reloads. So it is necessary to re-register the callback after a domain reloads, usually with InitializeOnLoad. It is possible to provide a priority as an integer as the second argument when registering a callback. This influences the invocation order of different callbacks. The default value is zero. It is also possible to provide RegisterCallbacks with a class instance that implements IErrorCallbacks that is an extended version of ICallbacks. IErrorCallbacks also has a callback method for OnError that invokes if the run fails to start, for example, due to compilation errors or if an IPrebuildSetup throws an exception."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extension-retrieve-test-list.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extension-retrieve-test-list.html",
    "title": "How to retrieve the list of tests | Cacher Game",
    "summary": "How to retrieve the list of tests It is possible to use the TestRunnerApi to retrieve the test tree for a given test mode (Edit Mode or Play Mode). You can retrieve the test tree by invoking RetrieveTestList with the desired TestMode and a callback action, with an ITestAdaptor representing the test tree. Example The following example retrieves the test tree for Edit Mode tests and prints the number of total test cases: var api = ScriptableObject.CreateInstance<TestRunnerApi>(); api.RetrieveTestList(TestMode.EditMode, (testRoot) => { Debug.Log(string.Format(\"Tree contains {0} tests.\", testRoot.TestCaseCount)); });"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extension-run-tests.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extension-run-tests.html",
    "title": "How to run tests programmatically | Cacher Game",
    "summary": "How to run tests programmatically Filters Run tests by calling Execute on the TestRunnerApi, and provide some execution settings that consists of a Filter. The Filter specifies what tests to run. Example The following is an example of how to run all Play Mode tests in a project: var testRunnerApi = ScriptableObject.CreateInstance<TestRunnerApi>(); var filter = new Filter() { testMode = TestMode.PlayMode }; testRunnerApi.Execute(new ExecutionSettings(filter)); Multiple filter values It is possible to specify a more specific filter by filling out the fields on the Filter class in more detail. Many of the fields allow for multiple values. The runner tries to match tests against at least one of the values provided and then runs any tests that match. Example In this example, the API runs tests with full names that fit either of the two names provided: var api = ScriptableObject.CreateInstance<TestRunnerApi>(); api.Execute(new ExecutionSettings(new Filter() { testNames = new[] {\"MyTestClass.NameOfMyTest\", \"SpecificTestFixture.NameOfAnotherTest\"} })); Multiple filter fields If using multiple different fields on the filter, then it matches against tests that fulfill all the different fields. Example In this example, it runs any test that fits either of the two test names, and that also belongs to a test assembly that fits the given name. var api = ScriptableObject.CreateInstance<TestRunnerApi>(); api.Execute(new ExecutionSettings(new Filter() { assemblyNames = new [] {\"MyTestAssembly\"}, testNames = new [] {\"MyTestClass.NameOfMyTest\", \"MyTestClass.AnotherNameOfATest\"} })); Multiple constructor filters The execution settings take one or more filters in its constructor. If there is no filter provided, then it runs all Edit Mode tests by default. If there are multiple filters provided, then a test runs if it matches any of the filters. Example In this example, it runs any tests that are either in the assembly named MyTestAssembly or if the full name of the test matches either of the two provided test names: var api = ScriptableObject.CreateInstance<TestRunnerApi>(); api.Execute(new ExecutionSettings( new Filter() { assemblyNames = new[] {\"MyTestAssembly\"}, }, new Filter() { testNames = new[] {\"MyTestClass.NameOfMyTest\", \"MyTestClass.AnotherNameOfATest\"} } )); Note: Specifying different test modes or platforms in each Filter is not currently supported. The test mode and platform is from the first Filter only and defaults to Edit Mode, if not supplied."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/getting-started.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/getting-started.html",
    "title": "Getting started with Unity Test Framework | Cacher Game",
    "summary": "Getting started with Unity Test Framework To access the Unity Test Framework (UTF) in the Unity Editor, open the Test Runner window; go to Window > General > Test Runner. To get started with UTF, follow the workflows below: How to create a new test assembly How to create a test How to run a test How to create a Play Mode test How to run a Play Mode test as standalone For further information, see the resources and reference sections."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/index.html",
    "title": "About Unity Test Framework | Cacher Game",
    "summary": "About Unity Test Framework The Unity Test Framework (UTF) enables Unity users to test their code in both Edit Mode and Play Mode, and also on target platforms such as Standalone, Android, iOS, etc. This package provides a standard test framework for users of Unity and developers at Unity so that both benefit from the same features and can write tests the same way. UTF uses a Unity integration of NUnit library, which is an open-source unit testing library for .Net languages. UTF currently uses NUnit version 3.5. For more information about NUnit, see the official NUnit website and the NUnit documentation. Note: UTF is not a new concept or toolset; it is an adjusted and more descriptive naming for the toolset otherwise known as Unity Test Runner, which is now available as this package. Installing Unity Test Framework To install this package, follow the instructions in the Package Manager documentation. Note: Search for the Test Framework package. In Unity 2019.2 and higher, you may need to enable the package before use. Using Unity Test Framework To learn how to use the Unity Test Framework package in your project, read the manual. Technical details Requirements This version of the Unity Test Framework is compatible with the following versions of the Unity Editor: 2019.2 and later. Known limitations Unity Test Framework version 1.0.18 includes the following known limitations: The UnityTest attribute does not support WSA platform. The UnityTest attribute does not support Parameterized tests (except for ValueSource). The UnityTest attribute does not support the NUnit Repeat attribute. Nested test fixture cannot run from the Editor UI. When using the NUnit Retry attribute in PlayMode tests, it throws InvalidCastException. Async tests are not supported in the current version of UTF. Package contents The following table indicates the root folders in the package where you can find useful resources: Location Description /com.unity.test-framework/Documentation~ Contains the documentation for the package. Document revision history Date Reason February 4, 2021 Applied user feedback to the documentation. Matches package version 1.1.22 August 23, 2019 Applied feedback to the documentation July 25, 2019 Documentation updated to include features in version 1.1.0 July 11, 2019 Documentation updated. Matches package version 1.0.18 May 27, 2019 Documentation created. Matches package version 1.0.14"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/manual.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/manual.html",
    "title": "Unity Test Framework manual | Cacher Game",
    "summary": "Unity Test Framework manual This is the manual for the Unity Test Framework (UTF): Introduction Unity Test Framework overview Edit Mode vs. Play Mode tests Getting started Getting started with UTF Workflows: How to create a new test assembly How to create a test How to run a test How to create a Play Mode test How to run a Play Mode test in player Resources Extending UTF Extending UTF Workflows: How to split the build and run process for standalone Play Mode tests How to run tests programmatically How to get test results How to retrieve the list of tests Reference Running tests from the command-line UnityTest attribute Setup and cleanup at build time IPrebuildSetup IPostBuildCleanup Actions outside of tests Action execution order UnitySetUp and UnityTearDown OuterUnityTestAction Domain Reloads Custom attributes ConditionalIgnore attribute PostBuildCleanup attribute PrebuildSetup attribute TestMustExpectAllLogs attribute TestPlayerBuildModifier attribute TestRunCallback attribute UnityPlatform attribute UnitySetUp attribute UnityTearDown attribute UnityTest attribute Custom equality comparers ColorEqualityComparer FloatEqualityComparer QuaternionEqualityComparer Vector2EqualityComparer Vector3EqualityComparer Vector4EqualityComparer Custom equality comparers with equals operator Test Utils Custom yield instructions IEditModeTestYieldInstruction EnterPlayMode ExitPlayMode Custom assertion LogAssert Custom constraints Is Parameterized tests MonoBehaviour tests MonoBehaviourTest IMonoBehaviourTest TestRunnerApi ExecutionSettings Filter ITestRunSettings ICallbacks IErrorCallbacks"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-actions-outside-tests.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-actions-outside-tests.html",
    "title": "Actions outside of tests | Cacher Game",
    "summary": "Actions outside of tests When writing tests, it is possible to avoid duplication of code by using the SetUp and TearDown methods built into NUnit. The Unity Test Framework has extended these methods with extra functionality, which can yield commands and skip frames, in the same way as UnityTest. Action execution order The actions related to a test run in the following order: Attributes implementing IApplyToContext Any attribute implementing OuterUnityTestAction has its BeforeTest invoked Tests with UnitySetUp methods in their test class Attributes implementing IWrapSetUpTearDown Any method with the [SetUp]) attribute Action attributes have their BeforeTest method invoked Attributes implementing IWrapTestMethod The test itself runs Action attributes have their AfterTest method invoked Any method with the TearDown attribute Tests with UnityTearDown methods in their test class Any OuterUnityTestAction has its AfterTest invoked The list of actions is the same for both Test and UnityTest. Execution order flow Note: Some browsers do not support SVG image files. If the image above does not display properly (for example, if you cannot see any text), please try another browser, such as Google Chrome or Mozilla Firefox. Domain Reloads In Edit Mode tests it is possible to yield instructions that can result in a domain reload, such as entering or exiting Play Mode (see Custom yield instructions). When a domain reload happens, all non-Unity actions (such as OneTimeSetup and Setup) are rerun before the code, which initiated the domain reload, continues. Unity actions (such as UnitySetup) are not rerun. If the Unity action is the code that initiated the domain reload, then the rest of the code in the UnitySetup method runs after the domain reload."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-conditionalignore.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-conditionalignore.html",
    "title": "ConditionalIgnore attribute | Cacher Game",
    "summary": "ConditionalIgnore attribute This attribute is an alternative to the standard Ignore attribute in NUnit. It allows for ignoring tests only under a specified condition. The condition evaluates during OnLoad, referenced by ID. Example The following example shows a method to use the ConditionalIgnore attribute to ignore a test if the Unity Editor is running macOS: using UnityEditor; using NUnit.Framework; using UnityEngine.TestTools; [InitializeOnLoad] public class OnLoad { static OnLoad() { var editorIsOSX = false; #if UNITY_EDITOR_OSX editorIsOSX = true; #endif ConditionalIgnoreAttribute.AddConditionalIgnoreMapping(\"IgnoreInMacEditor\", editorIsOSX); } } public class MyTestClass { [Test, ConditionalIgnore(\"IgnoreInMacEditor\", \"Ignored on Mac editor.\")] public void TestNeverRunningInMacEditor() { Assert.Pass(); } } Note: You can only use InitializeOnLoad in Edit Mode tests."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-testmustexpectalllogs.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-testmustexpectalllogs.html",
    "title": "TestMustExpectAllLogs attribute | Cacher Game",
    "summary": "TestMustExpectAllLogs attribute The presence of this attribute causes the Test Runner to expect every single log. By default, the Test Runner only fails on error logs, but TestMustExpectAllLogs fails on warnings and info level messages as well. It is the same as calling the method LogAssert.NoUnexpectedReceived at the bottom of every affected test. Assembly-wide usage You can apply this attribute to test assemblies (that affects every test in the assembly), fixtures (affects every test in the fixture), or on individual test methods. It is also inherited from base fixtures. The MustExpect property (true by default) lets you enable or disable the higher level value. For example when migrating an assembly to this more strict checking method, you might attach [assembly:TestMustExpectAllLogs] to the assembly itself, but then whitelist failing fixtures and test methods with [TestMustExpectAllLogs(MustExpect=false)] until you have migrated them. This also means new tests in that assembly would have the more strict checking."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-testplayerbuildmodifier.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-testplayerbuildmodifier.html",
    "title": "TestPlayerBuildModifier attribute | Cacher Game",
    "summary": "TestPlayerBuildModifier attribute You can use the TestPlayerBuildModifier attribute to accomplish a couple of different scenarios: Modify the Player build options for Play Mode tests It is possible to change the BuildPlayerOptions for the test Player, to achieve custom behavior when running Play Mode tests. Modifying the build options allows for changing the target location of the build as well as changing BuildOptions. To modify the BuildPlayerOptions, do the following: Implement the ITestPlayerBuildModifier Reference the implementation type in a TestPlayerBuildModifier attribute on an assembly level. Example using UnityEditor; using UnityEditor.TestTools; [assembly:TestPlayerBuildModifier(typeof(BuildModifier))] public class BuildModifier : ITestPlayerBuildModifier { public BuildPlayerOptions ModifyOptions(BuildPlayerOptions playerOptions) { if (playerOptions.target == BuildTarget.iOS) { playerOptions.options |= BuildOptions.SymlinkLibraries; // Enable symlink libraries when running on iOS } playerOptions.options |= BuildOptions.AllowDebugging; // Enable allow Debugging flag on the test Player. return playerOptions; } } Note: When building the Player, it includes all TestPlayerBuildModifier attributes across all loaded assemblies, independent of the currently used test filter. As the implementation references the UnityEditor namespace, the code is typically implemented in an Editor only assembly, as the UnityEditor namespace is not available otherwise. Split build and run It is possible to use the Unity Editor for building the Player with tests, without running the tests. This allows for running the Player on e.g. another machine. In this case, it is necessary to modify the Player to build and implement a custom handling of the test result. By using TestPlayerBuildModifier, you can alter the BuildOptions to not start the Player after the build as well as build the Player at a specific location. Combined with PostBuildCleanup, you can automatically exit the Editor on completion of the build. Example using System; using System.IO; using System.Linq; using Tests; using UnityEditor; using UnityEditor.TestTools; using UnityEngine; using UnityEngine.TestTools; [assembly:TestPlayerBuildModifier(typeof(HeadlessPlayModeSetup))] [assembly:PostBuildCleanup(typeof(HeadlessPlayModeSetup))] namespace Tests { public class HeadlessPlayModeSetup : ITestPlayerBuildModifier, IPostBuildCleanup { private static bool s_RunningPlayerTests; public BuildPlayerOptions ModifyOptions(BuildPlayerOptions playerOptions) { // Do not launch the player after the build completes. playerOptions.options &= ~BuildOptions.AutoRunPlayer; // Set the headlessBuildLocation to the output directory you desire. It does not need to be inside the project. var headlessBuildLocation = Path.GetFullPath(Path.Combine(Application.dataPath, \".//..//PlayModeTestPlayer\")); var fileName = Path.GetFileName(playerOptions.locationPathName); if (!string.IsNullOrEmpty(fileName)) { headlessBuildLocation = Path.Combine(headlessBuildLocation, fileName); } playerOptions.locationPathName = headlessBuildLocation; // Instruct the cleanup to exit the Editor if the run came from the command line. // The variable is static because the cleanup is being invoked in a new instance of the class. s_RunningPlayerTests = true; return playerOptions; } public void Cleanup() { if (s_RunningPlayerTests && IsRunningTestsFromCommandLine()) { // Exit the Editor on the next update, allowing for other PostBuildCleanup steps to run. EditorApplication.update += () => { EditorApplication.Exit(0); }; } } private static bool IsRunningTestsFromCommandLine() { var commandLineArgs = Environment.GetCommandLineArgs(); return commandLineArgs.Any(value => value == \"-runTests\"); } } } If the Editor is still running after the Play Mode tests have run, the Player tries to report the results back, using PlayerConnection, which has a reference to the IP address of the Editor machine, when built. To implement a custom way of reporting the results of the test run, let one of the assemblies in the Player include a TestRunCallback. At RunFinished, it is possible to get the full test report as XML from the NUnit test result by calling result.ToXml(true). You can save the result and then save it on the device or send it to another machine as needed."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-testruncallback.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-testruncallback.html",
    "title": "TestRunCallback attribute | Cacher Game",
    "summary": "TestRunCallback attribute It is possible for the test framework to invoke callbacks as the current test run progresses. To do this, there is a TestRunCallback attribute which takes the type of ITestRunCallback implementation. You can invoke the callbacks with NUnit ITest and ITestResult classes. At the RunStarted and RunFinished methods, the test and test results are for the whole test tree. These methods invoke at each node in the test tree; first with the whole test assembly, then with the test class, and last with the test method. From these callbacks, it is possible to read the partial or the full results, and it is furthermore possible to save the XML version of the result for further processing or continuous integration. Example using NUnit.Framework.Interfaces; using UnityEngine; using UnityEngine.TestRunner; [assembly:TestRunCallback(typeof(MyTestRunCallback))] public class MyTestRunCallback : ITestRunCallback { public void RunStarted(ITest testsToRun) { } public void RunFinished(ITestResult testResults) { } public void TestStarted(ITest test) { } public void TestFinished(ITestResult result) { if (!result.Test.IsSuite) { Debug.Log($\"Result of {result.Name}: {result.ResultState.Status}\"); } } } Note: The TestRunCallback does not need any references to the UnityEditor namespace and is thus able to run in standalone Players, on the Player side."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-unityplatform.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-unityplatform.html",
    "title": "UnityPlatform attribute | Cacher Game",
    "summary": "UnityPlatform attribute Use this attribute to define a specific set of platforms you want or do not want your test(s) to run on. You can use this attribute on the test method, test class, or test assembly level. Use the supported RuntimePlatform enumeration values to specify the platforms. You can also specify which platforms to test by passing one or more RuntimePlatform values along with or without the include or exclude properties as parameters to the Platform attribute constructor. The test(s) skips if the current target platform is: Not explicitly specified in the included platforms list In the excluded platforms list using UnityEngine; using UnityEngine.TestTools; using NUnit.Framework; [TestFixture] public class TestClass { [Test] [UnityPlatform(RuntimePlatform.WindowsPlayer)] public void TestMethod() { Assert.AreEqual(Application.platform, RuntimePlatform.WindowsPlayer); } } Properties Syntax Description RuntimePlatform[] exclude List the platforms you do not want to have your tests run on. RuntimePlatform[] include A subset of platforms you need to have your tests run on."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-unitytest.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-unitytest.html",
    "title": "UnityTest attribute | Cacher Game",
    "summary": "UnityTest attribute UnityTest attribute is the main addition to the standard NUnit library for the Unity Test Framework. This type of unit test allows you to skip a frame from within a test (so background tasks can finish) or give certain commands to the Unity Editor, such as performing a domain reload or entering Play Mode from an Edit Mode test. In Play Mode, the UnityTest attribute runs as a coroutine. Whereas Edit Mode tests run in the EditorApplication.update callback loop. The UnityTest attribute is, in fact, an alternative to the NUnit Test attribute, which allows yielding instructions back to the framework. Once the instruction is complete, the test run continues. If you yield return null, you skip a frame. That might be necessary to ensure that some changes do happen on the next iteration of either the EditorApplication.update loop or the game loop. Edit Mode example The most simple example of an Edit Mode test could be the one that yields null to skip the current frame and then continues to run: [UnityTest] public IEnumerator EditorUtility_WhenExecuted_ReturnsSuccess() { var utility = RunEditorUtilityInTheBackground(); while (utility.isRunning) { yield return null; } Assert.IsTrue(utility.isSuccess); } Play Mode example In Play Mode, a test runs as a coroutine attached to a MonoBehaviour. So all the yield instructions available in coroutines, are also available in your test. From a Play Mode test you can use one of Unity’s Yield Instructions: WaitForFixedUpdate: to ensure changes expected within the next cycle of physics calculations. WaitForSeconds: if you want to pause your test coroutine for a fixed amount of time. Be careful about creating long-running tests. The simplest example is to yield to WaitForFixedUpdate: [UnityTest] public IEnumerator GameObject_WithRigidBody_WillBeAffectedByPhysics() { var go = new GameObject(); go.AddComponent<Rigidbody>(); var originalPosition = go.transform.position.y; yield return new WaitForFixedUpdate(); Assert.AreNotEqual(originalPosition, go.transform.position.y); }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-command-line.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-command-line.html",
    "title": "Running tests from the command line | Cacher Game",
    "summary": "Running tests from the command line It’s pretty simple to run a test project from the command line. Here is an example in Windows: Unity.exe -runTests -batchmode -projectPath PATH_TO_YOUR_PROJECT -testResults C:\\temp\\results.xml -testPlatform PS4 Note: Use the -batchmode option when running tests on the command line to remove the need for manual user inputs. For more information, see Unity Command line arguments. Test Framework command line arguments forgetProjectPath Don't save your current Project into the Unity launcher/hub history. runTests Runs tests in the Project. testCategory A semicolon-separated list of test categories to include in the run. A semi-colon separated list should be formatted as a string enclosed in quotation marks, e.g. testCategory \"firstCategory;secondCategory\". If using both testFilter and testCategory, then only tests that match both are run. This argument supports negation using '!'. If using '!MyCategory' then no tests with the 'MyCategory' category will be included in the run. testFilter A semicolon-separated list of test names to run, or a regular expression pattern to match tests by their full name. A semi-colon separated list should be formatted as a string enclosed in quotation marks, e.g. testFilter \"Low;Medium\". This argument supports negation using '!'. If using the test filter '!MyNamespace.Something.MyTest', then all tests except that test will be run. testPlatform The platform to run tests on. Accepted values: EditMode Edit Mode tests. Equivalent to running tests from the EditMode tab of the Test Runner window. PlayMode Play Mode tests that run in the Editor. Equivalent to running tests from the PlayMode tab of the Test Runner window. Any value from the BuildTarget enum. Play Mode tests that run on a player built for the specified platform. Equivalent to using the Run all tests (<target_platform>) dropdown in the PlayMode tab of the Test Runner window. Note: If no value is specified for this argument, tests run in Edit Mode. assemblyNames A semicolon-separated list of test assemblies to include in the run. A semi-colon separated list should be formatted as a string enclosed in quotation marks, e.g. assemblyNames \"firstAssembly;secondAssembly\". testResults The path where Unity should save the result file. By default, Unity saves it in the Project’s root folder. Test results follow the XML format as defined by NUnit, see the NUnit documentation. There is currently no common definition for exit codes reported by individual Unity components under test. The best way to understand the source of a problem is the content of error messages and stack traces. playerHeartbeatTimeout The time, in seconds, the editor should wait for heartbeats after starting a test run on a player. This defaults to 10 minutes. runSynchronously If included, the test run will run tests synchronously, guaranteeing that all tests runs in one editor update call. Note that this is only supported for EditMode tests, and that tests which take multiple frames (i.e. [UnityTest] tests, or tests with [UnitySetUp] or [UnityTearDown] scaffolding) will be filtered out. testSettingsFile Path to a TestSettings.json file that allows you to set up extra options for your test run. An example of the TestSettings.json file could look like this: { \"scriptingBackend\":\"WinRTDotNET\", \"Architecture\":null, \"apiProfile\":0 } apiProfile The .Net compatibility level. Set to one of the following values: 1 - .Net 2.0 2 - .Net 2.0 Subset 3 - .Net 4.6 5 - .Net micro profile (used by Mono scripting backend if Stripping Level is set to Use micro mscorlib) 6 - .Net Standard 2.0 appleEnableAutomaticSigning Sets option for automatic signing of Apple devices. appleDeveloperTeamID Sets the team ID for the apple developer account. architecture Target architecture for Android. Set to one of the following values: None = 0 ARMv7 = 1 ARM64 = 2 X86 = 4 All = 4294967295 iOSManualProvisioningProfileType Set to one of the following values: 0 - Automatic 1 - Development 2 - Distribution iOSManualProvisioningProfileID scriptingBackend Set to one of the following values, which should be given as a string literal enclosed in quotes: Mono2x IL2CPP WinRTDotNET playerGraphicsAPI Set graphics API that will be used during test execution in the player. Value can be any GraphicsDeviceType as a string literal enclosed in quotes. Value will only be set if it is supported on the target platform. androidBuildAppBundle A boolean setting that allows to build an Android App Bundle (AAB) instead of APK for tests."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-color.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-color.html",
    "title": "ColorEqualityComparer | Cacher Game",
    "summary": "ColorEqualityComparer Use this class to compare two Color objects. ColorEqualityComparer.Instance has default calculation error value set to 0.01f. To set a test specific error value instantiate a comparer instance using the one argument constructor. Static properties Syntax Description Instance A singleton instance of the comparer with a default error value set to 0.01f. Constructors Syntax Description ColorEqualityComparer(float error) Creates an instance of the comparer with a custom error value. Public methods Syntax Description bool Equals(Color expected, Color actual); Compares the actual and expected Color objects for equality using Utils.AreFloatsEqualAbsoluteError to compare the RGB and Alpha attributes of Color. Returns true if expected and actual objects are equal otherwise, it returns false. Example [TestFixture] public class ColorEqualityTest { [Test] public void GivenColorsAreEqual_WithAllowedCalculationError() { // Using default error var firstColor = new Color(0f, 0f, 0f, 0f); var secondColor = new Color(0f, 0f, 0f, 0f); Assert.That(firstColor, Is.EqualTo(secondColor).Using(ColorEqualityComparer.Instance)); // Allowed error 10e-5f var comparer = new ColorEqualityComparer(10e-5f); firstColor = new Color(0f, 0f, 0f, 1f); secondColor = new Color(10e-6f, 0f, 0f, 1f); Assert.That(firstColor, Is.EqualTo(secondColor).Using(comparer)); } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-equals.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-equals.html",
    "title": "Custom equality comparers with equals operator | Cacher Game",
    "summary": "Custom equality comparers with equals operator If you need to compare Vectors using the overloaded operator == (see Vector2.operator ==, Vector3.operator ==, and Vector4.operator ==) you should use the respective comparer implementations: Vector2ComparerWithEqualsOperator Vector3ComparerWithEqualsOperator Vector4ComparerWithEqualsOperator The interface is the same as for other equality comparers except the public constructor error parameter is inapplicable in this case. Example [TestFixture] public class Vector3Test { [Test] public void VerifyThat_TwoVector3ObjectsAreEqual() { var actual = new Vector3(10e-7f, 10e-7f, 10e-7f); var expected = new Vector3(0f, 0f, 0f); Assert.That(actual, Is.EqualTo(expected).Using(Vector3ComparerWithEqualsOperator.Instance)); } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-float.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-float.html",
    "title": "FloatEqualityComparer | Cacher Game",
    "summary": "FloatEqualityComparer Use this class to compare two float values for equality with NUnit constraints. Use FloatEqualityComparer.Instance comparer to have the default error value set to 0.0001f. For any other error, use the one argument constructor to create a comparer. Static Properties Syntax Description Instance A singleton instance of the comparer with a default error value set to 0.0001f. Constructors Syntax Description FloatEqualityComparer(float allowedError) Creates an instance of the comparer with a custom error value. Public methods Syntax Description bool Equals(float expected, float actual); Compares the actual and expected float values for equality using Utils.AreFloatsEqual. Example [TestFixture] public class FloatsTest { [Test] public void VerifyThat_TwoFloatsAreEqual() { var comparer = new FloatEqualityComparer(10e-6f); var actual = -0.00009f; var expected = 0.00009f; Assert.That(actual, Is.EqualTo(expected).Using(comparer)); // Default relative error 0.0001f actual = 10e-8f; expected = 0f; Assert.That(actual, Is.EqualTo(expected).Using(FloatEqualityComparer.Instance)); } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-quaternion.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-quaternion.html",
    "title": "QuaternionEqualityComparer | Cacher Game",
    "summary": "QuaternionEqualityComparer Use this utility to compare two Quaternion objects for equality with NUnit assertion constraints. Use the static instance QuaternionEqualityComparer.Instance to have the default calculation error value set to 0.00001f. For any other custom error value, use the one argument constructor. Static properties Syntax Description Instance A comparer instance with the default error value 0.00001f. Constructors Syntax Description QuaternionEqualityComparer(float allowedError) Creates an instance of the comparer with a custom allowed error value. Public methods Syntax Description bool Equals(Quaternion expected, Quaternion actual) Compares the actual and expected Quaternion objects for equality using the Quaternion.Dot method. Example [TestFixture] public class QuaternionTest { [Test] public void VerifyThat_TwoQuaternionsAreEqual() { var actual = new Quaternion(10f, 0f, 0f, 0f); var expected = new Quaternion(1f, 10f, 0f, 0f); var comparer = new QuaternionEqualityComparer(10e-6f); Assert.That(actual, Is.EqualTo(expected).Using(comparer)); //Using default error 0.00001f actual = new Quaternion(10f, 0f, 0.1f, 0f); expected = new Quaternion(1f, 10f, 0.1f, 0f); Assert.That(actual, Is.EqualTo(expected).Using(QuaternionEqualityComparer.Instance)); } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-vector2.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-vector2.html",
    "title": "Vector2EqualityComparer | Cacher Game",
    "summary": "Vector2EqualityComparer Use this class to compare two Vector2 objects for equality with NUnit constraints. Use the static Vector2EqualityComparer.Instance to have the calculation error value set to default 0.0001f. For any other error value, instantiate a new comparer object with the one argument constructor. Static properties Syntax Description Instance A comparer instance with the default error value set to 0.0001f. Constructors Syntax Description Vector2EqualityComparer(float error) Creates an instance with a custom error value. Public methods Syntax Description Equals(Vector2 expected, Vector2 actual) Compares the actual and expected Vector2 objects for equality using the Utils.AreFloatsEqual method. Example [TestFixture] public class Vector2Test { [Test] public void VerifyThat_TwoVector2ObjectsAreEqual() { // Custom calculation error var actual = new Vector2(10e-7f, 10e-7f); var expected = new Vector2(0f, 0f); var comparer = new Vector2EqualityComparer(10e-6f); Assert.That(actual, Is.EqualTo(expected).Using(comparer)); //Default error 0.0001f actual = new Vector2(0.01f, 0.01f); expected = new Vector2(0.01f, 0.01f); Assert.That(actual, Is.EqualTo(expected).Using(Vector2EqualityComparer.Instance)); } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-vector3.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-vector3.html",
    "title": "Vector3EqualityComparer | Cacher Game",
    "summary": "Vector3EqualityComparer Use this class to compare two Vector3 objects for equality with NUnit constraints. Call Vector3EqualityComparer.Instance comparer to perform a comparison with the default calculation error value 0.0001f. To specify a different error value, use the one argument constructor to instantiate a new comparer. Static properties Syntax Description Instance A comparer instance with the default calculation error value equal to 0.0001f. Constructors Syntax Description Vector3EqualityComparer(float allowedError) Creates an instance with a custom error value. Public methods Syntax Description bool Equals(Vector3 expected, Vector3 actual) Compares the actual and expected Vector3 objects for equality using Utils.AreFloatsEqual to compare the x, y, and z attributes of Vector3. Example [TestFixture] public class Vector3Test { [Test] public void VerifyThat_TwoVector3ObjectsAreEqual() { // Custom error 10e-6f var actual = new Vector3(10e-8f, 10e-8f, 10e-8f); var expected = new Vector3(0f, 0f, 0f); var comparer = new Vector3EqualityComparer(10e-6f); Assert.That(actual, Is.EqualTo(expected).Using(comparer)); //Default error 0.0001f actual = new Vector3(0.01f, 0.01f, 0f); expected = new Vector3(0.01f, 0.01f, 0f); Assert.That(actual, Is.EqualTo(expected).Using(Vector3EqualityComparer.Instance)); } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-vector4.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-vector4.html",
    "title": "Vector4EqualityComparer | Cacher Game",
    "summary": "Vector4EqualityComparer Use this class to compare two Vector4 objects for equality with NUnit constraints. Call Vector4EqualityComparer.Instance to perform comparisons using default calculation error value 0.0001f. To set a custom test value, instantiate a new comparer using the one argument constructor. Static Properties Syntax Description Vector4EqualityComparer Instance A comparer instance with the default calculation error value set to 0.0001f. Constructors Syntax Description Vector4EqualityComparer(float allowedError) Creates an instance with a custom error value. Public methods Syntax Description bool Equals(Vector4 expected, Vector4 actual); Compares the actual and expected Vector4 objects for equality using Utils.AreFloatsEqual to compare the x, y, z, and w attributes of Vector4. Example [TestFixture] public class Vector4Test { [Test] public void VerifyThat_TwoVector4ObjectsAreEqual() { // Custom error 10e-6f var actual = new Vector4(0, 0, 1e-6f, 1e-6f); var expected = new Vector4(1e-6f, 0f, 0f, 0f); var comparer = new Vector4EqualityComparer(10e-6f); Assert.That(actual, Is.EqualTo(expected).Using(comparer)); // Default error 0.0001f actual = new Vector4(0.01f, 0.01f, 0f, 0f); expected = new Vector4(0.01f, 0.01f, 0f, 0f); Assert.That(actual, Is.EqualTo(expected).Using(Vector4EqualityComparer.Instance)); } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-assertion.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-assertion.html",
    "title": "Custom assertion | Cacher Game",
    "summary": "Custom assertion A test fails if Unity logs a message other than a regular log or warning message. Use LogAssert to check for an expected message in the log so that the test does not fail when Unity logs the message. Use LogAssert.Expect before running the code under test, as the check for expected logs runs at the end of each frame. A test also reports a failure, if an expected message does not appear, or if Unity does not log any regular log or warning messages. Example [Test] public void LogAssertExample() { // Expect a regular log message LogAssert.Expect(LogType.Log, \"Log message\"); // The test fails without the following expected log message Debug.Log(\"Log message\"); // An error log Debug.LogError(\"Error message\"); // Without expecting an error log, the test would fail LogAssert.Expect(LogType.Error, \"Error message\"); } LogAssert LogAssert lets you expect Unity log messages that would otherwise cause the test to fail. It is available under the namespace UnityEngine.TestTools, see the Scripting API for more details. Static properties Syntax Description bool ignoreFailingMessages Set this property to true to prevent unexpected error log messages from triggering an assertion. By default, it is false. Static Methods Syntax Description void Expect(LogType type, string message); void Expect(LogType type, Regex message); Verifies that a log message of a specified type appears in the log. A test won’t fail from an expected error, assertion, or exception log message. It does fail if an expected message does not appear in the log. void NoUnexpectedReceived(); Triggers an assertion when receiving any log messages and fails the test if some are unexpected messages. If multiple tests need to check for no received unexpected logs, consider using the TestMustExpectAllLogs attribute instead. Expect string message void Expect(LogType type, string message); Parameters Syntax Description LogType type A type of log to expect. It can take one of the LogType enum values. string message A string value that should equate to the expected message. Expect Regex message void Expect(LogType type, Regex message); Parameters Syntax Description LogType type A type of log to expect. It can take one of the LogType enum values. Regex message A regular expression pattern to match the expected message."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-attributes.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-attributes.html",
    "title": "Custom attributes | Cacher Game",
    "summary": "Custom attributes As a part of UTF’s public API we provide the following attributes: ConditionalIgnore attribute PostBuildCleanup attribute PrebuildSetup attribute TestMustExpectAllLogs attribute TestPlayerBuildModifier attribute TestRunCallback attribute UnityPlatform attribute UnitySetUp attribute UnityTearDown attribute UnityTest attribute"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-constraints.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-constraints.html",
    "title": "Custom constraints | Cacher Game",
    "summary": "Custom constraints NUnit allows you to write test assertions in a more descriptive and human readable way using the Assert.That mechanism, where the first parameter is an object under test and the second parameter describes conditions that the object has to meet. Is We’ve extended NUnit API with a custom constraint type and declared an overlay Is class. To resolve ambiguity between the original implementation and the custom one you must explicitly declare it with a using statement or via addressing through the full type name UnityEngine.TestTools.Constraints.Is. Static Methods Syntax Description AllocatingGCMemory A constraint type that invokes the delegate you provide as the parameter of Assert.That and checks whether it causes any GC memory allocations. It passes if any GC memory is allocated and fails if not. Example using Is = UnityEngine.TestTools.Constraints.Is; class MyTestClass { [Test] public void MyTest() { Assert.That(() => { var i = new int[500]; }, Is.AllocatingGCMemory()); } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-equality-comparers.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-equality-comparers.html",
    "title": "Custom equality comparers | Cacher Game",
    "summary": "Custom equality comparers To enable easier verification of custom Unity type values in your tests we provide you with some custom equality comparers: ColorEqualityComparer FloatEqualityComparer QuaternionEqualityComparer Vector2EqualityComparer Vector3EqualityComparer Vector4EqualityComparer Use these classes to compare two objects of the same type for equality within the range of a given tolerance using NUnit or custom constraints . Call Instance to apply the default calculation error value to the comparison. To set a specific error value, instantiate a new comparer object using a one argument constructor ctor(float error). Static properties Syntax Description Instance A singleton instance of the comparer with a predefined default error value. Constructors Syntax Description ctor(float error) Creates an instance of comparer with a custom error value.allowedError. The relative error to be considered while comparing two values. Public methods Syntax Description bool Equals(T expected, T actual); Compares the actual and expected objects for equality using a custom comparison mechanism. Returns true if expected and actual objects are equal, otherwise it returns false."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-yield-instructions.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-yield-instructions.html",
    "title": "Custom yield instructions | Cacher Game",
    "summary": "Custom yield instructions By implementing this interface below, you can define custom yield instructions in Edit Mode tests. IEditModeTestYieldInstruction In an Edit Mode test, you can use IEditModeTestYieldInstruction interface to implement your own instruction. There are also a couple of commonly used implementations available: EnterPlayMode ExitPlayMode RecompileScripts WaitForDomainReload Example [UnityTest] public IEnumerator PlayOnAwakeDisabled_DoesntPlayWhenEnteringPlayMode() { var videoPlayer = PrefabUtility.InstantiatePrefab(m_VideoPlayerPrefab.GetComponent<VideoPlayer>()) as VideoPlayer; videoPlayer.playOnAwake = false; yield return new EnterPlayMode(); var videoPlayerGO = GameObject.Find(m_VideoPlayerPrefab.name); Assert.IsFalse(videoPlayerGO.GetComponent<VideoPlayer>().isPlaying); yield return new ExitPlayMode(); Object.DestroyImmediate(GameObject.Find(m_VideoPlayerPrefab.name)); } Properties Syntax Description bool ExpectDomainReload Returns true if the instruction expects a domain reload to occur. bool ExpectedPlaymodeState Returns true if the instruction expects the Unity Editor to be in Play Mode. Methods Syntax Description IEnumerator Perform() Used to define multi-frame operations performed when instantiating a yield instruction. EnterPlayMode Implements IEditModeTestYieldInstruction. Creates a yield instruction to enter Play Mode. When creating an Editor test that uses the UnityTest attribute, use this to trigger the Editor to enter Play Mode. Throws an exception if the Editor is already in Play Mode or if there is a script compilation error. ExitPlayMode Implements IEditModeTestYieldInstruction. A new instance of the class is a yield instruction to exit Play Mode. Throws an exception if the Editor is not in Play Mode."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-execution-settings.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-execution-settings.html",
    "title": "ExecutionSettings | Cacher Game",
    "summary": "ExecutionSettings The ExecutionSettings is a set of filters and other settings provided when running a set of tests from the TestRunnerApi. Constructors Syntax Description ExecutionSettings(params Filter[] filtersToExecute) Creates an instance with a given set of filters, if any. Fields Syntax Description Filter[] filters A collection of Filters to execute tests on. ITestRunSettings overloadTestRunSettings An instance of ITestRunSettings to set up before running tests on a Player. bool runSynchronously If true, the call to Execute() will run tests synchronously, guaranteeing that all tests have finished running by the time the call returns. Note that this is only supported for EditMode tests, and that tests which take multiple frames (i.e. [UnityTest] tests, or tests with [UnitySetUp] or [UnityTearDown] scaffolding) will be filtered out. 'int playerHeartbeatTimeout' The time, in seconds, the editor should wait for heartbeats after starting a test run on a player. This defaults to 10 minutes."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-filter.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-filter.html",
    "title": "Filter | Cacher Game",
    "summary": "Filter The filter class provides the TestRunnerApi with a specification of what tests to run when running tests programmatically. Fields Syntax Description TestMode testMode An enum flag that specifies if Edit Mode or Play Mode tests should run. Applying both Edit Mode and Play Mode is currently not supported when running tests from the API. string[] testNames The full name of the tests to match the filter. This is usually in the format FixtureName.TestName. If the test has test arguments, then include them in parenthesis. E.g. MyTestClass2.MyTestWithMultipleValues(1). string[] groupNames The same as testNames, except that it allows for Regex. This is useful for running specific fixtures or namespaces. E.g. \"^MyNamespace\\\\.\" Runs any tests where the top namespace is MyNamespace. string[] categoryNames The name of a Category to include in the run. Any test or fixtures runs that have a Category matching the string. string[] assemblyNames The name of assemblies included in the run. That is the assembly name, without the .dll file extension. E.g., MyTestAssembly. BuildTarget? targetPlatform The BuildTarget platform to run the test on. If set to null, then the Editor is the target for the tests."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-icallbacks.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-icallbacks.html",
    "title": "ICallbacks | Cacher Game",
    "summary": "ICallbacks An interface for receiving callbacks when running tests. All test runs invoke the callbacks until the next domain reload. The RunStarted method runs when the whole test run starts. Then the TestStarted method runs with information about the tests it is about to run on an assembly level. Afterward, it runs on a test fixture level and then on the individual test. If the test is a parameterized test, then it is also invoked for each parameter combination. After each part of the test tree have completed running, the corresponding TestFinished method runs with the test result. At the end of the run, the RunFinished event runs with the test result. An extended version of the callback, IErrorCallbacks, extends this ICallbacks to receive calls when a run fails due to a build error. Public methods Syntax Description void RunStarted(ITestAdaptor testsToRun) Invoked when the test run starts. The ITestAdaptor represents the tree of tests to run. void RunFinished(ITestResultAdaptor result) Invoked when the test run finishes. The ITestResultAdaptor represents the results of the set of tests that have run. void TestStarted(ITestAdaptor test) Invoked on each node of the test tree, as that part of the tree starts to run. void TestFinished(ITestResultAdaptor result) Invoked on each node of the test tree once that part of the test tree has finished running. The ITestResultAdaptor represents the results of the current node of the test tree. Example An example that sets up a listener on the API. The listener prints the number of failed tests after the run has finished: public void SetupListeners() { var api = ScriptableObject.CreateInstance<TestRunnerApi>(); api.RegisterCallbacks(new MyCallbacks()); } private class MyCallbacks : ICallbacks { public void RunStarted(ITestAdaptor testsToRun) { } public void RunFinished(ITestResultAdaptor result) { Debug.Log(string.Format(\"Run finished {0} test(s) failed.\", result.FailCount)); } public void TestStarted(ITestAdaptor test) { } public void TestFinished(ITestResultAdaptor result) { } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-ierror-callbacks.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-ierror-callbacks.html",
    "title": "IErrorCallbacks | Cacher Game",
    "summary": "IErrorCallbacks An extended version of the ICallbacks, which get invoked if the test run fails due to a build error or if any IPrebuildSetup has a failure. Public methods Syntax Description void OnError(string message) The error message detailing the reason for the run to fail."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-itest-adaptor.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-itest-adaptor.html",
    "title": "ITestAdaptor | Cacher Game",
    "summary": "ITestAdaptor ITestAdaptor is a representation of a node in the test tree implemented as a wrapper around the NUnit ITest interface. Properties Syntax Description string Id The ID of the test tree node. The ID can change if you add new tests to the suite. Use UniqueName, if you want to have a more permanent point of reference. string Name The name of the test. E.g., MyTest. string FullName The full name of the test. E.g., MyNamespace.MyTestClass.MyTest. int TestCaseCount The total number of test cases in the node and all sub-nodes. bool HasChildren Whether the node has any children. bool IsSuite Whether the node is a test suite/fixture. IEnumerable<ITestAdaptor> Children The child nodes. ITestAdaptor Parent The parent node, if any. int TestCaseTimeout The test case timeout in milliseconds. Note that this value is only available on TestFinished. ITypeInfo TypeInfo The type of test class as an NUnit ITypeInfo. If the node is not a test class, then the value is null. IMethodInfo Method The Nunit IMethodInfo of the test method. If the node is not a test method, then the value is null. string[] Categories An array of the categories applied to the test or fixture. bool IsTestAssembly Whether the node represents a test assembly. RunState RunState The run state of the test node. Either NotRunnable, Runnable, Explicit, Skipped, or Ignored. string Description The description of the test. string SkipReason The skip reason. E.g., if ignoring the test. string ParentId The ID of the parent node. string ParentFullName The full name of the parent node. string UniqueName A unique generated name for the test node. E.g., Tests.dll/MyNamespace/MyTestClass/[Tests][MyNamespace.MyTestClass.MyTest]. string ParentUniqueName A unique name of the parent node. E.g., Tests.dll/MyNamespace/[Tests][MyNamespace.MyTestClass][suite]. int ChildIndex The child index of the node in its parent. TestMode TestMode The mode of the test. Either Edit Mode or Play Mode. Note: Some properties are not available when receiving the test tree as a part of a test result coming from a standalone Player, such as TypeInfo and Method."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-itest-result-adaptor.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-itest-result-adaptor.html",
    "title": "ITestResultAdaptor | Cacher Game",
    "summary": "ITestResultAdaptor The ITestResultAdaptor is the representation of the test results for a node in the test tree implemented as a wrapper around the NUnit ITest interface. Properties Syntax Description ITestAdaptor Test The test details of the test result tree node as a TestAdaptor. string Name The name of the test node. string FullName Gets the full name of the test result string ResultState The state of the result as a string. E.g., Success, Skipped, Failure, Explicit, Cancelled. TestStatus TestStatus The status of the test as an enum. Either Inconclusive, Skipped, Passed, or Failed. double Duration Gets the elapsed time for running the test in seconds. DateTime StartTime Gets or sets the time the test started running. DateTime EndTime Gets or sets the time the test finished running. string Message Gets the message associated with a test failure or with not running the test string StackTrace Gets any stack trace associated with an error or failure. Not available in the Compact Framework 1.0. int AssertCount Gets the number of asserts that ran during the test and all its children. int FailCount Gets the number of test cases that failed when running the test and all its children. int PassCount Gets the number of test cases that passed when running the test and all its children. int SkipCount Gets the number of test cases skipped when running the test and all its children. int InconclusiveCount Gets the number of test cases that were inconclusive when running the test and all its children. bool HasChildren Indicates whether this result has any child results. Accessing HasChildren should not force the creation of the Children collection in classes implementing this interface. IEnumerable<ITestResultAdaptor> Children Gets the collection of child results. string Output Gets any text output written to this result. TNode ToXml Gets the test results as an NUnit XML node. Use this to save the results to an XML file."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-itest-run-settings.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-itest-run-settings.html",
    "title": "ITestRunSettings | Cacher Game",
    "summary": "ITestRunSettings ITestRunSettings lets you set any of the global settings right before building a Player for a test run and then reverts the settings afterward. ITestRunSettings implements IDisposable, and runs after building the Player with tests. Public methods Syntax Description void Apply() A method called before building the Player. void Dispose() A method called after building the Player or if the build failed. Example The following example sets the iOS SDK version to be the simulator SDK and resets it to the original value after the run. public class MyTestSettings : ITestRunSettings { private iOSSdkVersion originalSdkVersion; public void Apply() { originalSdkVersion = PlayerSettings.iOS.sdkVersion; PlayerSettings.iOS.sdkVersion = iOSSdkVersion.SimulatorSDK; } public void Dispose() { PlayerSettings.iOS.sdkVersion = originalSdkVersion; } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-outerunitytestaction.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-outerunitytestaction.html",
    "title": "OuterUnityTestAction | Cacher Game",
    "summary": "OuterUnityTestAction OuterUnityTestAction is a wrapper outside of the tests, which allows for any tests with this attribute to run code before and after the tests. This method allows for yielding commands in the same way as UnityTest. The attribute must inherit the NUnit attribute and implement IOuterUnityTestAction. OuterUnityTestAction Example using System.Collections; using NUnit.Framework; using NUnit.Framework.Interfaces; using UnityEngine; using UnityEngine.TestTools; public class MyTestClass { [UnityTest, MyOuterActionAttribute] public IEnumerator MyTestInsidePlaymode() { Assert.IsTrue(Application.isPlaying); yield return null; } } public class MyOuterActionAttribute : NUnitAttribute, IOuterUnityTestAction { public IEnumerator BeforeTest(ITest test) { yield return new EnterPlayMode(); } public IEnumerator AfterTest(ITest test) { yield return new ExitPlayMode(); } } Execution order Unity outer test action is not rerun on domain reload but non-Unity action attributes are: Note: Some browsers do not support SVG image files. If the image above does not display properly (for example, if you cannot see any text), please try another browser, such as Google Chrome or Mozilla Firefox. Test actions with domain reload example using NUnit.Framework.Interfaces; public class TestActionOnSuiteAttribute : NUnitAttribute, ITestAction { public void BeforeTest(ITest test) { Debug.Log(\"TestAction OnSuite BeforeTest\"); } public void AfterTest(ITest test) { } public ActionTargets Targets { get { return ActionTargets.Suite; } } } public class TestActionOnTestAttribute : NUnitAttribute, ITestAction { public void BeforeTest(ITest test) { Debug.Log(\"TestAction OnTest BeforeTest\"); } public void AfterTest(ITest test) { Debug.Log(\"TestAction OnTest AfterTest\"); } public ActionTargets Targets { get { return ActionTargets.Test; } } } public class OuterTestAttribute : NUnitAttribute, IOuterUnityTestAction { public IEnumerator BeforeTest(ITest test) { Debug.Log(\"OuterTestAttribute BeforeTest\"); yield return null; } public IEnumerator AfterTest(ITest test) { Debug.Log(\"OuterTestAttribute AfterTest\"); yield return null; } } [TestActionOnSuite] public class ActionOrderTestBase { [Test, OuterTest, TestActionOnTest] public void UnitTest() { Debug.Log(\"Test\"); } [UnityTest, OuterTest, TestActionOnTest] public IEnumerator UnityTestWithDomainReload() { Log(\"Test part 1\"); yield return new EnterPlayMode(); //Domain reload yield return new ExitPlayMode(); Log(\"Test part 2\"); } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-recompile-scripts.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-recompile-scripts.html",
    "title": "RecompileScripts | Cacher Game",
    "summary": "RecompileScripts RecompileScripts is an IEditModeTestYieldInstruction that you can yield in Edit Mode tests. It lets you trigger a recompilation of scripts in the Unity Editor. Constructors Syntax Description RecompileScripts(bool expectScriptCompilation = true, bool expectScriptCompilationSuccess = true) Creates a new instance of the RecompileScripts yield instruction. The parameter expectScriptCompilation indicates if you expect a script compilation to start (defaults to true). If a script compilation does not start and expectScriptCompilation is true, then it throws an exception. Example [UnitySetUp] public IEnumerator SetUp() { using (var file = File.CreateText(\"Assets/temp/myScript.cs\")) { file.Write(\"public class ATempClass { }\"); } AssetDatabase.Refresh(); yield return new RecompileScripts(); }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-setup-and-cleanup.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-setup-and-cleanup.html",
    "title": "Setup and cleanup at build time | Cacher Game",
    "summary": "Setup and cleanup at build time In some cases, it is relevant to perform changes to Unity or the file system before building the tests. In the same way, it may be necessary to clean up such changes after the test run. In response to such needs, you can incorporate the pre-build setup and post-build cleanup concepts into your tests in one of the following ways: Via implementation of IPrebuildSetup and IPostBuildCleanup interfaces by a test class. Via applying the PrebuildSetup attribute and PostBuildCleanup attribute on your test class, one of the tests or the test assembly, providing a class name that implements the corresponding interface as an argument (fx [PrebuildSetup(\"MyTestSceneSetup\")]). Execution order All setups run in a deterministic order one after another. The first to run are the setups defined with attributes. Then any test class implementing the interface runs, in alphabetical order inside their namespace, which is the same order as the tests run. Note: Cleanup runs right away for a standalone test run, but only after related tests run in the Unity Editor. PrebuildSetup and PostBuildCleanup Both PrebuildSetup and PostBuildCleanup attributes run if the respective test or test class is in the current test run. The test is included either by running all tests or setting a filter that includes the test. If multiple tests reference the same pre-built setup or post-build cleanup, then it only runs once. IPrebuildSetup Implement this interface if you want to define a set of actions to run as a pre-build step. Public methods Syntax Description void Setup() Implement this method to call actions automatically before the build process. IPostBuildCleanup Implement this interface if you want to define a set of actions to execute as a post-build step. Cleanup runs right away for a standalone test run, but only after all the tests run within the Editor. Public methods Syntax Description void Cleanup() Implement this method to specify actions that should run as a post-build cleanup step. Example [TestFixture] public class CreateSpriteTest : IPrebuildSetup { Texture2D m_Texture; Sprite m_Sprite; public void Setup() { #if UNITY_EDITOR var spritePath = \"Assets/Resources/Circle.png\"; var ti = UnityEditor.AssetImporter.GetAtPath(spritePath) as UnityEditor.TextureImporter; ti.textureCompression = UnityEditor.TextureImporterCompression.Uncompressed; ti.SaveAndReimport(); #endif } [SetUp] public void SetUpTest() { m_Texture = Resources.Load<Texture2D>(\"Circle\"); } [Test] public void WhenNullTextureIsPassed_CreateShouldReturnNullSprite() { // Check with Valid Texture. LogAssert.Expect(LogType.Log, \"Circle Sprite Created\"); Sprite.Create(m_Texture, new Rect(0, 0, m_Texture.width, m_Texture.height), new Vector2(0.5f, 0.5f)); Debug.Log(\"Circle Sprite Created\"); // Check with NULL Texture. Should return NULL Sprite. m_Sprite = Sprite.Create(null, new Rect(0, 0, m_Texture.width, m_Texture.height), new Vector2(0.5f, 0.5f)); Assert.That(m_Sprite, Is.Null, \"Sprite created with null texture should be null\"); } } Tip: Use #if UNITY_EDITOR if you want to access Editor only APIs, but the setup/cleanup is inside a Play Mode assembly."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-test-runner-api.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-test-runner-api.html",
    "title": "TestRunnerApi | Cacher Game",
    "summary": "TestRunnerApi The TestRunnerApi retrieves and runs tests programmatically from code inside the project, or inside other packages. TestRunnerApi is a ScriptableObject. You can initialize the API like this: var testRunnerApi = ScriptableObject.CreateInstance<TestRunnerApi>(); Note: You can subscribe and receive test results in one instance of the API, even if the run starts from another instance. The TestRunnerApi supports the following workflows: How to run tests programmatically How to get test results How to retrieve the list of tests Public methods Syntax Description void Execute(ExecutionSettings executionSettings) Starts a test run with a given set of ExecutionSettings. void RegisterCallbacks(ICallbacks testCallbacks, int priority = 0) Sets up a given instance of ICallbacks to be invoked on test runs. void UnregisterCallbacks(ICallbacks testCallbacks) Unregisters an instance of ICallbacks to no longer receive callbacks from test runs. void RetrieveTestList(TestMode testMode, Action<ITestAdaptor> callback) Retrieve the full test tree as ITestAdaptor for a given test mode."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-test-utils.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-test-utils.html",
    "title": "Test Utils | Cacher Game",
    "summary": "Test Utils This contains test utility functions for float value comparison and creating primitives. Static Methods Syntax Description bool AreFloatsEqual(float expected, float actual, float allowedRelativeError) Relative epsilon comparison of two float values for equality. allowedRelativeError is the relative error to be used in relative epsilon comparison. The relative error is the absolute error divided by the magnitude of the exact value. Returns true if the actual value is equivalent to the expected value. bool AreFloatsEqualAbsoluteError(float expected, float actual, float allowedAbsoluteError) Compares two floating point numbers for equality under the given absolute tolerance. allowedAbsoluteError is the permitted error tolerance. Returns true if the actual value is equivalent to the expected value under the given tolerance. GameObject CreatePrimitive( type) Creates a GameObject with a primitive MeshRenderer. This is an analogue to the GameObject.CreatePrimitive, but creates a primitive MeshRenderer with a fast Shader instead of the default built-in Shader, optimized for testing performance. type is the primitive type of the required GameObject. Returns a GameObject with primitive MeshRenderer and Collider. Example [TestFixture] class UtilsTests { [Test] public void CheckThat_FloatsAreEqual() { float expected = 10e-8f; float actual = 0f; float allowedRelativeError = 10e-6f; Assert.That(Utils.AreFloatsEqual(expected, actual, allowedRelativeError), Is.True); } [Test] public void CheckThat_FloatsAreAbsoluteEqual() { float expected = 0f; float actual = 10e-6f; float error = 10e-5f; Assert.That(Utils.AreFloatsEqualAbsoluteError(expected, actual, error), Is.True); } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-tests-monobehaviour.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-tests-monobehaviour.html",
    "title": "MonoBehaviour tests | Cacher Game",
    "summary": "MonoBehaviour tests MonoBehaviourTest is a coroutine and a helper for writing MonoBehaviour tests. Yield a MonoBehaviourTest when using the UnityTest attribute to instantiate the MonoBehaviour you wish to test and wait for it to finish running. Implement the IMonoBehaviourTest interface on the MonoBehaviour to state when the test completes. Example [UnityTest] public IEnumerator MonoBehaviourTest_Works() { yield return new MonoBehaviourTest<MyMonoBehaviourTest>(); } public class MyMonoBehaviourTest : MonoBehaviour, IMonoBehaviourTest { private int frameCount; public bool IsTestFinished { get { return frameCount > 10; } } void Update() { frameCount++; } } MonoBehaviourTest<T> This is a wrapper that allows running tests on MonoBehaviour scripts. Inherits from CustomYieldInstruction. Properties Syntax Description T component A MonoBehaviour component created for the test and attached to the test’s GameObject. GameObject gameObject A GameObject created as a container for the test component. bool keepWaiting (Inherited) Returns true if the test is not finished yet, which keeps the coroutine suspended. IMonoBehaviourTest An interface implemented by a MonoBehaviour test. Properties Syntax Description bool IsTestFinished Indicates when the test is considered finished."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-tests-parameterized.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-tests-parameterized.html",
    "title": "Parameterized tests | Cacher Game",
    "summary": "Parameterized tests For data-driven testing, you may want to have your tests parameterized. You may use both the NUnit attributes TestCase and ValueSource with a unit test. Note: With UnityTest it is recommended to use ValueSource since TestCase is not supported. Example static int[] values = new int[] { 1, 5, 6 }; [UnityTest] public IEnumerator MyTestWithMultipleValues([ValueSource(\"values\")] int value) { yield return null; }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-unitysetup-and-unityteardown.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-unitysetup-and-unityteardown.html",
    "title": "UnitySetUp and UnityTearDown | Cacher Game",
    "summary": "UnitySetUp and UnityTearDown The UnitySetUp and UnityTearDown attributes are identical to the standard SetUp and TearDown attributes, with the exception that they allow for yielding instructions. The UnitySetUp and UnityTearDown attributes expect a return type of IEnumerator. UnitySetUp and UnityTeardown example public class SetUpTearDownExample { [UnitySetUp] public IEnumerator SetUp() { yield return new EnterPlayMode(); } [Test] public void MyTest() { Debug.Log(\"This runs inside playmode\"); } [UnityTearDown] public IEnumerator TearDown() { yield return new ExitPlayMode(); } } Execution order UnitySetUp and UnityTearDown can be used with either the Test or UnityTest test attributes. In both cases the relative execution order of Unity and non-Unity SetUp and TearDown attributes is the same. The only difference is that a UnityTest allows for yielding instructions during the test that can result in a domain reload, in which case the non-Unity SetUp and TearDown methods are re-run before proceeding to the second part of the test. Note: Some browsers do not support SVG image files. If the image above does not display properly (for example, if you cannot see any text), please try another browser, such as Google Chrome or Mozilla Firefox. Base and Derived classes The term base in the execution order denotes a base class from which a test class inherits. UnitySetUp and UnityTearDown follow the same pattern as NUnit SetUp and TearDown attributes in determining execution order between base classes and their derivatives. SetUp methods are called on base classes first, and then on derived classes. TearDown methods are called on derived classes first, and then on the base class. See the NUnit Documentation for more details. Base and Derived class example public class BaseClass { [OneTimeSetUp] public void OneTimeSetUp() { Debug.Log(\"OneTimeSetUp Base\"); } [SetUp] public void SetUp() { Debug.Log(\"SetUp Base\"); } [UnitySetUp] public IEnumerator UnitySetUp() { Debug.Log(\"UnitySetup Base\"); yield return null; } [TearDown] public void TearDown() { Debug.Log(\"TearDown Base\"); } [UnityTearDown] public IEnumerator UnityTearDown() { Debug.Log(\"UnityTearDown Base\"); yield return null; } } public class DerivedClass: BaseClass { [OneTimeSetUp] public new void OneTimeSetUp() { Debug.Log(\"OneTimeSetUp\"); } [SetUp] public new void SetUp() { Debug.Log(\"SetUp\"); } [UnitySetUp] public new IEnumerator UnitySetUp() { Debug.Log(\"UnitySetup\"); yield return null; } [Test] public void UnitTest() { Debug.Log(\"Test\"); } [UnityTest] public IEnumerator UnityTest() { Debug.Log(\"UnityTest before yield\"); yield return null; Debug.Log(\"UnityTest after yield\"); } [TearDown] public new void TearDown() { Debug.Log(\"TearDown\"); } [UnityTearDown] public new IEnumerator UnityTearDown() { Debug.Log(\"UnityTearDown\"); yield return null; } [OneTimeTearDown] public void OneTimeTearDown() { Debug.Log(\"OneTimeTearDown\"); } } Domain reload example public class BaseClass { [OneTimeSetUp] public void OneTimeSetUp() { Debug.Log(\"OneTimeSetUp Base\"); } [SetUp] public void SetUp() { Debug.Log(\"SetUp Base\"); } [UnitySetUp] public IEnumerator UnitySetUp() { Debug.Log(\"UnitySetup Base\"); yield return null; } [TearDown] public void TearDown() { Debug.Log(\"TearDown Base\"); } [UnityTearDown] public IEnumerator UnityTearDown() { Debug.Log(\"UnityTearDown Base\"); yield return null; } } public class DerivedClass: BaseClass { [OneTimeSetUp] public new void OneTimeSetUp() { Debug.Log(\"OneTimeSetUp\"); } [SetUp] public new void SetUp() { Debug.Log(\"SetUp\"); } [UnitySetUp] public new IEnumerator UnitySetUp() { Debug.Log(\"UnitySetup\"); yield return null; } [Test] public void UnitTest() { Debug.Log(\"Test\"); } [UnityTest] public IEnumerator UnityTest() { Debug.Log(\"UnityTest before yield\"); yield return new EnterPlayMode(); //Domain reload happening yield return new ExitPlayMode(); Debug.Log(\"UnityTest after yield\"); } [TearDown] public new void TearDown() { Debug.Log(\"TearDown\"); } [UnityTearDown] public new IEnumerator UnityTearDown() { Debug.Log(\"UnityTearDown\"); yield return null; } [OneTimeTearDown] public void OneTimeTearDown() { Debug.Log(\"OneTimeTearDown\"); } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-wait-for-domain-reload.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-wait-for-domain-reload.html",
    "title": "WaitForDomainReload | Cacher Game",
    "summary": "WaitForDomainReload WaitForDomainReload is an IEditModeTestYieldInstruction that you can yield in Edit Mode tests. It delays the execution of scripts until after an incoming domain reload. If the domain reload results in a script compilation failure, then it throws an exception. Constructors Syntax Description WaitForDomainReload() Create a new instance of the WaitForDomainReload yield instruction. Example [UnitySetUp] public IEnumerator SetUp() { File.Copy(\"Resources/MyDll.dll\", @\"Assets/MyDll.dll\", true); // Trigger a domain reload. AssetDatabase.Refresh(); yield return new WaitForDomainReload(); }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/resources.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/resources.html",
    "title": "Resources | Cacher Game",
    "summary": "Resources Here you can find other related resources to the Unity Test Framework: Performance Benchmarking in Unity: How to Get Started [Blog] Testing Test-Driven Development with the Unity Test Runner [Blog]"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-create-playmode-test.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-create-playmode-test.html",
    "title": "Workflow: How to create a Play Mode test | Cacher Game",
    "summary": "Workflow: How to create a Play Mode test To create a Play Mode test, you can follow a similar process as when you want to create an Edit Mode test. Start with switching to the PlayMode tab in the Test Runner window. Create a test assembly folder (see How to create a new test assembly). The folder name is Tests by default (or Tests 1, Tests 2, etc. if the preceding name is already in use). Note: If you don’t see the Create Play Mode Test Assembly Folder button enabled, make sure that in the Project window you navigate out of a folder with another .asmdef (such as one for Edit Mode tests). When you have your Play Mode test assembly folder ready, then create your Play Mode test. Note: Pre-defined Unity assemblies (such as Assembly-CSharp.dll) do not reference your new assembly. References and builds Unity Test Framework adds a reference to TestAssemblies in the Assembly Definition file but does not include any other references (e.g., to other scripting assemblies within the Unity project). To test other assemblies, you need to add them to the assembly definition yourself. For how to add assembly references, see Assembly Definition. We recommend putting tests into separate assemblies and using assembly definitions files. This way you will have more control over which assemblies need to reference test related dlls. Playmode build with TestsAssemblies Note: Enabling Play Mode tests for all assemblies includes additional assemblies in your project build, which can increase the project’s size as well as the build time. The supported workflow is to exclude TestAssemblies from Player builds. You can choose to enable playmode tests for all assemblies to run your tests inside the Editor, but this should be disabled again before building the Player to prevent build failures. To enable play mode tests for all assemblies you need to set the flag playModeTestRunnerEnabled to 1 inside the ProjectSettings/ProjectSetting.asset file in your project. Before building the Player you must disable it again, either by setting the flag back to 0 or by clicking on Disable playmode tests for all assemblies in the dropdown menu, accessed by right-clicking on the Test Runner window tab. For more information, see Edit Mode vs. Play Mode tests."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-create-test-assembly.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-create-test-assembly.html",
    "title": "Workflow: How to create a new test assembly | Cacher Game",
    "summary": "Workflow: How to create a new test assembly Unity Test Framework looks for a test inside any assembly that references NUnit. We refer to such assemblies as TestAssemblies. The Test Runner UI can help you set up TestAssemblies. Play Mode and Edit Mode tests need to be in separate assemblies. In the Test Runner window, you will see an EditMode tab enabled by default, as well as a Create EditMode Test Assembly Folder button. Click the button to create a Tests folder with a respective .asmdef file by default. Change the name of the new Assembly Definition, if necessary, and press Enter to accept it. In the Inspector window, it should have references to nunit.framework.dll*,* UnityEngine.TestRunner, and UnityEditor.TestRunner assemblies, as well as Editor preselected as a target platform. Note: The UnityEditor.TestRunner reference is only available for Edit Mode tests."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-create-test.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-create-test.html",
    "title": "Workflow: How to create a test | Cacher Game",
    "summary": "Workflow: How to create a test To create a test, do the following: Create your Test assembly folder and select it in the Project window. Click the button Create Test Script in current folder option in the Test Runner window. It creates a NewTestScript.cs file in the Tests folder. Change the name of the script, if necessary, and press Enter to accept it. Now you’ll see two sample tests in the Test Runner window: Now you can open the tests in your favorite script editor. You can also create test scripts by navigating to Assets > Create > Testing > C# Test Script, unless adding a test script would result in a compilation error. Note: Unity does not include TestAssemblies (NUnit, Unity Test Framework, and user script assemblies) when using the normal build pipeline, but does include them when using Run on <Platform> in the Test Runner window. Create additional tests To create another set of tests: In the Project window, select Assets. Create a new test assembly folder (menu: Assets > Create> Testing > Tests Assembly Folder). In the Project window, select the new folder. Create a new test script in the folder (menu: Assets > Create > Testing > C# Test Script). The assembly definition is assigned the same name as your new asset. To rename it, change the Name in the Insepctor window. Assembly definition names must be unique. Note: Changing the file name of the assembly definition file does not affect the value of the Name property in the file. Use the Inspector window to make sure the name is properly changed. By default Any Platform is preselected as the target platform for the new assembly, which means the test script appears as a PlayMode test in the TestRunner window. To change it to an EditMode test, in the Inspector window select Editor only under Platforms. New assemblies created through the Assets menu should automatically include references to UnityEngine.TestRunner and UnityEditor.TestRunner. If these references are missing, add them in the Inspector window under Assembly Definition References: Filters If you have a lot of tests, and you only want to view/run a sub-set of them, you can filter them in three ways (see image above): Type in the search box in the top left Click a test class or fixture (such as NewTestScript in the image above) Click one of the test result icon buttons in the top right For more information, see Edit Mode vs. Play Mode tests."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-run-playmode-test-standalone.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-run-playmode-test-standalone.html",
    "title": "Workflow: How to run a Play Mode test in player | Cacher Game",
    "summary": "Workflow: How to run a Play Mode test in player If you run a Play Mode test in the same way as an Editor test, it runs inside the Unity Editor. You can also run Play Mode tests on specific platforms. Click Run all in the player to build and run your tests on the currently active target platform. Note: Your current platform displays in brackets on the button. For example, in the image above, the button reads Run all in player (StandaloneWindows), because the current platform is Windows. The target platform is always the current Platform selected in Build Settings (menu: File > Build Settings). The test result displays in the build once the test completes: The application running on the platform reports back the test results to the Editor UI then displays the executed tests and shuts down. To make sure you receive the test results from the Player on your target platform back into the Editor that’s running the test, both should be on the same network. Note: Some platforms do not support shutting down the application with Application.Quit, so it will continue running after reporting the test results. If Unity cannot instantiate the connection, you can see the tests succeed in the running application. Running tests on platforms with arguments, in this state, does not provide XML test results. For more information, see Edit Mode vs Play Mode tests."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-run-test.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-run-test.html",
    "title": "Workflow: How to run a test | Cacher Game",
    "summary": "Workflow: How to run a test To run a test, you need to double-click on the test or test fixture name in the Test Runner window. You can also use one of the buttons on the top bar, Run All or Run Selected. As a result, you’ll see the test status icon changed and a counter in the top right corner updated: You may also use a context menu option Run, right-click on any item in the test tree to have it (with all its children if any) run. Run tests within Rider It is possible to run unit tests in the Unity Test Framework directly from JetBrains Rider. For more information, see the JetBrains official documentation and their blog post Run Unity tests in Rider 2018.1."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/LICENSE.html",
    "title": "| Cacher Game",
    "summary": "Test Framework copyright © 2020 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/CHANGELOG.html",
    "title": "Changelog | Cacher Game",
    "summary": "Changelog All notable changes to the Code Coverage package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. [1.2.5] - 2023-12-20 Fixes Fixed failing to generate code coverage for assemblies whose name starts with 'system' (case COV-38). Fixed results xml file not been correctly stored under the EditMode folder if it is written after a domain reload (case COV-36). [1.2.4] - 2023-06-02 Fixes Fixed failing to gather code coverage for normal methods in generic classes (case COV-27). Documentation: Corrected Settings.json path in useProjectSettings section in -coverageOptions (case COV-26). Make sure Auto Generate Report defaults to true when running from the command line (case COV-25). [1.2.3] - 2023-04-14 Fixes Fixed failing to gather code coverage for generic methods (case COV-17). Improvements Added filtersFromFile in -coverageOptions for batchmode. This allows specifying an external Json file which contains path and assembly filtering rules. When this file contains relative paths, the sourcePaths option can be used to specify the source directories. Note: The pathFiltersFromFile option will be deprecated in the next package major release. Please use the new filtersFromFile option instead. Make sure --burst-disable-compilation is expected to be passed with two dashes, unlike other editor command line options. [1.2.2] - 2022-11-18 Fixes Temporary fix for the Test Framework 1.3 issue where the RunFinished callback is not called when running from the command line and there is a domain reload (case DSTR-692). Improvements Reduced the number of logs for the default Verbosity:Info. Added Uncoverable lines definition in How to interpret the results page in the documentation. Updated documentation to match version 1.2.2. [1.2.1] - 2022-10-27 Fixes Fixed compatibility with Test Framework package version 1.3. Improvements A single file summary version of the report is now generated in Json format, in addition to the XML and Markdown formats. Added a warning when an invalid coverage option is passed in -coverageOptions in batchmode. [1.2.0] - 2022-08-01 Fixes Ensure assemblies are removed from the Included Assemblies field if they no longer exist (case 1318668). Ensure hidden sequence points are ignored (case 1372305). Changes Updated Report Generator to version 5.0.4. Updated the UI of the Code Coverage window moving the action buttons into a toolbar at the top. Renamed assemblyFilters aliases in batchmode; <user> was renamed to <assets> and <project> was renamed to <all>. Replaced pathStrippingPatterns with pathReplacePatterns in batchmode. The pathReplacePatterns option allows stripping and replacing specific sections from the paths that are stored in the coverage results xml files. See the Upgrade guide if upgrading to Code Coverage package version 1.2. Improvements The size of the coverage result files and the Code Coverage session duration have been optimized. At the start of the session a coverage xml result file is generated which includes all the lines but with zero coverage. The following coverage xml result files that are generated within a Code Coverage session include only the coverage data of the visited lines. Added Help IconButton in the toolbar in the Code Coverage window. Updated the mechanic for opening the containing folder, change the location or reset to the default location for Results Location and Report History Location. Refactored the Code Coverage window UI to include a new Report Options section and removing the word 'Generate' from the options. Introduced new selection buttons under the Included Assemblies dropdown in the Code Coverage window; use the All button to select all the assemblies in the project. Use the Assets button to select only the assemblies under the Assets folder. Use the Packages button to select only the Packages' assemblies. If searching, the buttons will apply only to the assemblies visible in the list. Updated What's new and Upgrade guide pages in the documentation. Added Using relative paths in path filters section in documentation. Updated the editor and console logs; added information about the assembly and path filters, improved coverage session logs. Improved the progress bars for Writing coverage results and Generating the report. Added an icon for the Code Coverage window. Updated documentation to match version 1.2.0. Features Added Pause Recording and Resume Recording buttons in the toolbar in the Code Coverage window. Added Log Verbosity Level setting in the Code Coverage window which allows setting the verbosity level for the editor and console logs. Added Additional Reports option in the Code Coverage window which if checked SonarQube, Cobertura and LCOV reports will be generated. Added generateAdditionalReports in -coverageOptions for batchmode. Added Test Runner References report option in the Code Coverage window which if checked includes test references to the generated coverage results and enables the Coverage by test methods section in the HTML report, allowing you to see how each test contributes to the overall coverage. Added generateTestReferences in -coverageOptions for batchmode. Added Auto Open Report option in the Code Coverage window which if checked the coverage report will open automatically after it has been generated. Added pathFiltersFromFile in -coverageOptions for batchmode which allows specifying an external file which contains a list of path filters. When this file contains relative paths, the sourcePaths option can be used to specify the source directories. Added dontClear in -coverageOptions for batchmode which allows coverage results to be accumulated after every code coverage session. If not passed the results are cleared before a new session. For more information see Generate combined report from EditMode and PlayMode tests. When the pathFilters option or the pathFiltersFromFile option in -coverageOptions contains relative paths, the sourcePaths option can be used to specify the source directories. [1.1.1] - 2021-12-17 Fixes Ensure assemblies are removed from the Included Assemblies field if they no longer exist (case 1318668) Changes Updated Report Generator to version 4.8.13 Improvements Added Help IconButton in the Code Coverage window for Unity versions 2021.2.2f1 and above Added What's new and Upgrade guide pages in the documentation Updated documentation to match version 1.1.1 [1.1.0] - 2021-06-09 Fixes Ensure Results and History folders are created if they do not exist (case 1334551) Added support for ExcludeFromCoverage/ExcludeFromCodeCoverage for lambda expressions and yield statements (case 1338636) Added support for ExcludeFromCodeCoverage for getter/setter properties (case 1338665) -coverageOptions are only parsed when running from the command line (feedback) Changes Updated Report Generator to version 4.8.9 Improvements Implemented changes to support Test Framework package version 1.2 Logs while the Report is generated are output per message rather than at the end of the generation Do not log burst warning when --burst-disable-compilation is passed in the command line Added Ignoring tests for Code Coverage section in documentation Updated the Generate combined report from separate projects section in documentation Updated documentation to match version 1.1.0 Features Added Code Coverage session Events API to subscribe to events invoked during a Code Coverage session Added useProjectSettings in -coverageOptions for batchmode which allows using the settings specified in ProjectSettings/Settings.json Added pathStrippingPatterns in -coverageOptions for batchmode which allows stripping specific sections from the paths that are stored in the coverage results xml files Added sourcePaths in -coverageOptions for batchmode which allows specifying the source directories which contain the corresponding source code [1.0.0] - 2021-03-09 Fixes Fixed issues with Path Filtering (cases 1318896, 1318897) Improvements Selection/focus is cleared when mouse is clicked outside of the individual settings' areas Added Quickstart guide in documentation Renamed the Code Coverage Workshop sample to Code Coverage Tutorial Updated documentation and workshop to match version 1.0.0 Note: In Unity 2019 and 2020 you can enable Code Coverage in General Preferences. This was removed in Unity 2021; the user interface for managing Code Coverage is now entirely inside the Code Coverage package. [1.0.0-pre.4] - 2021-02-26 Fixes Fixed assembly version validation error due to internal libraries included in the ReportGeneratorMerged.dll (case 1312121) Changes Added Enable Code Coverage checkbox under Settings in Code Coverage window. Note: In Unity 2019 and 2020 you can enable Code Coverage in General Preferences. This was removed in Unity 2021; the user interface for managing Code Coverage is now entirely inside the Code Coverage package. The settings and options passed in the command line override/disable the settings in the Code Coverage window and relevant warnings display to indicate this Updated Report Generator to version 4.8.5 Updated documentation and workshop to match version 1.0.0-pre.4 Improvements Added verbosity in -coverageOptions for batchmode Added Generate combined report from separate projects section in documentation, under Using Code Coverage in batchmode [1.0.0-pre.3] - 2021-01-21 Fixes Updated Include Platforms to Editor only in the ReportGeneratorMerged.dll settings. Fixes an Android build error introduced in 1.0.0-pre.2 (case 1306557) [1.0.0-pre.2] - 2021-01-13 Fixes Fixed multiple reports generated in batchmode when passing generateHtmlReport in -coverageOptions without passing -runTests Changes All project assemblies are included when there are included paths specified in pathFilters but no included assemblies in assemblyFilters, when running in batchmode Updated Report Generator to version 4.8.4 Updated documentation to match version 1.0.0-pre.2 Improvements Introduced new assemblyFilters aliases in batchmode, used for referencing a group of assemblies to include or exclude. These are <user>, <project> and <packages> [1.0.0-pre.1] - 2020-11-12 1.0.0-pre.1 matches 0.4.0-preview [0.4.0-preview] - 2020-11-11 Changes Moved Code Coverage window under Window > Analysis Included Assemblies now use a single dropdown instead of an editable text field which acted as a dropdown Added CommandLineParser and removed dependency to internals in Test Framework Removed the old EditorPref workflow from CoveragePreferences Moved Generate History outside of Generate HTML Report. It is now disabled only if both Generate HTML Report and Generate Badges are not selected Updated Report Generator to version 4.7.1 Updated documentation and workshop to match version 0.4.0-preview Improvements Implemented {ProjectPath} alias in Settings.json Added a console warning when Burst Compilation is enabled and an info HelpBox with a button to disable Added Analytics to help improve the user experience Disabled Generate from Last button when there are no assemblies selected Display an info HelpBox when there are no assemblies selected Paths are now stored with forward slashes on Windows Added warning about Code Coverage not being supported currently when running PlayMode tests in standalone player Refactored code; in Utils, Filtering, ResultWriter, Window and API classes Added CoverageWindow and Filtering folders Features Added Included Paths and Excluded Paths as ReorderableLists in the Code Coverage window Added support for ExcludeFromCoverage and ExcludeFromCodeCoverage attributes Added CodeCoverage.VerbosityLevel API to set the verbosity level used in editor and console logs [0.3.1-preview] - 2020-08-03 Fixes Fixed issue where CRAP calculation was incorrect when generic methods were parsed Corrected Six Labors License copyright in Third Party Notices Changes If assemblyFilters is not specified in -coverageOptions in batchmode, include only the assemblies found under the Assets folder Updated Report Generator to version 4.6.4 [0.3.0-preview] - 2020-05-20 Fixes Make sure operator and anonymous function names are generated correctly Changes Added Generate Additional Metrics setting in the Code Coverage window and removed Cyclomatic Complexity (it is now included in Additional Metrics) Updated Report Generator to version 4.5.8 Updated documentation to match version 0.3.0-preview Improvements Added Code Coverage Workshop sample project Using the Settings Manager package to handle the serialization of project settings Added an info HelpBox when Code Optimization is set to Release mode with a button to switch to Debug mode Execute Stop Recording on the update loop, instead of the OnGUI (removes an EndLayoutGroup error) Refactored code; in OpenCoverReporter class (to reduce Cyclomatic Complexity), in CodeCoverageWindow class and others Features Added History Location and Generate History settings in the Code Coverage window Added coverageHistoryPath and generateHtmlReportHistory in -coverageOptions for batchmode Added generateAdditionalMetrics in -coverageOptions for batchmode and removed enableCyclomaticComplexity (it is now included in Additional Metrics) Added Crap Score in Additional Metrics. See How to interpret the results. [0.2.3-preview] - 2020-02-18 Fixes Included Assemblies dropdown is now resizing to the longest assembly name (1215600) When closing (selecting outside of) the Included Assemblies dropdown, input is not accidentally propagated to the Code Coverage window Improvements If more than one instance of the -coverageOptions command-line argument is specified, they will now be merged into a single instance If more than one instance of the -coverageResultsPath command-line argument is specified, only the first instance will be accepted Added Generate combined report from EditMode and PlayMode tests section in documentation, under Using Code Coverage in batchmode [0.2.2-preview] - 2019-12-11 Fixes Fixed unassigned CodeCoverageWindow.m_IncludeWarnings warning in 2019.3 Changes The default Included Assemblies are now only the assemblies found under the project's Assets folder, instead of all project assemblies Improvements After the report is generated, the file viewer window highlights the index.htm file, if Generate HTML Report is selected [0.2.1-preview] - 2019-12-04 Improvements Improved globbing for pathFilters and assemblyFilters Added new sections and examples in documentation Added confirmation dialogs when selecting Clear Data and Clear History buttons Added warning and button to switch to debug mode, when using Code Optimization in release mode in 2020.1 and above Features Added pathFilters in -coverageOptions for batchmode [0.2.0-preview] - 2019-11-13 Fixes Make sure recording coverage results are saved in the Recording folder, and starting a new recording session does not affect existing non-recording data Changes Updated Report Generator to version 4.3.6 Split documentation into separate pages Improvements Updated UX design of the Code Coverage window Make sure settings and Record button are disabled when coverage is running Make sure coverage window is disabled before unity is restarted when Enabling Code Coverage in Preferences Only parse xml files with the correct filename format when generating the report Implemented try/catch when deleting files/folders when selecting Clear Data or Clear History Handle nested classes, nested generic classes and anonymous functions Features Exposed CodeCoverage.StartRecording(), CodeCoverage.StopRecording(), CodeCoverage.PauseRecording() and CodeCoverage.UnpauseRecording() API [0.1.0-preview.3] - 2019-09-27 Improvements Passing -coverageOptions generateHtmlReport on the command line now creates a report if -runTests is not passed [0.1.0-preview.2] - 2019-09-23 Changes Updated Report Generator to version 4.2.20 Improvements Added support for correct naming of c# operators Added support for correct naming of constructors Added declaring type name as a prefix Added support for return types in method names Features Added Coverage Recording feature [0.1.0-preview.0] - 2019-03-18 This is the first release of Code Coverage Package"
  },
  "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/CodeCoverageWindow.html": {
    "href": "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/CodeCoverageWindow.html",
    "title": "Code Coverage window | Cacher Game",
    "summary": "Code Coverage window Toolbar Description Select Start Recording to start recording code coverage data and Stop Recording to stop recording. Select Pause Recording to pause recording code coverage data and Resume Recording to resume recording. The buttons are disabled if not in a Coverage Recording session. Generate Report Select Generate Report to generate a coverage report from the last set of tests that were run in the Test Runner or from the last Coverage Recording session. Note that Generate Report is disabled if no tests ran, there is no Coverage Recording data or all HTML Report, Additional Reports and Summary Badges checkboxes are unchecked. Clear Results Select Clear Results to clear the coverage data from previous test runs or from previous Coverage Recording sessions. Clear Results is disabled if the coverage results are cleared, if no tests ran, or if there is no Coverage Recording data. Clear History Select Clear History to clear the coverage report history. Clear History is disabled if the history is cleared or if no reports were generated. Select Help to open the Documentation Reference for Code Coverage in the web browser. Settings Description Enable Code Coverage Check this to enable Code Coverage. This is required in order to generate Coverage data and reports. Note that Code Coverage can affect the Editor performance. Results Location Select the dropdown to open or specify the folder where the coverage results and report are saved to, and to reset to the default location. The default location is the Project's folder. Report History Location Select the dropdown to open or specify the folder where the coverage report history is saved to, and to reset to the default location. The default location is the Project's folder. Included Assemblies Specify assemblies to be included in the coverage results. This is a dropdown list containing the available assemblies. Click the dropdown to view, select or deselect the assemblies. Select All to select all the assemblies in the project. Select Assets to select only the assemblies under the Assets folder. Select Packages to select only the Packages' assemblies. Select Deselect All to deselect all the assemblies. Note: If searching, the buttons will apply only to the assemblies visible in the list. Included Paths Select Add (+) to specify individual folders and files to include in coverage results. You can use globbing to filter the paths. If the list is empty, Unity includes all files in the Included Assemblies. To remove an individual list entry, select the entry and then select Remove (-). Excluded Paths Select Add (+) to specify individual folders and files to exclude from coverage results. You can use globbing to filter the paths. To remove an individual list entry, select the entry and then select Remove (-). Log Verbosity Level Click the dropdown to set the verbosity level for the editor and console logs. The default level is Info. Levels: Verbose All logs will be printed. Info Logs, Warnings and Errors will be printed. Warning Warnings and Errors will be printed. Error Only Errors will be printed. Off No logs will be printed. Report Options Description HTML Report Check this to generate an HTML report. Additional Reports Check this to generate SonarQube, Cobertura and LCOV reports. Report History Check this to generate and include the coverage history in the HTML report. Summary Badges Check this to generate coverage summary badges in SVG and PNG format. Additional Metrics Check this to generate and include additional metrics in the HTML report. These currently include Cyclomatic Complexity and Crap Score calculations for each method. See the Risk Hotspots section for more information. Test Runner References Check this to include test references to the generated coverage results and enable the Coverage by test methods section in the HTML report. This shows how each test contributes to the overall coverage. Auto Generate Report Check this to generate the report automatically after the Test Runner finishes running or the Coverage Recording session is complete. Auto Open Report Check this to open the coverage report automatically after it has been generated."
  },
  "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/CoverageBatchmode.html": {
    "href": "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/CoverageBatchmode.html",
    "title": "Using Code Coverage in batchmode | Cacher Game",
    "summary": "Using Code Coverage in batchmode You can pass the following arguments in batchmode: -enableCodeCoverage, to enable code coverage. -coverageResultsPath (optional), to set the location where the coverage results and report are saved to. The default location is the project's path. -coverageHistoryPath (optional), to set the location where the coverage report history is saved to. The default location is the project's path. -coverageOptions (optional), to pass extra options. Options are separated by semicolon. Some shells use semicolons to separate commands. Therefore, to ensure that coverage options are parsed correctly, enclose them in quotation marks. Coverage Option Description generateHtmlReport Add this to generate a coverage HTML report. generateHtmlReportHistory Add this to generate and include the coverage history in the HTML report. generateAdditionalReports Add this to generate SonarQube, Cobertura and LCOV reports. generateBadgeReport Add this to generate coverage summary badges in SVG and PNG format. generateAdditionalMetrics Add this to generate and include additional metrics in the HTML report. These currently include Cyclomatic Complexity and Crap Score calculations for each method. See the Risk Hotspots section for more information. generateTestReferences Add this to include test references to the generated coverage results and enable the Coverage by test methods section in the HTML report. This shows how each test contributes to the overall coverage. verbosity Add this to set the verbosity level for the editor and console logs. The default value is info. Values: verbose, info, warning, error, off useProjectSettings Add this to use the settings specified in ProjectSettings/Packages/com.unity.testtools.codecoverage/Settings.json instead. Any options passed in the command line will override this. This option can only be used in batchmode and it does not take effect when running the editor from the command line in non-batchmode. dontClear Add this to allow coverage results to be accumulated after every code coverage session. If not passed the results are cleared before a new session. For more information see Generate combined report from EditMode and PlayMode tests. sourcePaths Add this to specify the source directories which contain the corresponding source code. The source directories are used by the report generator when the path information of classes cannot be determined. This is a comma separated string. Globbing is not supported. Example: See Generate combined report from separate projects. assemblyFilters Add this to specify the assemblies to include or exclude in the coverage calculation and/or report. This is a comma-separated string. Prefix assemblies with + to include them or with - to exclude them. Globbing can be used to filter the assemblies. Available aliases: <all> maps to all the assemblies in the project. <assets> maps to the assemblies under the Assets folder. <packages> maps to the Packages' assemblies in the project, including the built-in packages. By default, if there are no included assemblies specified, only the assemblies under the Assets folder will be included. Examples: assemblyFilters:+<all> will include code from all the assemblies in the project. assemblyFilters:+my.assembly will only include code from the assembly called my.assembly. assemblyFilters:+unity.* will include code from any assembly whose name starts with unity. assemblyFilters:-*unity* will exclude code from all assemblies that contain the word unity in their names. assemblyFilters:+my.assembly.*,-my.assembly.tests will include code from any assembly whose name starts with my.assembly., but will explicitly exclude code from the assembly called my.assembly.tests. assemblyFilters:+my.locale.?? will only include code from assemblies whose names match this format, e.g. my.locale.en, my.locale.99, etc. assemblyFilters:+my.assembly.[a-z][0-9] will only include code from assemblies whose names match this format, e.g. my.assembly.a1, my.assembly.q7, etc. pathFilters Add this to specify the paths that should be included or excluded in the coverage calculation and/or report. This is a comma-separated string. Prefix paths with + to include them and with - to exclude them. Globbing can be used to filter the paths. Both absolute and relative paths are supported. Absolute paths can be shortened using globbing e.g. **/Assets/Scripts/. Relative paths require the sourcePaths option to be set. See Using relative paths in path filters. Note: If pathFilters are specified and there are no included assemblies specified in assemblyFilters, then all the assemblies in the project are included in order for path filtering to take precedence over assembly filtering. Examples: pathFilters:+C:/MyProject/Assets/MyClass.cs will only include the MyClass.cs file. pathFilters:+C:/MyProject/Assets/Scripts/* will include all files in the C:/MyProject/Assets/Scripts folder. Files in subfolders will not be included. pathFilters:-C:/MyProject/Assets/AutoGenerated/** will exclude all files under the C:/MyProject/Assets/AutoGenerated folder and any of its subfolders. pathFilters:+**/Assets/Editor/** will include just the files that have /Assets/Editor/ in their path. pathFilters:+C:/MyProject/Assets/**/MyClass.cs will include any file named MyClass.cs that is under the C:/MyProject/Assets folder and any of its subfolders. pathFilters:+C:/MyProject/**,-**/Packages/** will only include files under C:/MyProject/ folder and exclude all files under any Packages folder. pathFilters:+**/MyGeneratedClass_??.cs will include only files with filenames that match this format, i.e. MyGeneratedClass_01.cs, MyGeneratedClass_AB.cs, etc. pathFilters:+**/MyClass_[A-Z][0-9].cs will include only files with filenames that match this format, i.e. MyClass_A1.cs, MyClass_Q7.cs, etc. pathFiltersFromFile Add this to specify the file to read path filtering rules from. Instead of defining all path filtering rules directly in the command line, as you would with the pathFilters option, this allows you to store them in a separate file, making your commands clearer and easier to manage. Like with the pathFilters option, pathFiltersFromFile also supports relative paths. See Using relative paths in path filters. Examples: pathFiltersFromFile:C:/MyProject/FilteringRules.txt will read rules from a file located in C:/MyProject/FilteringRules.txt pathFiltersFromFile:FilteringRules.txt will read rules from FilteringRules.txt located in the root of your project. Syntax of the rules is the same as with the pathFilters option, however, rules should be listed in separate lines in the file. File example: This will include all the files in the Scripts folder and exclude all the files in the Scripts/Generated folder +/Scripts/ -/Scripts/Generated/ Note: The pathFiltersFromFile option will be deprecated in the next package major release. Please use the filtersFromFile option instead. filtersFromFile Add this to specify the json file to read path and assembly filtering rules from. Instead of defining all filtering rules directly in the command line, as you would with pathFilters and assemblyFilters options, this allows you to store them in a separate file, making your commands clearer and easier to manage. Like with the pathFilters option, filtersFromFile also supports relative paths. See Using relative paths in path filters. Examples: filtersFromfile:C:/MyProject/FilteringRules.json will read rules from a file located in C:/MyProject/FilteringRules.json. filtersFromFile:FilteringRules.json will read rules from FilteringRules.json located in the root of your project. File example: This will include the my.included.assembly, exclude my.excluded.assembly and all assemblies with unity in their name. It will also include all files in the Scripts folder, and exclude all files in the Scripts/Generated folder { \"assembliesInclude\": [ \"my.included.assembly\" ], \"assembliesExclude\": [ \"my.excluded.assembly\", \"unity\" ], \"pathsInclude\": [ \"/Scripts/\" ], \"pathsExclude\": [ \"/Scripts/Generated/\" ] } Note: The pathFiltersFromFile option will be deprecated in the next package major release. Please use the filtersFromFile option instead. pathReplacePatterns Add this to replace specific sections from the paths that are stored in the coverage results xml files. This is a comma separated string and requires elements to be passed in pairs i.e. pathReplacePatterns:from,to,from,to. Globbing is supported. You can change the file paths in the coverage results xml to relative paths so that coverage data generated on different machines can be merged into a single report. Use the pathReplacePatterns option in conjunction with the sourcePaths option to specify the source directories which contain the corresponding source code. For more information see Generate combined report from separate projects. Note: The OpenCover results xml format specifies file paths as absolute paths (fullPath). Changing these paths to relative paths will invalidate the OpenCover standard format. When the results xml files are fed into other tools, these may not work as expected if the paths are relative. Examples: pathReplacePatterns:C:/MyProject,C:/MyOtherProject will store the path as C:/MyOtherProject/Assets/Scripts/MyScript.cs, when the original path is C:/MyProject/Assets/Scripts/MyScript.cs pathReplacePatterns:@*,,**/PackageCache/,Packages/ will store the path as Packages/com.unity.my.package/Editor/MyScript.cs, when the original path is C:/Project/Library/PackageCache/com.unity.my.package@12345/Editor/MyScript.cs pathReplacePatterns:C:/MyProject/, will store the path as Assets/Scripts/MyScript.cs, when the original path is C:/MyProject/Assets/Scripts/MyScript.cs pathReplacePatterns:**Assets/, will store the path as Scripts/MyScript.cs, when the original path is C:/MyProject/Assets/Scripts/MyScript.cs pathReplacePatterns:C:/*/Assets/, will store the path as Scripts/MyScript.cs, when the original path is C:/MyProject/Assets/Scripts/MyScript.cs pathReplacePatterns:C:/MyProject??/, will store the path as Assets/Scripts/MyScript.cs, when the original path is C:/MyProject01/Assets/Scripts/MyScript.cs pathReplacePatterns:**/MyProject[A-Z][0-9]/, will store the path as Assets/Scripts/MyScript.cs, when the original path is C:/MyProjectA1/Assets/Scripts/MyScript.cs Example Unity.exe -projectPath <path-to-project> -batchmode -testPlatform editmode -runTests -testResults <path-to-results-xml> -debugCodeOptimization -enableCodeCoverage -coverageResultsPath <path-to-coverage-results> -coverageHistoryPath <path-to-coverage-history> -coverageOptions \"generateAdditionalMetrics;generateHtmlReport;generateHtmlReportHistory;generateBadgeReport; assemblyFilters:+my.assembly.*,+<packages>; pathFilters:-**/Tests/**,-**/BuiltInPackages/**\" The example above opens the project at \\<path-to-project\\>, runs the EditMode tests and produces an HTML coverage report and coverage summary badges in \\<path-to-coverage-results\\>. The report includes the coverage history, Cyclomatic Complexity and Crap Score calculations. The coverage history files are saved in \\<path-to-coverage-history\\>. Additionally, the report includes code from any assembly whose name starts with my.assembly., and includes code from all the Packages' assemblies. It excludes files that have /Tests/ in their path (i.e. all the files under the Tests folder) and also excludes files that have /BuiltInPackages/ in their path (i.e. all the built-in packages). Note: -debugCodeOptimization is passed above to ensure Code optimization is set to Debug mode. See Using Code Coverage with Code Optimization. Generate combined report from EditMode and PlayMode tests To get coverage information for both EditMode and PlayMode tests, run the editor three times as shown in the example below: Unity.exe -projectPath <path-to-project> -batchmode -testPlatform editmode -runTests -debugCodeOptimization -enableCodeCoverage -coverageResultsPath <path-to-coverage-results> -coverageOptions \"generateAdditionalMetrics;assemblyFilters:+my.assembly.*;dontClear\" Unity.exe -projectPath <path-to-project> -batchmode -testPlatform playmode -runTests -debugCodeOptimization -enableCodeCoverage -coverageResultsPath <path-to-coverage-results> -coverageOptions \"generateAdditionalMetrics;assemblyFilters:+my.assembly.*;dontClear\" Unity.exe -projectPath <path-to-project> -batchmode -debugCodeOptimization -enableCodeCoverage -coverageResultsPath <path-to-coverage-results> -coverageOptions \"generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*\" -quit The first generates the coverage results for the EditMode tests, the second generates the coverage results for the PlayMode tests and the third generates the coverage report and summary badges based on both coverage results. Note: In Unity Test Framework 2.0 and above the coverage results from both the EditMode and PlayMode test runs are stored in the Automated folder. In this example, passing the dontClear coverage option ensures that the results from the EditMode test run are not cleared during the PlayMode test run. Generate combined report from separate projects To get a coverage report for your shared code which is used on separate projects, run the tests for each project making sure the -coverageResultsPath points to a separate location inside a shared root folder as shown in the example below: Unity.exe -projectPath C:/MyProject -batchmode -testPlatform playmode -runTests -debugCodeOptimization -enableCodeCoverage -coverageResultsPath C:/CoverageResults/MyProject -coverageOptions \"generateAdditionalMetrics;assemblyFilters:+my.assembly.*;pathReplacePatterns:C:/MyProject/,\" Unity.exe -projectPath C:/MyOtherProject -batchmode -testPlatform playmode -runTests -debugCodeOptimization -enableCodeCoverage -coverageResultsPath C:/CoverageResults/MyOtherProject -coverageOptions \"generateAdditionalMetrics;assemblyFilters:+my.assembly.*;pathReplacePatterns:C:/MyOtherProject/,\" Unity.exe -projectPath C:/MyProject -batchmode -debugCodeOptimization -enableCodeCoverage -coverageResultsPath C:/CoverageResults -coverageOptions \"generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*;sourcePaths:C:/MyProject\" -quit The first run generates the coverage results for the PlayMode tests for MyProject and stores these in C:/CoverageResults/MyProject. The second run generates the coverage results for the PlayMode tests for MyOtherProject and stores these in C:/CoverageResults/MyOtherProject. The third run generates the coverage report and summary badges based on the results found under the common C:/CoverageResults folder. Using relative paths in path filters When the sourcePaths option is specified, the path filtering rules set by the pathFilters, pathFiltersFromFile and filtersFromFile options can be defined as relative paths. Example: Unity.exe -projectPath C:/MyProject -batchmode -testPlatform playmode -runTests -debugCodeOptimization -enableCodeCoverage -coverageResultsPath C:/CoverageResults/MyProject -coverageOptions \"generateHtmlReport;generateAdditionalMetrics;assemblyFilters:+<all>;pathFiltersFromFile:FilteringRules.txt;sourcePaths:C:/MyProject/Assets\" FilteringRules.txt +Scripts/Animation/** -**/Generated/** +C:/MyPackages/com.my.company.mypackage/** This example contains three rules: +Scripts/Animation/** - because the sourcePaths option was set and this is a relative path, this rule will include all the scripts in the C:/MyProject/Assets/Scripts/Animation folder and its subfolders. -**/Generated/** - excludes all the files that have /Generated/ in their path. This is not a relative path so the sourcePaths option has no effect. +C:/MyPackages/com.my.company.mypackage/** - includes all the scripts located in the package outside of the project. This is an absolute path so the sourcePaths option has no effect."
  },
  "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/CoverageRecording.html": {
    "href": "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/CoverageRecording.html",
    "title": "On-demand coverage recording | Cacher Game",
    "summary": "On-demand coverage recording With Coverage Recording you can capture coverage data on demand and generate an HTML report which shows which lines of your code run while recording. It supports capturing in EditMode as well as in PlayMode, and you can switch between the two. To start recording coverage data, select Start Recording. While recording, use the Editor as usual, for example to enter PlayMode. To stop recording coverage data, select Stop Recording. If Auto Generate Report is checked, then an HTML report is generated and a file viewer window opens (if Auto Open Report is checked too). It contains the coverage results and the report. Otherwise, select Generate Report to generate the report. The results are based on the assemblies specified in Included Assemblies. You can also control Coverage Recording via the CodeCoverage ScriptingAPI. Steps Open the Code Coverage window (go to Window > Analysis > Code Coverage). Select Enable Code Coverage if not already selected, to be able to generate Coverage data and reports. Note: Enabling Code Coverage adds some overhead to the Editor and can affect the performance. Select the Assembly Definitions you would like to see the coverage for. In this example we selected Assembly-CSharp and Assembly-CSharp-Editor. By default, Unity compiles almost all project scripts into the Assembly-CSharp.dll managed assembly and all Editor scripts into the Assembly-CSharp-Editor.dll managed assembly. Select Start Recording. Continue using the Editor as normal, for example enter PlayMode to test your application or run some manual testing. You can also select Pause Recording to pause recording and Resume Recording to resume recording. When you have finished your testing and have collected enough coverage data, select Stop Recording. If Auto Open Report is checked a file viewer window opens containing the coverage report. Alternatively, select the Results Location dropdown to open it in the file viewer. Note: To generate the report automatically after you stop recording, select Auto Generate Report in the Code Coverage window. Alternatively, you can select Generate Report. Select index.htm. This opens the HTML coverage report."
  },
  "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/CoverageTestRunner.html": {
    "href": "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/CoverageTestRunner.html",
    "title": "Using Code Coverage with Test Runner | Cacher Game",
    "summary": "Using Code Coverage with Test Runner When running your tests in the Test Runner you can generate an HTML report which shows which lines of your code the tests cover. This includes both EditMode and PlayMode tests. If Auto Generate Report is checked, then an HTML report is generated and a file viewer window opens (if Auto Open Report is checked too). It contains the coverage results and the report. Otherwise, select Generate Report to generate the report. The results are based on the assemblies specified in Included Assemblies. Steps Open the Code Coverage window (go to Window > Analysis > Code Coverage). Select Enable Code Coverage if not already selected, to be able to generate Coverage data and reports. Note: Enabling Code Coverage adds some overhead to the Editor and can affect the performance. Select the Assembly Definitions you would like to see the coverage for. In this example we selected Assembly-CSharp and Assembly-CSharp-Editor. By default, Unity compiles almost all project scripts into the Assembly-CSharp.dll managed assembly and all Editor scripts into the Assembly-CSharp-Editor.dll managed assembly. Switch to the Test Runner and run your EditMode and/or PlayMode test(s). Example test: using NUnit.Framework; using Assert = UnityEngine.Assertions.Assert; public class EditorTests { [Test] public void MyPublicClass_PublicFunctionCanBeCalled() { MyPublicClass myPublicClass = new MyPublicClass(); Assert.IsTrue(myPublicClass.MyPublicFunction()); } } When the test(s) finish running, a file viewer window opens containing the coverage report. Alternatively, select the Results Location dropdown to open it in the file viewer. Note: To generate the report automatically after the Test Runner has finished running the tests, select Auto Generate Report in the Code Coverage window. Alternatively, you can select Generate Report. Select index.htm. This opens the HTML coverage report. Get results for EditMode and PlayMode tests Coverage data are generated from the last set of tests that were run in the Test Runner. Note: Currently the Test Runner does not support EditMode and PlayMode tests running at the same time. In version 2.0 of the Test Framework this will be possible. In the meantime, to include coverage for both EditMode and PlayMode tests, you must run these separately. In this case, the last Coverage Report generated will include the combined coverage of EditMode and PlayMode tests. If a fresh start is required, select Clear Results to clear the Coverage data from all previous test runs for both EditMode and PlayMode tests. Get coverage by test methods To see how each test contributes to the overall coverage check Test Runner References. For more details see Coverage by test methods."
  },
  "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/DocumentArchive.html": {
    "href": "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/DocumentArchive.html",
    "title": "Document revision history - Archive | Cacher Game",
    "summary": "Document revision history - Archive Date Reason Feb 26, 2021 Added information about the Enable Code Coverage setting in the Code Coverage window Updated Installing Code Coverage section Added verbosity section in -coverageOptions Added Generate combined report from separate projects section Matches package version 1.0.0-pre.4 Jan 13, 2021 Added information about assemblyFilters aliases and note about how path filtering can take precedence over assembly filtering in Using Code Coverage in batchmode section Matches package version 1.0.0-pre.2 Nov 12, 2020 Matches package version 1.0.0-pre.1 Nov 11, 2020 Added information about Included Paths and Excluded Paths settings in the Code Coverage window Updated information about Included Assemblies setting in the Code Coverage window Matches package version 0.4.0-preview Aug 3, 2020 Matches package version 0.3.1-preview May 20, 2020 Added information about the History Location and Generate History settings in the Code Coverage window and coverageHistoryPath and generateHtmlReportHistory in -coverageOptions Added information about the Generate Additional Metrics setting in the Code Coverage window and generateAdditionalMetrics in -coverageOptions Added information about Coverage History and Crap Score in How to interpret the results page Updated Installing Code Coverage section Matches package version 0.3.0-preview Feb 18, 2020 Added Generate combined report from EditMode and PlayMode tests section Matches package version 0.2.3-preview Dec 11, 2019 Matches package version 0.2.2-preview Dec 3, 2019 Added pathFilters section Added examples for assemblyFilters and pathFilters Added a reference to the Coverage Recording ScriptingAPI Matches package version 0.2.1-preview Nov 10, 2019 Split documentation into separate pages Matches package version 0.2.0-preview Nov 5, 2019 Updated UX design Sep 27, 2019 Added Using Code Coverage with Burst compiler section Added Using Code Coverage with Code Optimization section Matches package version 0.1.0-preview.3 Sep 23, 2019 Added Coverage Recording section Matches package version 0.1.0-preview.2 Aug 16, 2019 Added How to interpret the results section Added How it works section Aug 7, 2019 Added Clear Coverage Data setting to Settings table Added Note in Using Code Coverage section about combined coverage of EditMode and PlayMode tests Aug 5, 2019 Updated About Code Coverage section and Settings table May 15, 2019 Document created. Matches package version 0.1.0-preview.0"
  },
  "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/DocumentRevisionHistory.html": {
    "href": "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/DocumentRevisionHistory.html",
    "title": "Document revision history | Cacher Game",
    "summary": "Document revision history Date Reason Dec 20, 2023 Matches package version 1.2.5. Jun 02, 2023 Corrected Settings.json path in useProjectSettings section in -coverageOptions. Matches package version 1.2.4. Apr 14, 2023 Added filtersFromFile section in -coverageOptions. Updated Using Code Coverage with Burst compiler section with the correct number of dashes for --burst-disable-compilation. Matches package version 1.2.3. Nov 18, 2022 Added Uncoverable lines definition in How to interpret the results page. Matches package version 1.2.2. Oct 27, 2022 Matches package version 1.2.1. Aug 01, 2022 Updated What's new and Upgrade guide pages. Added information about the buttons in the toolbar in the Code Coverage window. Added information about the Log Verbosity Level setting in the Code Coverage window. Added information about the Additional Reports, Test Runner References and Auto Open Report options in the Code Coverage window. Introduced new selection buttons under the Included Assemblies dropdown in the Code Coverage window. Added generateTestReferences, generateAdditionalReports, pathFiltersFromFile and dontClear sections in -coverageOptions. Added pathReplacePatterns section in -coverageOptions. Removed pathStrippingPatterns section from -coverageOptions (replaced with pathReplacePatterns). Renamed the aliases in the assemblyFilters command line option. Updated the examples in the pathFilters command line option to follow the standard globbing paradigm. Added Using relative paths in path filters section. Added Coverage by test methods section. Updated the Quickstart - Code Coverage Tutorial page. Matches package version 1.2.0. Dec 17, 2021 Added What's new and Upgrade guide pages. Matches package version 1.1.1. Jun 09, 2021 Added Subscribing to Code Coverage session events section. Added Ignoring tests for Code Coverage section. Added useProjectSettings, pathStrippingPatterns and sourcePaths sections in -coverageOptions. Updated the Generate combined report from separate projects section. Matches package version 1.1.0. Mar 09, 2021 Added Quickstart guide. Matches package version 1.0.0."
  },
  "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/HowToInterpretResults.html": {
    "href": "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/HowToInterpretResults.html",
    "title": "How to interpret the results | Cacher Game",
    "summary": "How to interpret the results This section assumes that you checked HTML Report in the Code Coverage window or passed the generateHtmlReport option in -coverageOptions on the command line. If you're running the tests in the Editor, a file viewer window opens up containing the coverage report once the test run has been finished. If you're running the tests from the command line, navigate to the -coverageResultsPath location with your file viewer. Open the Report folder then open index.htm in a web browser. This shows a summary of the coverage results from the tests. Summary view The summary view is divided into several sections: Summary, Coverage History, Risk Hotspots and Coverage. Summary This section shows a brief summary of the coverage results including the number of assemblies, classes, files and lines that were processed. The most important value is the Line Coverage which shows the current coverage percentage of all coverable lines. Coverable lines only include the lines that can be executed and are colored either green or red in the File(s) section depending on whether the line was covered or not. Uncoverable lines are the lines that cannot be executed and are not colored in the File(s) section; these include lines containing: Assemblies, Classes, Constructors, Methods and Structs that are marked to be excluded from coverage Directives Attributes Method signatures Class definitions Unassigned variable declarations Constant variable declarations else/case/default keywords Lines from other classes, when multiple classes are included in the same file Blank lines Coverage History This section only appears if you checked Report History in the Code Coverage window or passed the generateHtmlReportHistory option in -coverageOptions on the command line. The Coverage History displays a graph showing the total percentage coverage for every test run for this project. Aim to keep this percentage as high as possible. If it is decreasing, consider writing more tests to improve your coverage. Risk Hotspots This section only appears if you checked Additional Metrics in the Code Coverage window or passed the generateAdditionalMetrics option in -coverageOptions on the command line. The Risk Hotspots display information about any methods that have a Cyclomatic Complexity score that is greater than 15. The Cyclomatic Complexity score is a value that is based on the number of paths that can be taken through a method. The score will tend to be higher if a method has a large number of if or switch statements. For more detailed information see the Wikipedia entry on Cyclomatic Complexity. You will also see information about any methods with a high Crap Score. CRAP stands for Change Risk Anti-Patterns. For more detailed information see this article. If there are any methods with a very high Cyclomatic Complexity or Crap Score, consider refactoring the method to reduce its complexity. Note: NPath Complexity calculation and Branch Coverage are not implemented at present so will always appear as zero. Coverage By default, this shows a list of the assemblies that have been covered together with some stats showing how well covered they are. Select Expand (+) next to the assembly name to see a list of the classes or structs within the assembly and their associated coverage data. To see more detailed information for a particular class, select its name in the list. Class/Struct view Summary Similar to the Summary section of the previous page, this section shows some brief statistics for the selected class. The most important value is the Line Coverage percentage. Select Back (<) in the top left hand corner to return to the previous screen. Coverage History This section only appears if you checked Report History in the Code Coverage window or passed the generateHtmlReportHistory option in -coverageOptions on the command line. It shows a graph of the coverage percentage of the class/struct over time. Try to keep this value as high as you can. Make sure that as you add new code the coverage percentage is maintained by adding more tests. Metrics The metrics section displays a list of the methods and properties of the class, along with each method's Cyclomatic Complexity, Crap Score and Sequence Coverage scores. Currently, the NPath Complexity and Branch Coverage aren't calculated, so will always appear as zero. File(s) The File(s) section shows the C# source code for the selected class. Each line is colored either green or red depending on whether the line was covered or not. The number in the left column indicates the number of times that the line was executed during a Test Runner or Coverage Recording session. Coverage by test methods This section only appears if you checked Test Runner References in the Code Coverage window or passed the generateTestReferences option in -coverageOptions on the command line. It shows a list of test methods allowing you to see how each test contributes to the overall coverage. Select a test method to view the relevant code or hover over the code to see which test method executed it."
  },
  "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/InstallingCodeCoverage.html": {
    "href": "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/InstallingCodeCoverage.html",
    "title": "Installing Code Coverage | Cacher Game",
    "summary": "Installing Code Coverage Before you install the package, make sure you have no errors in the Console window (in red text). From the Unity Package Manager Use the Unity Package Manager to find and install the Code Coverage package. Alternatively, use the Add (+) dropdown and select Add package from git URL... or Add package by name... and type com.unity.testtools.codecoverage. To verify that Code Coverage has been installed correctly, open the Code Coverage window (go to Window > Analysis > Code Coverage). If you don't see the Code Coverage menu item, then Code Coverage did not install correctly. Manually from the Package Manifest You can also install the Code Coverage package manually. To do this, add a reference to Code Coverage in your project's Packages/manifest.json file. There are two ways you can reference a specific version of the Code Coverage package, depending on how you use it. Using a production version of the package You can point the Package Manager at a publicly available version. To do this manually, add it to manifest.json: \"dependencies\": { //... \"com.unity.testtools.codecoverage\":\"<full version number>\" } Using a local clone of the package If you want to use a cloned version of the package, you can point the Package Manager at a local folder as the package location: \"dependencies\": { //... \"com.unity.testtools.codecoverage\":\"file:path/to/package/root\" } To verify that Code Coverage has been installed correctly, open the Code Coverage window (go to Window > Analysis > Code Coverage). If you don't see the Code Coverage menu item, then Code Coverage did not install correctly."
  },
  "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/Quickstart.html": {
    "href": "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/Quickstart.html",
    "title": "Quickstart - Code Coverage tutorial | Cacher Game",
    "summary": "Quickstart - Code Coverage tutorial The Quickstart guide will give you an insight into what Code Coverage is and how you can identify areas of your code that need more testing, even if you haven't written any automated tests. It takes about 30 minutes to complete. Tasks What is Code Coverage (2 min) Install the Code Coverage package (2 min) Install the Asteroids sample project (1 min) Enable Code Coverage (1 min) Understanding the game code: Shoot() function (4 min) Generate a Coverage report from PlayMode tests (3 min) Add Weapon tests to improve coverage (3 min) Add a test for the LaserController (4 min) Clear the coverage data (1 min) Generate a Coverage report using Coverage Recording (4 min) Note: Estimated times are shown for each task to give you a better understanding of the time required. These times are rough guidelines - it is fine to take as much or as little time as needed. 1. What is Code Coverage (2 min) Code Coverage is a measure of how much of your code has been executed. It is normally associated with automated tests, but you can gather coverage data in Unity at any time when the Editor is running. It is typically presented as a report that shows the percentage of the code that has been executed. For automated testing the report does not measure the quality of tests, only whether your code is executed by PlayMode and EditMode tests. It is especially useful to check that critical or high risk areas of your code are covered, because they should receive the most rigorous testing. It is much easier to accidentally introduce bugs into code that is not covered by tests, because those bugs are not detected straight away by the tests and can instead cause problems later — such as after you have published your game or app. Additionally, the Code Coverage package offers a Coverage Recording feature which allows capturing coverage data on demand, in case you do not have tests in your project or doing manual testing. 2. Install the Code Coverage package (2 min) Note: Skip this task if the package is already installed. Use the Unity Package Manager to find and install the Code Coverage package. Alternatively, use the Add (+) dropdown and select Add package from git URL... or Add package by name... and type com.unity.testtools.codecoverage. To verify that Code Coverage has been installed correctly, open the Code Coverage window (go to Window > Analysis > Code Coverage). If you don't see the Code Coverage menu item, then Code Coverage did not install correctly. 3. Install the Asteroids sample project (1 min) In the Unity Package Manager (Window > Package Manager) select the Code Coverage package, if not already selected. Find the Samples section in the package details (right hand side) and select Import next to Code Coverage Tutorial. 4. Enable Code Coverage (1 min) To enable Code Coverage open the Code Coverage window (go to Window > Analysis > Code Coverage) and select Enable Code Coverage if not already selected, to be able to generate Coverage data and reports. Note: Enabling Code Coverage adds some overhead to the editor and can affect the performance. 5. Understanding the game code: Shoot() function (4 min) Go to Asteroids/Scenes in Project View and open the Asteroids scene. This is located in Assets/Samples/Code Coverage/<version>/Code Coverage Tutorial. Hit Play and play the game for a minute or two. Use the arrow keys to move and the spacebar to shoot. Exit PlayMode. Open the Scripts/Controllers/SpaceshipController.cs script. Study the Shoot function. If Weapon is Basic, the Prefabs/Weapons/Projectile prefab is instantiated If Weapon is Laser, the Prefabs/Weapons/Laser prefab is instantiated 6. Generate a Coverage report from PlayMode tests (3 min) Open the Code Coverage window (go to Window > Analysis > Code Coverage). If you see this warning select Switch to debug mode. Code Optimization was introduced in Unity 2020.1; in Release mode the code is optimized and therefore not directly represented by the original code. Therefore, Debug mode is required in order to obtain accurate code coverage information. Click the Included Assemblies dropdown to make sure only Unity.TestTools.CodeCoverage.Sample.Asteroids and Unity.TestTools.CodeCoverage.Sample.Asteroids.Tests are selected. Make sure HTML Report, Report History, Auto Generate Report and Auto Open Report are all checked. Switch to the Test Runner window, select the PlayMode tab and hit Run All tests. When the tests finish running, a file viewer window will open up containing the coverage report. Select index.htm. Look for the classes with low coverage, especially LaserController, BaseProjectile and ProjectileController. You can sort the results by Line coverage. See also How to interpret the results. 7. Add Weapon tests to improve coverage (3 min) Open the Tests/WeaponTests.cs script. Uncomment all the tests (from line 35 down to line 237). Back in the Test Runner, hit Run All tests again. When the tests finish running, a file viewer window will open up containing the coverage report. Select index.htm. Notice that now BaseProjectile and ProjectileController coverage is considerably higher, but LaserController has not improved much. 8. Add a test for the LaserController (4 min) Open the Tests/WeaponTests.cs script. Go to the _18_LaserFiresSuccessfully test in line 225. Uncomment and study the code. Back in the Test Runner, hit Run All tests again. When the tests finish running, a file viewer window will open up containing the coverage report. Select index.htm. Notice how the coverage for LaserController has improved. Select the LaserController class to enter the class view and notice that about 2/3 (65%) of the code is now covered (green). Complete the Bonus Task at the end of the tutorial to get 100% coverage! 9. Clear the coverage data (1 min) Open the Code Coverage window (go to Window > Analysis > Code Coverage). Select Clear Results and confirm. Select Clear History and confirm. 10. Generate a Coverage report using Coverage Recording (4 min) Go to Asteroids/Scenes in Project View and open the Asteroids scene, if not opened already. Open the Code Coverage window. Make sure HTML Report, Report History, Auto Generate Report and Auto Open Report all are checked. Select Start Recording. Hit Play to play the game and exit PlayMode before you get 8000 points. Select Stop Recording. A file viewer window will open up containing the coverage report. Select index.htm. Notice that LaserController has 0% coverage. Go back to the Code Coverage window. Select Start Recording. Now hit Play to play the game again but this time exit PlayMode when you get 8000 points. Select Stop Recording. Notice that LaserController coverage is now 100%. See also How to interpret the results. 11. Bonus task (5-8 min) Write a new test that checks that the laser gets destroyed after 2 seconds, which will also cover the rest of the code in LaserController. Suggested name: _19_LaserFiresAndIsDestroyedAfterTwoSeconds. Hint: You can use yield return new WaitForSeconds(2f); to wait for 2 seconds. Well done for finishing the Code Coverage tutorial! For questions and feedback please visit the Testing & Automation forum section to browse current conversations or start a new thread. Please use the code coverage tag."
  },
  "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/TableOfContents.html",
    "title": "| Cacher Game",
    "summary": "About Code Coverage What's new Upgrade guide Code Coverage package Coverage HTML Report Other Reports Coverage Summary Badges Quickstart What is Code Coverage Install the Code Coverage package Install the Asteroids sample project Enable Code Coverage Understanding the game code: Shoot() function Generate a Coverage report from PlayMode tests Add Weapon tests to improve coverage Add a test for the LaserController Clear the coverage data Generate a Coverage report using Coverage Recording Installing Code Coverage From the Unity Package Manager Manually from the Package Manifest Using Code Coverage Code Coverage window Using Code Coverage with Test Runner On demand coverage recording Using Code Coverage in batchmode Using Code Coverage with Burst compiler Using Code Coverage with Code Optimization Excluding code from Code Coverage Ignoring tests for Code Coverage Subscribing to Code Coverage session events How to interpret the results Summary View Class/Struct View Technical details How it works Requirements 3rd party libraries used Known limitations Document revision history Archive"
  },
  "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/TechnicalDetails.html": {
    "href": "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/TechnicalDetails.html",
    "title": "Technical details | Cacher Game",
    "summary": "Technical details How it works The package is a client of the coverage API. For more information, see the coverage API's documentation. The package uses a combination of this API and C# reflection to output the test coverage data in the OpenCover format. Optionally, a third-party report generator will then parse the OpenCover data and generate a report (HTML, SonarQube, Cobertura, LCOV). Requirements This version of the Code Coverage package is compatible with the following versions of the Unity Editor: 2019.3 and later Third-party libraries used ReportGenerator - v5.0.4 Known limitations Code Coverage includes the following known limitations: Code Coverage currently only supports the OpenCover format. Code Coverage currently only supports code run in the Editor and not in Standalone/Player. NPath Complexity calculation and Branch Coverage are not implemented at present so they will always appear as zero in the coverage report."
  },
  "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/UsingCodeCoverage.html": {
    "href": "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/UsingCodeCoverage.html",
    "title": "Using Code Coverage | Cacher Game",
    "summary": "Using Code Coverage Using Code Coverage with Burst compiler If you use the Burst package and have jobs compiled with Burst, you will need to disable Burst compilation in order to get full coverage. To disable Burst compilation you can do one of the following: Uncheck Enable Compilation under Jobs > Burst > Enable Compilation. Pass --burst-disable-compilation to the command line. Using Code Coverage with Code Optimization Code Optimization was introduced in 2020.1. Code Optimization mode defines whether Unity Editor compiles scripts in Debug or Release mode. Debug mode enables C# debugging and it is required in order to obtain accurate code coverage. To ensure Code optimization is set to Debug mode you can do one of the following: Switch to Debug mode in the Editor (bottom right corner, select the Bug icon > Switch to debug mode). Using the CompilationPipeline api, set CompilationPipeline.codeOptimization = CodeOptimization.Debug. Pass -debugCodeOptimization to the command line. Excluding code from Code Coverage Any code that should not be contributing to the Code Coverage calculation can be excluded by adding the ExcludeFromCoverage attribute. This attribute can be added to Assemblies, Classes, Constructors, Methods and Structs. Note that you can also use the .NET ExcludeFromCodeCoverage attribute. Ignoring tests for Code Coverage To ignore tests when running with Code Coverage, use the ConditionalIgnore attribute, passing the \"IgnoreForCoverage\" ID. Example public class MyTestClass { [Test, ConditionalIgnore(\"IgnoreForCoverage\", \"This test is disabled when ran with code coverage\")] public void TestNeverRunningWithCodeCoverage() { Assert.Pass(); } } Subscribing to Code Coverage session events Use the Events API to subscribe to events invoked during a Code Coverage session."
  },
  "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/index.html",
    "title": "About Code Coverage | Cacher Game",
    "summary": "About Code Coverage Code Coverage is a measure of how much of your code has been executed. It is normally associated with automated tests, but you can gather coverage data in Unity at any time when the Editor is running. It is typically presented as a report that shows the percentage of the code that has been executed. For automated testing the report does not measure the quality of tests, only whether your code is executed by PlayMode and EditMode tests. It is especially useful to check that critical or high risk areas of your code are covered, because they should receive the most rigorous testing. Code Coverage package Use the Code Coverage package with the Test Runner to gather and present test coverage information. When you run your tests with code coverage enabled you can see exactly which lines of your code are executed when the tests run in addition to whether the tests passed or failed. See Using Code Coverage with Test Runner. Once a test run has completed, the Code Coverage package will generate an HTML coverage report showing which lines of your code are covered by tests. Code Coverage currently supports PlayMode and EditMode tests. It also allows you to track the code coverage changes through time. Additionally, the Code Coverage package offers a Coverage Recording feature which allows capturing coverage data on demand, in case you do not have tests in your project or doing manual testing. The Quickstart guide will give you an insight into the package. Coverage HTML report Shown below is an example of the top level page of an HTML report generated by the package. Class view This view shows some brief statistics for the selected class as well as the C# source code. Each line will be colored either green or red depending on whether the line was covered or not. For more information see How to interpret the results. Other reports The package can produce SonarQube, Cobertura and LCOV reports. Coverage summary badges Additionally, the package can produce simple badges in SVG and PNG format, showing the current percentage of code that is covered."
  },
  "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/upgrade-guide.html": {
    "href": "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/upgrade-guide.html",
    "title": "Upgrading to Code Coverage package version 1.2 | Cacher Game",
    "summary": "Upgrading to Code Coverage package version 1.2 To upgrade to Code Coverage package version 1.2, you need to do the following: Update assembly filtering aliases in batchmode Rename pathStrippingPatterns to pathReplacePatterns in batchmode Note: If you're upgrading from a version older than 1.1, follow the upgrade guide for version 1.1 first. Update assembly filtering aliases in batchmode Rename assembly filtering aliases when running in batchmode. <user> alias was renamed to <assets> and <project> was renamed to <all>. Rename pathStrippingPatterns to pathReplacePatterns in batchmode Rename pathStrippingPatterns to pathReplacePatterns in batchmode. Example: Change pathStrippingPatterns:C:/MyProject/ to pathReplacePatterns:C:/MyProject/,. This is equivalent to stripping C:/MyProject/ by replacing C:/MyProject/ with an empty string. Upgrading to Code Coverage package version 1.1 To upgrade to Code Coverage package version 1.1, you need to do the following: Update path filtering globbing rules Update path filtering globbing rules Update the path filtering globbing rules in your batchmode commands and code coverage window. To keep the current behavior when using globbing to match any number of folders, the * character should be replaced with **. A single * character can be used to specify a single folder layer. Examples: pathFilters:+C:/MyProject/Assets/Scripts/* will include all files in the C:/MyProject/Assets/Scripts folder. Files in subfolders will not be included. pathFilters:+C:/MyProject/Assets/Scripts/** will include all files under the C:/MyProject/Assets/Scripts folder and any of its subfolders. For a full list of changes and updates in this version, see the Code Coverage package changelog."
  },
  "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/whats-new.html": {
    "href": "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Documentation~/whats-new.html",
    "title": "What's new in version 1.2 | Cacher Game",
    "summary": "What's new in version 1.2 Summary of changes in Code Coverage package version 1.2 The main updates in this release include: Added Added Pause Recording and Resume Recording buttons in the toolbar in the Code Coverage window. Added Test Runner References coverage report option in the Code Coverage window. When you check this option, the generated coverage results include references to the triggering tests enabling the Coverage by test methods section in the HTML report. This section allows you to see how each test contributes to the overall coverage. In batchmode, you can generate test references by adding the generateTestReferences option in -coverageOptions. Added Log Verbosity Level setting in the Code Coverage window which allows setting the verbosity level for the editor and console logs. Added Additional Reports option in the Code Coverage window which if checked SonarQube, Cobertura and LCOV reports will be generated. Added generateAdditionalReports in -coverageOptions for batchmode. Added filtersFromFile in -coverageOptions for batchmode. This allows you to specify an external Json file which contains path and assembly filtering rules. Added dontClear in -coverageOptions for batchmode which allows coverage results to be accumulated after every code coverage session. If not passed the results are cleared before a new session. Updated Updated the UI of the Code Coverage window moving the action buttons into a toolbar at the top. Introduced new selection buttons under the Included Assemblies dropdown in the Code Coverage window. Renamed assemblyFilters aliases in batchmode; <user> was renamed to <assets> and <project> was renamed to <all>. Replaced pathStrippingPatterns with pathReplacePatterns in batchmode. The pathReplacePatterns option allows stripping and replacing specific sections from the paths that are stored in the coverage results xml files. The size of the coverage result files and the Code Coverage session duration have been optimized. Improved the editor and console logs. Fixed Ensure assemblies are removed from the Included Assemblies field if they no longer exist (case 1318668). Ensure hidden sequence points are ignored (case 1372305). For a full list of changes and updates in this version, see the Code Coverage package changelog."
  },
  "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/LICENSE.html",
    "title": "| Cacher Game",
    "summary": "Code Coverage copyright © 2020 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/README.html": {
    "href": "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/README.html",
    "title": "About Code Coverage | Cacher Game",
    "summary": "About Code Coverage Use the Code Coverage package with the Test Runner to gather and present test coverage information. When you run your tests with code coverage enabled you can see exactly which lines of your code are executed when the tests run in addition to whether the tests passed or failed. Once a test run has completed, the Code Coverage package will generate an HTML coverage report showing which lines of your code are covered by tests. Code Coverage currently supports EditMode and PlayMode tests. It also allows you to track the code coverage changes through time. Additionally, the Code Coverage package offers a Coverage Recording feature which allows capturing coverage data on demand, in case you do not have tests in your project or doing manual testing. The Code Coverage package is available as a released package via the Package Manager for Unity 2019.3 and above. For more information see the Code Coverage package documentation."
  },
  "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Samples~/Tutorial/README.html": {
    "href": "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Samples~/Tutorial/README.html",
    "title": "Code Coverage Tutorial | Cacher Game",
    "summary": "Code Coverage Tutorial The Code Coverage Tutorial will give you an insight into what Code Coverage is and how you can identify areas of your code that need more testing, even if you haven't written any automated tests. It takes about 30 minutes to complete. To start open the Worksheet pdf file located under the Code Coverage Tutorial folder, and work through the tasks. Tutorial tasks What is Code Coverage (2 min) Install the Code Coverage package (2 min) Enable Code Coverage (1 min) Understanding the game code: Shoot() function (4 min) Generate a Coverage report from PlayMode tests (3 min) Add Weapon tests to improve coverage (3 min) Add a test for the LaserController (4 min) Clear the coverage data (1 min) Generate a Coverage report using Coverage Recording (4 min) For questions and feedback please visit the Testing & Automation forum section to browse current conversations or start a new thread. Please use the code coverage tag."
  },
  "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Third Party Notices.html": {
    "href": "Library/PackageCache/com.unity.testtools.codecoverage@1.2.5/Third Party Notices.html",
    "title": "| Cacher Game",
    "summary": "This package contains third-party software components governed by the licenses indicated below: Component Name: ReportGenerator License Type: Apache 2.0 Copyright (c) 2018 Daniel Palme ReportGenerator is licensed under the Apache License 2.0. This means you may use this program in any project. You are allowed to modify the program as you like. For further details visit https://github.com/danielpalme/ReportGenerator/blob/master/LICENSE.txt Component Name: OpenCover License Type: MIT Copyright (c) 2011-2019 Shaun Wilde OpenCover is released under the following MIT compatible software licence this does not apply to any other software, be that source code, compiled libraries or tools, that OpenCover may rely on or use and that that software will continue to retain whatever licence they were released under. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. For further details visit https://github.com/OpenCover/opencover/blob/master/LICENSE Component Name: Cyclomatic Complexity calculation from MonoTools License Type: MIT Copyright (c) 2001, 2002, 2003 Ximian, Inc and the individuals listed on the ChangeLog entries. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. For further details visit https://github.com/mono/mono-tools/blob/master/LICENSE Component Name: Mono.Reflection License Type: MIT Author: Jb Evain (jbevain@novell.com) Copyright (c) 2009-2010 Novell, Inc. (http://www.novell.com) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. For further details visit https://github.com/jbevain/mono.reflection/tree/master/Mono.Reflection Component Name: SixLabors.Fonts, SixLabors.ImageSharp License Type: Apache 2.0 Copyright (c) 2017 Six Labors Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. For further details visit: SixLabors.Fonts - https://github.com/SixLabors/Fonts/blob/master/LICENSE SixLabors.ImageSharp - https://github.com/SixLabors/ImageSharp/blob/master/LICENSE"
  },
  "Library/PackageCache/com.unity.textmeshpro@3.0.6/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.textmeshpro@3.0.6/CHANGELOG.html",
    "title": "Changelog | Cacher Game",
    "summary": "Changelog These are the release notes for the TextMesh Pro UPM package which was first introduced with Unity 2018.1. Please see the following link for the Release Notes for prior versions of TextMesh Pro. http://digitalnativestudios.com/forum/index.php?topic=1363.0 [3.0.6] - 2021-04-23 [2.1.6] [1.5.6] Changes Added compiler conditional to exclude reference to PS5 in Unity 2019.4.22f1 or older and similar for Unity 2020.2.2f1 or older. [3.0.5] - 2021-04-09 [2.1.5] [1.5.5] Changes Added compiler conditional to address error related to missing RectMask2D padding property which was added in Unity 2019.4.12f1. See forum post for details. Fixed GetPreferredValues(string text) and GetPreferredValues(string text, float width, float height) incorrectly changing the text. See forum post for details. Fixed potential crash when FontEngine.GetGlyphIndex is called on a font asset that was previously unloaded or deleted. See forum post for details. Fixed potential crash when trying to add new glyphs to a dynamic font asset whose atlas texture is set to non readable. Case #1319567 Fixed Format Exception error when using the Project Text Spacing Conversion Tool when the Language Region Format is not English. Case #1320544 Fixed text rendering issue due to incorrectly SDF scaling when using a CanvasScaler and resizing the game view. Fixed TextMeshPro component Sorting Layer field in the Inspector's Extra Settings not showing the correct layer. Case #1326985 Fixed m_AlphaTweenRunner not initialized in TMP_Dropdown when Reload Domain is disabled in the Editor Enter Play Mode Settings. See forum post for details. Added support for PS4 and PS5 to TMP Input Field. [3.0.4] - 2021-02-19 [2.1.4] [1.5.4] Changes Improved sprite tag anim functionality to take into consideration the sprite character and glyph scale. Case #1309707 Improved Ellipsis character insertion handling to prevent potential issues when the Ellipsis glyph ascender and descender exceed those of the primary font asset. See forum post for details. Fixed text object margin handles in Scene view not behaving correctly as a result of lossy scale or object rotation. Case #1295523 The <mark> tag padding attribute can now be defined using font units (em). Fixed text parsing issue related to recent memory overhead optimizations. Case #1295755 Updated TMP Essential Resources and TMP Examples & Extras. Updated TMP Sprite shader to add support for Single Pass Stereo rendering. Fixed potential iOS build failure. Case #1298753 Fixed a few missing Profiler.EndSample() in the TMP_FontAsset.cs file. See forum post for details. Fixed SetText() with formatting issue where large numbers would show a leading zero. See forum post for details. Updated profiling code to use the new and more efficient ProfilerMarker. Fixed incorrect text bounds. See forum post for details. Fixed OutOfRangeException error that could occur in the TMP Input Field when selecting all and inserting characters using IME. Case #1301059 Fixed incorrect handling of Surrogate Pairs in the TMP Input Field. Case #1299798 Fixed Font Asset Creator incorrectly leaving the Readable state of font asset atlas textures to readable where it should be set to non readable for static font assets. Case #1305520 Added Multi Select functionality to the \"Create - TextMesh Pro - Font Asset\" context menu option. Case #1303074 Revised internal handling of the various text input methods to ensure the text property is always reflective of the text content in the Inspector Text Input Box in the Editor and via the text property getter even when using a combination of the various SetText methods or the text property setter. Case #1294998 Please note that using the text property getter when the text was updated via one of the SetText methods will results a string allocation. Fixed incorrect line spacing caused by preceding <size=x.x> tag. See forum post for details. Revised how the Bold Spacing which is defined per font asset will affect spacing between bold characters to ensure more uniform spacing. This change may require users to manually adjust the bold spacing value of their font assets to maintain similar spacing / layout results. Fixed linked text components not updating correctly when setting the text to null or empty. Case #1305832 The vertexBufferAutoSizeReduction property will now be set to false by default. This property is used to determine if the internal data structures used in the parsing of the text should be resized when the text content shrinks by more than 256 characters which results in CG. Case #1305311 Fixed animated sprites not behaving correctly when using text overflow mode Ellipsis and Truncate. Case #1303672 Fixed TMP Resource Importer window stealing focus when Inspector Layout Property window is open when TMP Essential Resources have not been imported into the project. Case #1300462 Fixed minor UI cosmetic issue affecting text spacing properties alignment in the Quick Search window. Case #1299587 Fixed minor UI cosmetic issue in the Font Asset inspector related to the positioning of the warning when changing Generation Settings. Fixed issue where the material properties of fallback font assets are not updated when changing the material properties of the primary font asset via code. Case #1271468 Fixed an issue with Text Overflow Linked mode where text would not flow correctly from one component to the other when the last character present at the break point was a linefeed \"\\n\" or vertical tab \"\\v\". See forum post for details. [3.0.3] - 2020-10-27 [2.1.3] [1.5.3] Changes Fixed potential null reference exception in the Input Field that can occur as a result of using a workflow that involves enabling and disabling Canvases. See forum post for details. Fixed potential Invalid AssetDatabase path warning that can be issued when assets are imported from outside the project. See forum post for details. Fixed <TextMeshProUGUI> objects not being created correctly in Prefab isolation mode when using the Create context menu. See forum post for details. Case #1266096 Fixed an issue where nesting <uppercase> and <lowercase> tags didn't behaves as expected. See forum post for details. Fixed Input Field incorrect handling of validation with text selection. Case #1267777 Fixed potential null reference exception that could occur in the Input Field when hiding the soft keyboard on iOS or Android. Case #1273631 Fixed OnScroll event not getting passed to potential parent ScrollRect when the Input Field is in Single Line mode. Case #1270241 Fixed Prefab override context menu to override or revert changes not being available for some text object properties. Case #1271420 The sampling point size in the Font Asset Creator will now be limited to a maximum of 16,384 points for SDF over-sampled modes. This means a maximum point size of 2048 for SDF8, 1024 for SDF16 and 512 for SDF32. Case #1253370 Fixed Margin widget in the scene view not working correctly when the text object is rotated on the z-axis. Case #1263001 Fixed Input Field Scrollbar not behaving correctly when set to Bottom to Top direction. Case #1179982 Fixed minor UI cosmetic issue in the StyleSheet inspector. Case #1258771 Fixed minor UI cosmetic issue in Material inspector texture properties. Case #1163983 Fixed potential IndexOutOfRangeException that could occur when duplicating text objects that have more than 8 sub text objects. Revised and improved Input Field with Scrollbar behavior with respect to text alignment. Case #1272647 Improved Input Field Name validation including adding the ability to use Hyphens. Case #1277951 Fixed state of MeshRenderer potentially not being mirrored on sub text objects. Case #1278329 Fixed GetPreferredValues() function returning incorrect values when called consecutively. See forum post for details. Initial pass at revising some of the data structures used in the text parsing and layout process to reduce text object memory overhead. Fixed incorrect positioning of IME window when using a canvas in World Space when no camera is assigned to the canvas. Case #1043535 Added new option to Font Asset Generation Settings to automatically clear dynamic data and atlas texture when creating a build. Replaced the automatic removal of the CanvasRenderer from <TextMeshPro> components with a warning to manually remove this now unnecessary component. Fixed text object properties not being applied correctly when instantiating a text prefab prior to importing TMP Essential Resources. Case #1271192 Fixed default text object properties potentially not being set correctly when instantiating a prefab. Case #1286412 Fixed incorrect parsing and display of UTF32 characters. See forum post for details. Fixed potential material error when updating a font asset generation settings when the font asset is using a non SDF shader. Case #1286132 Fixed minor UI cosmetic issue in the Sprite Asset Sprite Glyph Table inspector. Case #1285022 [3.0.1] - 2020-07-26 [2.1.1] [1.5.1] Changes Addressed compiler warning related to the new virtual event OnPreRenderText. Added one additional layer of missing character search where in the even the missing glyph character \\u0000 or space character \\u0020 is not available in any font asset or potential fallbacks, the End of Text (ETX) \\u0003 will be used instead. Input Field Integer or Decimal validation will now take into account the current culture. See forum post for details. Added Editor only font asset post processor to handle font assets being modified outside of the Unity Editor. Fixed potential Array Out of Bounds error that could occur when using </style> without first using a valid <style>. Case #1263787 and See forum post for details. Fixed potential issue when using multiple <font> tag in the same text object where these referencing several font assets derived from the same font file. Since their Default Material all have the same name, this was causing an issue in the Material Reference Manager. See forum post for details. Case #1264596. [3.0.0] - 2020-06-30 [2.1.0] [1.5.0] Changes Added support to control if a text object is Maskable and affected by UI Mask components. The new setting is found in the Extra Settings section of the <TextMeshProUGUI> component inspector. Fixed potential Null Reference Exception when trying to add characters and / or glyphs to a font asset via scripting and before it has been initialized or ReadFontAssetDefinition() has been called. Fixed incorrect preferred width values when using alternative font weight font assets. Case #1255336 Enabling or disabling the Mesh Renderer of a <TextMeshPro> text object should now also mirror that state on any sub text object renderers as well. Fixed <sprite> incorrect position when this sprite is the only character in the text and when the sprite asset face info has not been defined. Fixed potential Null Reference Exception related to culling when entering play mode. Added OnPreRenderText event delegate to allow potential modification of the text geometry before it is uploaded to the mesh and rendered. Fixed missing warning when the requested character is missing from the font asset or any potential fallbacks. Case #1256879 Fixed potential issue with Underline and StrikeThrough when using alternative typeface. Case #1255336 Fixed potential errors in the Text StyleSheet Inspector when adding or removing Text Styles after resetting the asset. Case #1254602 Fixed text Margin property values not being draggable in the Extra Settings section of the text inspector. Case #1253447 It will no longer be possible to create Editor Presets for the TMP_FontAsset, TMP_SpriteAsset, TMP_StyleSheet, TMP_ColorGradient and TMP_Settings as these are persistent and runtime assets. Case #1251229 [3.0.0-preview.14] - 2020-06-08 [2.1.0-preview.14] [1.5.0-preview.14] Changes Fixed sprite character and sprite glyph scale not being reflected in the text layout. See forum post for details. Fixed potential null reference exception in the CrossFadeColor or CrossFadeAlpha functions. See forum post for details. Minor improvements to the Sprite Asset Importer to improve allocations and address potential error encountered when creating multiple sprite assets. TMP GUID Remapping Tool - Removed \"UnityEditor.Animations.AnimatorController\" from the exclusion search list. Fixed potential culling issue when dynamically updating the content of child text objects of RectMask2D components. Case #1253625 Fixed InvalidOperationException that could occur when changing text Overflow linked components via code. Case #1251283 [3.0.0-preview.13] - 2020-05-22 [2.1.0-preview.13] [1.5.0-preview.13] Changes Fixed potential issue where the Font Asset Creator could get stuck in the packing phase of the atlas generation process. See forum post for details. Fixed issue potentially affecting text layout as a result of the width of the RectTransform being incorrectly reported. See forum post for details. Previously created prefabs containing sub text objects will now have their HideFlags updated to HideFlags.DontSave to be consistent with newly created prefabs whose sub text objects are no longer serialized. Case #1247184 Fixed culling issue where lossy scale was not considered in the determination of the bounds of the text geometry. [3.0.0-preview.12] - 2020-05-09 [2.1.0-preview.12] [1.5.0-preview.12] Changes Added synchronization of the RaycastTarget property of the parent <TextMeshProUGUI> with potential child sub text objects. Case #1240784 Fixed Font Asset Bold Spacing adjustment scaling based on the text object point size instead of current point size. Case #1241132 Improved text alignment when using RTL in conjunction with character, word and other spacing adjustments. Fixed TMP Input Field caret potentially not being visible when reaching the right side of the viewport. See forum post for more details. Fixed TMP Input Field incorrect text RectTransform horizontal adjustment when using the Backspace key. See forum post for more details. Fixed potential null reference in the TextMeshProUGUI.Cull function when using a workflow that involves enabling / disabling Canvases in the scene. Fixed ArgumentOutOfRangeException when using the \"Update Sprite Asset\" inspector option on a sprite asset that does not contain any sprites. Case #1242936 Fixed incorrect culling of the text geometry by the RectMask2D component on newly created text objects. Case #1245445 It is now possible to use the Material Context Menu options to Copy / Paste Material Properties or Atlas Texture originally created for TMP with all other non TMP specific materials. Case #1242671 Fixed NullReferenceException when setting the Atlas Texture to None in the Debug Settings of the Material Inspector of a text object. Case #1245104 [3.0.0-preview.11] - 2020-04-22 [2.1.0-preview.11] [1.5.0-preview.11] Changes Fixed incorrect culling of text object by RectMask2D component when the parent Canvas Render Mode is set to Screen Space - Camera or World Space. Case #1240595 Added special handling to ForceMeshUpdate() when the parent Canvas is disabled. [3.0.0-preview.10] - 2020-04-21 [2.1.0-preview.10] [1.5.0-preview.10] Changes Revised caching of Preferred Width and Height to further reduce the amount of time it has to be recomputed when using a complex structure of Layout components. Fixed potential issue when using Text Overflow Ellipsis and Truncate modes when the text contains characters using superscript, subscript or using the <voffset> tag. Revised culling of text objects when using a RectMask2D where the bounds of the text geometry instead of the RectTransform define the culling rect. Added HDR support to material preset colors. Fixed various formatting issues in this ChangeLog. Added the ability to define a unicode value for a missing sprite character in the TMP Settings. Added support for displaying a missing sprite character when the requested sprite character is not present in the sprite asset or potential fallback(s). This new functionality is only available when trying to reference a sprite by name. Sprite Characters will now have a default Unicode value of 0xFFFE (Private NonCharacter) instead of a Unicode value of 0x0 (default unicode value for missing character). Using the sprite asset context menu option \"Update Sprite Asset\" will now remap sprite characters with unicode value of 0x0 to 0xFFFE in addition to its currently functionality. Updating TMP Essential Resources via the \"Window - TextMeshPro - Import TMP Essential Resources\" menu option will no longer override existing TMP Settings. Minor optimization where SDF Scale on some text objects could be unnecessarily updated due to floating point rounding errors in their lossy scale. Case #1230799 Fixed minor issue where text objects created before importing the required TMP Essential Resources would have no default text. Improvements to line breaking for CJK and mixed Latin and CJK characters. See the following forum post for more details. Fixed potential NullReferenceException that could occur in the TMP InputField on some platforms if the InputSystem reference is null. Case #1232433 Added small padding to bitmap character geometry to prevent potential clipping. Added optimization to ignore very small RectTransform pivot changes that are usually the result of rounding errors when using Layout Components. Case #1237700 Sorting Layer ID and Sorting Order properties located in the Extra Settings of <TextMeshPro> text objects will now serialized when creating Editor Presets. Case #1215750 TextMeshProUGUI sub text objects will now be set as first sibling of their parent to prevent them from being rendered over other non text object child in the scene hierarchy. Fixed text objects becoming visible when set to empty or null as a result of a scale change. Case #1238408 Fixed useMaxVisibleDescender property now getting set properly via scripting. Case #1218526 Fixed SortingLayerID and SortingOrder not getting set correctly when multiple <TextMeshPro> objects are selected. Case #1171272 Fixed default settings getting applied to disabled text objects in the scene hierarchy whose text property was set to null. Case #1151621 Fixed mouse cursor flickering when hovering the Text Input Box of a text prefab with RTL enabled. Case #1206395 [3.0.0-preview.8] - 2020-03-14 [2.1.0-preview.8] [1.5.0-preview.8] Changes Fixed a minor issue where the preferred width of a text object can be incorrect when using multiple font assets, fallbacks and sprites in the same line of text. Added Alpha Fade Speed property to the TMP_DropDown inspector. Minor improvements to the LogWarning related to missing characters in a font asset or fallback being replaced by a space character. Fixed text object geometry not getting clipped when object is outside of RectMask2D. Improved search for potential missing character to include the primary font asset and potential fallbacks when the current font asset is not the primary. Ignorable / Synthesized characters in font assets will only be created if they do not exist in the source font file. Trying to use Text Overflow Ellipsis mode when no Ellipsis character is available in the primary font asset or potential fallbacks will now issue a warning and switch Text Overflow mode to Truncate. Added &ltcolor=lightblue&gt and &ltcolor=grey&gt to pre-defined rich text tag colors. Fixed compatibility issue when using TexturePacker - JSON (Array) mode and the TMP Sprite Asset Importer to create SpriteAssets. Simple fix to prevent the underline rich text tag becoming visible in the TMP Input Field when in IME composition mode with Rich Text disabled on the TMP Input Field. This is a temporary fix until a more robust and flexible solution is implemented. Case #1219969 Sub Text Objects which are created when the text requires the use of a fallback font asset or sprite asset will now use HideFlags.DontSave to prevent them from being save with Prefabs as they are created on demand. Fix incorrect material reference when current font asset is not the primary or a fallback that is missing a character which is present in the primary font asset. [3.0.0-preview.7] - 2020-03-07 [2.1.0-preview.7] [1.5.0-preview.7] Changes Reverted recent change to the TMP_SubMeshUI OnDisable() function that could result in a Missing Reference Exception in the GraphicRaycaster.cs script. See the following forum post. Fixed glyph drawing issue in the Font Asset Inspector Glyph Adjustment Table when Multi Atlas Texture is enabled and the glyph is not located in the main atlas texture or at atlasTextures[0]. Added support for &ltZWSP&gt tag which is internally replaced by a zero width space or \\u200B. Improved line breaking handling when using &ltNBSP&gt and / or &ltNOBR&gt tags where instead of breaking these line segments per character, they will break at any possible soft breaking space when these segments exceed the width of the text container. Improved PreferredHeight calculations and handling when using Text Auto Size. Fixed incorrect color being applied to the underline or strikethrough line segments when using and / or tags along with a tag while at the same time applying an Underline or Strikethrough font style on the whole text object. Fixed SDF Scale not getting updated when using SetText() with StringBuilder when the lossyScale of the text object changes. Case #1216007 Added Non Breaking Space \\u00A0 and Soft Hyphen \\u00AD to list of synthesized characters in the event they are not present in the source font file. Fixed stack overflow issue when using TMP_FontAsset.HasCharacter and TMP_FontAsset.HasCharacters function on font assets that have circular fallback references. Case #1222574 Fixed atlas texture not getting set correctly to IsReadable when switching a static font asset to dynamic in the Generation Settings of the Font Asset Inspector. Added check for RectTransform.sizeDelta change when OnRectTransformDimensionsChange() is called by the Canvas system to get around potential rounding error that erroneously trigger this callback when the RectTransform is using Stretch Anchor mode. As requested by a few users, TMP_FontAsset.faceInfo setter is now public instead of internal. [3.0.0-preview.5] - 2020-02-25 [2.1.0-preview.5] [1.5.0-preview.5] Changes Revised SetText function formatting options to including ability to specify padding for integral part of the value. Revised format is as follows: {Arg Index:Integral Padding.Decimal Precision} Example: TMP_Text.SetText(\"Value = {0:000.00}\", 10.375f); result in \"Value = 010.38\". Fixed issue where text objects isTextObjectScaleStatic property would be ignored when OnCanvasHierarchyChanged() is called. Added a Character, Glyph and Record count to those respective tables in the Font Asset Inspector. Fixed potential Null Reference Exception that would occur when using text Overflow Ellipsis mode with a primary font asset that doesn't contain the Ellipsis character. Case #1209771 Fixed a potential Editor lockup when using text Overflow Page mode. Case #1219055 Fixed Input Field incorrect caret vertical alignment when using the Midline / Vertical Geometry alignment option. Added initial / minimal support for the New Input System. Please use with caution and report any issues. Changes to Font Asset Generation Settings via the Font Asset Inspector will now update the existing glyphs and characters for the new settings instead of clearing them. Text object InternalUpdate() used to handle potential scale changes of text objects now uses willRenderCanvases event instead of onPreCull. This avoids a potential one frame delay in updating of objects and no impact on objects. Case #1216007 [3.0.0-preview.4] - 2020-01-31 [2.1.0-preview.4] [1.5.0-preview.4] Changes Fixed Input Field issue where scrolling events could prevent OnEndEdit event from firing. See forum post for details. Improved Input Field handling of Vertical Scrollbar in conjunction with the ResetOnDeActivation property. Using the Vertical Scrollbar no longer triggers OnEndEdit event. Fixed potential Missing Component Exception that could occur when a TMP_SubMeshUI object is created. Fixed MissingReferenceException when deleting a TMP prefab that is part of a nested prefab. Case #1207793 Improved handling of allocations of newly created text objects with large amount of text. As a result of these revisions, allocations will potentially be reduce by 10X. See #1205923 Fixed potential Null Reference Exception with the TMP DropDown that could occur when using the experimental Editor \"Enter Play Mode\" feature. Case #1207915 Fixed potential issue with the assignment of sub text object materials. Add support for hiding the soft keyboard for Switch in the TMP Input Field. Fixed incorrect Preferred Height when Word Wrapping is disabled on text objects. See forum post for details. Added support for the new Selected state and color to the TMP Input Field. Case #1210496 Fixed additional instances of TMP Resource Importer window being created when deleting the \"TextMesh Pro\" folder just after having imported them. Case #1205848 Added public ITextPreprocessor textPreprocessor; property to allow setting the text preprocessor for a given text component. [3.0.0-preview.3] - 2019-12-16 [2.1.0-preview.3] [1.5.0-preview.3] Changes Fixed potential issue with TMP Dropdown where calling Show() and Hide() in very short interval could result in additional Blockers. Case #1194114 Fixed potential issues that could occur when upgrading to version 1.5.0-preview.2 or newer of the TMP package without also updating the TMP Essential Resources in the project. Added check and warning when trying to create a font asset whose source font file has \"Incl. Font Data\" disabled in the Font Import Settings. Case #1198587 and #1198112 Fixed Ellipsis overflow mode issue when using small caps. Case #1198392 Fixed potential layout issue when adding a Layout Group to the text object itself. Case #1197614 Fixed Font Asset Creator issue where too many adjustment records with adjustment value of zero were added to the font asset. Added support for Line Separator \\u2028 and Paragraph Separator \\u2029. TMP shaders have been moved from \"TextMesh Pro/Resources/Shaders\" folder to \"TextMesh Pro/Shaders\" folder. See the following post for details. Added new experimental SDF and Mobile SDF Shaders that use Screen Space Derivatives (SSD) where these shaders no longer require SDF Scale to be passed via Vertex Attributes. These shaders have higher performance overhead but are more flexible. This overhead should only be noticeable on mobile platforms. Fixed potential text alignment issue where upgrading from package version 1.4.1 to 1.5.0-preview.2 would result in incorrect alignment on prefabs. Case #1198833 Added \\u061C Arabic Letter Mark, \\u200E Left-to-Right Mark and \\u200F Right-to-Left Mark to list of control and non renderable characters. Fixed Missing Reference Exception that would appear when expanding the Extra Settings of a TextMeshPro Preset asset. Case #1201072 Fixed Missing Reference Exception that would appear when editing the Vertex Color or Color Gradient of a TMP component Preset asset. Case #1201069 Fixed Inspector layout issue preventing enabling or disabling the Outline, Underlay, Lighting and Glow features when selecting a Preset asset material. Case #1196963 Revised the Create Material Preset context menu option to issue a warning and ignore materials outside the project. Case #1200109 Added experimental ITextPreprocessor interface to allow users to create custom components to handle text preprocessing and shaping. This interface includes a PreprocessText(string text) function that is called when the object contains a component that inherits from this interface. Added support for Unity Presets in the Editor for both and components. Case #1191793 Fixed missing CanvasRenderer component issue on the Input Field Caret object. Added padding to the 2DRectMask on the TMP Input Field - Text Area object. Optimization to ensure the TMP Update Manager only rebuilds text objects once per frame regardless of the number of cameras in the scene. [2.1.0-preview.2] - 2019-10-30 [1.5.0-preview.2] Changes Fixed Input Field issue when Read Only flag is set preventing the initial setting of the text. Also fixed Read Only flag not being respected when using IME input. Fixed potential infinite loop when using text overflow mode ScrollRect. See Case #1188867 Fixed Input Field culling related issue(s) where text would be incorrectly culled. See https://forum.unity.com/threads/version-1-5-0-2-1-0-preview-1-now-available-for-testing.753587/#post-5023700 Revised handling and referencing of the CanvasRenderer in anticipation of an incoming change to the MaskableGraphic class where it will no longer automatically add a CanvasRenderer to components inheriting from it. As a result, objects will no longer have a CanvasRenderer. Fixed potential NRE when using Overflow Truncate mode with sprites. See https://forum.unity.com/threads/tmpro-stackoverflow-caused-by-tmpro-textmeshprougui-generatetextmesh.750398/page-2#post-5042822 Fixed issue when using font weights in combination of font styles in the editor. Fixed for potential incorrect preferred height. Improved handling of StyleSheet options to reorder, add or delete styles. Fixed Input Field Caret & Selection Highlight potential culling issue when the object was instantiated outside the culling region. Fixed potential issue with registration of text objects in the TMP_UpdateManager. Optimization to suppress callback to InternalUpdate when parent Canvas is disabled. Case #1189820 Fixed Fallback material not getting updated correctly when changing Generation Settings on the Fallback Font Asset. Fixed a typo in the Font Weight section of the Font Asset Editor. Fixed potential ArgumentOutOfRangeException in the Input Field when using Hide Mobile Input and deleting a long string. Case #1162514 Added \"Is Scale Static\" option in the Extra Settings to exclude text objects from InternalUpdate callbacks to improve performance when the object's scale is static. This InternalUpdate callback is used to track potential changes to the scale of text objects to update their SDF Scale. Added the ability to control culling modes for the TMP Shaders. This new option is available in the Debug section of the Material Inspector. New feature requires updating the TMP Essential Resources. See the following post https://forum.unity.com/threads/not-see-textmeshpro-rendering-from-the-back.767510/#post-5112461. Fixed Material Inspector issue when toggling the Record button in the Animation window. Case #1174960 Improved Line Breaking handling for CJK. This also addresses a few reported issues. Case #1171603 Added support for &ltNBSP&gt tag which is internally replaced by a non-breaking space or \\u00A0. Improved performance when retrieving glyph adjustment records when using dynamic font assets. Fixed potential Null Reference Exception in the Editor when assigning new font asset to disabled game object when no previous font asset was assigned. [2.1.0-preview.1] - 2019-09-30 [1.5.0-preview.1] Changes Fixed an issue when using Overflow Ellipsis mode where the Ellipsis character would not be displayed correctly when the preceding character is a sprite. Added the ability to define the Resource path for Style Sheets in the TMP Settings. TMP Style Sheets can now be assigned to text objects in the Extra Settings section of the text object inspector. Added the ability to assign a Style to text objects using the new Text Style property in the text object inspector. A new public property TMP_Text.textStyle was also added. Improved Style Sheet editor to allow sorting of styles in the style sheet. Improved handling of nested styles. Added public TMP_Style GetStyle(string name) to get the potential style by name. Revised the ForceMeshUpdate() function as follows: public void ForceMeshUpdate(bool ignoreActiveState = false, bool forceTextReparsing = false). Fixed SubMeshUI objects text disappearing when saving a scene. Creating Material Presets via the Material Context menu with multi selection will now work as expected and assign the newly created material preset to all selected text objects. Fixed minor issue when changing Material Preset in prefab isolation mode with multiple text objects selected where the new material preset would not be assigned to disabled text objects. Revised Character, Word, Line and Paragraph spacing adjustments to be in font units (em) where a value of 1 represents 1/100 em. Added TMP_Text.onFontAssetRequest and TMP_Text.onSpriteAssetRequest events to allow users to implement custom asset loading when using the &ltfont=\"Font Asset Name\"&gt and &ltsprite=\"Sprite Asset Name\"&gt tags. Additional Shader Channels on the Canvas will be set to TexCoord1, Normal and Tangents or Mixed when using TMP Surface Shaders. Otherwise it will be set to TexCoord1 only. Case #1100696 Added new attribute to the &ltmark&gt tag to allow users to define a padding value for the mark / highlight region. Example: &ltmark color=#FFFF0080 padding=\"1.0,1.0,0.0,0.0\"&gt where padding=\"Left, Right, Top, Bottom\". Fixed an issue which could result in out of range exception when referencing sprites contained in fallback sprite assets using unicode values. Fixed an issue in the Font Asset Creator where the source font file property of the newly created font asset was not getting set. Added .blend files to exclusion asset scan list of the Project GUID Remapping tool. Fixed issue where Caret position would be incorrect when using IME. Case #1146626 Clamped Outline Softness to a value of 0-1 in the TMP Distance Field shader which makes it consistent with other SDF Shaders. Case #1136161 Text Auto-Sizing Min and Max values are now clamped between 0 and 32767. Case #1067717 Text Font Size Min and Max values are now clamped between 0 and 32767. Case #1164407 Rich Text Tag values are now limited to a maximum value of 32767. Added Placeholder option to TMP Dropdown. Placeholder text is displayed when selection value is -1. Also added example scene in the TMP Examples & Extras. Added the ability to define Face Info metrics per Sprite Assets. This will provide for more consistent scaling of the sprites regardless of the font asset used. Sprite Assets with undefined Face Info will continue to inherit the Face Info metrics of the current font asset. Added Update Sprite Asset option in the header of the Sprite Asset inspector. This increases the discoverability of this option already available via the Sprite Asset Context Menu. Revised the text auto-sizing handling in regards to maximum iteration threshold which could result in a crash on some Android devices. Case #1141328 Font Asset Generation Settings are now disabled in the inspector if the Source Font File is missing or if the Atlas Population Mode is set to static. Fixed vertical alignment issue when using Overflow Page mode. Improved handling of text auto-size line adjustment spacing resulting in fewer iterations and more accurate resulting point size. Added support for Layout Elements to the TMP Input Field. = Fixed text alignment issue with TMP Input Field when using Center alignment on the underlying text component. Setting ContentType.Custom on the TMP Input Field will no longer hide the Soft Keyboard. The Soft Keyboard can now be control independently via the shouldHideSoftKeyboard property. Added new Font Asset Context Menu option \"Force Upgrade To Version 1.1.0\" for convenience purposes in case a font asset didn't get upgraded automatically when migrating from version 1.3.0 to 1.4.x or 2.0.x. The &ltgradient&gt tag now as an optional attribute \"tint=0\" or \"tint=1\" controlling whether or not the gradient will be affect by vertex color. The alpha of the gradient will continue to be affected by the vertex color alpha. Added new angle=x attribute to the &lti&gt tag where the value of x define the italic slant angle. Since the legacy TextContainer used by TMP has been deprecated, it was removed from the Layout Context Menu options. Improved character positioning when using italic text where large angle / slant would potentially result in uneven spacing between normal and italic blocks of text. Fixed an issue where &ltmspace&gt and &ltcspace&gt tags would not be handled correctly in conjunction with word wrapping. Fixed issue in the TMP_Dropdown.cs that was affecting navigation. Case 1162600. See https://forum.unity.com/threads/huge-bug-missing-a-code-line-since-1-4-0.693421/ Fixed an issue related to kerning where the glyph adjustment values did not account for the upsampling of the legacy SDF modes like SDF8 / SDF16 and SDF32. Made the TMP_Text.text property virtual. Fixed Material Preset of fallback materials getting modified when the TMP Settings Match Material Preset option is disabled. Added ShaderUtilities.ID_GlowInner to list of material property IDs. Fixed potential null reference exception when creating new text objects when no default font asset has been assigned in the TMP Settings and the LiberationSans SDF font asset has been deleted from the project. Case #1161120 Fixed import TMP Essential Resources button being disabled when importing the TMP Examples & Extras first. Case #1163979 Fixed potential ArgumentOutOfRangeException when Hide Mobile Input is enabled and deleting the last character in the text. Case #1162514 Improved handling of manual addition of glyph positional adjustment pairs for both dynamic and static font assets. Case #1165763 Fixed issue where text in the TMP_InputField would disappear due to incorrect culling. Case #1164096 Fixed potential IndexOutOfRangeException that could be thrown when using the Pinyin IME interface and typing very fast to enter Chinese text. Case #1164383 Added support for Vertical Tab \\v which inserts a line break but not a paragraph break. Added support for Shift Enter in the TMP Input Field which inserts a Vertical Tab in the text in Multi Line mode. Fixed text horizontal alignment when lines of text only contain the Ellipsis \\u2026 Unicode character. Case #1162685 Text alignment is now serialized into separate fields for horizontal and vertical alignment and can now be get / set independently via TMP_Text.horizontalAlignment and TMP_Text.verticalAlignment. The TMP_Text.alignment property remains and uses the new serialized fields for horizontal and vertical alignment. Improved handling of Soft Hyphens when using Text Auto-Size. Fixed Null character being passed to Validate method of the TMP_InputField. Case #1172102 Fixed an issue where the Preferred Width and Height were not correct when using Tabs. The Cull Transparent Mesh flag on TMP_SubMeshUI objects will now mirror the settings on the parent text object's CanvasRenderer. Updated Sprite Importer to improve compatibility with Texture Packer Json Array export format. Newly created StyleSheets will be pinged in the project tab. Case #1182117 Added new option in the TMP Settings to control line breaking rules for Hangul to enabled Modern line breaking or traditional line breaking. Fixed potential issue related to SDF Scaling when the scale of the text object is negative. See https://forum.unity.com/threads/version-1-4-1-preview-1-with-dynamic-sdf-for-unity-2018-3-now-available.622420/page-5#post-4958240 for details. Added validation check for Sprite Data Source file in the Sprite Asset Importer. Case #1186620 Added warning when using Create - TextMeshPro - Sprite Asset menu when no valid texture is selected. Case #1163982 Fixed potential cosmetic issue in the text component inspector when using Overflow Linked mode. Case #1177640 [1.4.1] - 2019-04-12 Changes Improved handling of font asset automatic upgrade to version 1.1.0 which is required to support the new Dynamic SDF system. Made release compatible with .Net 3.5 scripting runtime. [1.4.0] - 2019-03-07 Changes Same release as 1.4.0-preview.3a. [1.4.0-preview.3a] - 2019-02-28 Changes Improved performance of the Project Files GUID Remapping Tool. Fixed an issue with the TMP_FontAsset.TryAddCharacters() functions which was resulting in an error when added characters exceeded the capacity of the atlas texture. Updated TMP_FontAsset.TryAddCharacters functions to add new overloads returning list of characters that could not be added. Added function in OnEnable of FontAsset Editor's to clean up Fallback list to remove any null / empty entries. Added support for Stereo rendering to the TMP Distance Field and Mobile Distance Field shaders. [1.4.0-preview.2a] - 2019-02-14 Changes Fixed an issue with SDF Scale handling where the text object would not render correctly after the object scale had been set to zero. Fixed an issue with the TMP_UpdateManager where text objects were not getting unregistered correctly. Any changes to Font Asset Creation Settings' padding, atlas width and / or atlas height will now result in all Material Presets for the given font asset to also be updated. Added new section in the TMP Settings related to the new Dynamic Font System. Added new property in the Dynamic Font System section to determine if OpenType Font Features will be retrieved from source font files at runtime as new characters are added to font assets. Glyph Adjustment Data (Kerning) is the only feature currently supported. Fix an issue where font assets created at runtime were not getting their asset version number set to \"1.1.0\". Improved parsing of the text file used in the Font Asset Creator and \"Characters from File\" option to handle UTF16 \"\\u\" and UTF32 \"\\U\" escape character sequences. Fixed a Null Reference Error (NRE) that could occur when using the &ltfont&gt tag with an invalid font name followed by the &ltsprite&gt tag. The Glyph Adjustment Table presentation and internal data structure has been changed to facilitate the future addition of OpenType font features. See https://forum.unity.com/threads/version-1-4-0-preview-with-dynamic-sdf-for-unity-2018-3-now-available.622420/#post-4206595 for more details. Fixed an issue with the &ltrotate&gt tag incorrectly affecting character spacing. [1.4.0-preview.1] - 2019-01-30 Changes Renamed TMPro_FontUtilities to TMP_FontAssetCommon to more accurately reflect the content of this file. Accessing the TextMesh Pro Settings via the new Edit - Settings menu when TMP Essential Resources have not yet been imported in the project will no longer open a new window to provide the options to import these resources. Fixed an issue where using int.MaxValue, int.MinValue, float.MaxValue and float.MinValue in conjunction with SetText() would display incorrect numerical values. Case #1078521. Added public setter to the TMP Settings' missingGlyphCharacter to allow changing which character will be used for missing characters via scripting. Fixed a potential Null Reference Exception related to loading the Default Style Sheet. Added compiler conditional to TMP_UpdateManager.cs to address changes to SRP. Improved the &ltmargin&gt tag to make it possible to define both left and right margin values. Example: &ltmargin left=10% right=10px&gt. Added new menu option to allow the quick creation of a UI Button using TMP. New menu option is located in Create - UI - Button (TextMeshPro). Renamed TMP related create menu options. Fixed TMP object creation handling when using Prefab isolation mode. Case #1077392 Fixed another issue related to Prefabs where some serialized properties of the text object would incorrectly show up in the Overrides prefab options. Case #1093101 Fixed issue where changing the Sorting Layer or Sorting Order of a object would not dirty the scene. Case #1069776 Fixed a text alignment issue when setting text alignment on disabled text objects. Case #1047771 Fixed an issue where text object bounds were not set correctly on newly created text objects or in some cases when setting the text to null or string.empty. Case #1093388 Fixed an issue in the IntToString() function that could result in Index Out Of Bounds error. Case #1102007 Changed the TMP_InputField IsValidChar function to protected virtual. The \"Allow Rich Text Editing\" property of the TMP_InputField is now set to false by default. Added new option to the Sprite Asset context menu to make it easier to update sprite glyphs edited via the Unity Sprite Editor. Added new Sharpness slider in the Debug section of the SDF Material inspector. Fixed an error that would occur when using the context menu Reset on text component. Case #1044726 Fixed issue where CharacterInfo.index would be incorrect as a result of using Surrogate Pairs in the text. Case #1037828 The TMP_EditorPanel and TMP_UiEditorPanel now have their \"UseForChildren\" flag set to true to enable user / custom inspectors to inherit from them. Fixed an issue where rich text tags using pixel (px) or font units (em) were not correctly accounting for orthographic camera mode. This change only affects the normal TMP text component. Fixed an inspector issue related to changes to the margin in the TMP Extra Settings panel. Case #1114253 Added new property to Glyph Adjustment Pairs which determines if Character Spacing Adjustments should affect the given pair. Updated the Glyph Adjustment Table where ID now represents the unicode (hex) value for the character instead of its decimal value. Added new SetValueWithoutNotify() function to TMP_DropDown and SetTextWithoutNotify() function to TMP_InputField allowing these to be set without triggering OnValueChanged event. Geometry buffer deallocation which normally takes place when current allocations exceed those of the new text by more than 256 characters will no longer occur if the new text is set to null or string.empty. Fixed a minor issue where the underline SDF scale would be incorrect when the underline text sequence contained normal size characters and ended with a subscript or superscript character. Fixed an error that would occur when using the Reset Context menu on a Material using the SDF Surface or Mobile SDF Surface Shaders. Case #1122279 Resolved a Null Reference Error that would appear when cycling through the text overflow modes. Case #1121624 [1.3.0] - 2018-08-09 Changes Revamped UI to conform to Unity Human Interface Guidelines. Updated the title text on the Font Asset Creator window tab to \"Font Asset Creator\". Using TMP_Text.SetCharArray() with an empty char[] array will now clear the text. Made a small improvement to the TMP Input Field when using nested 2d RectMasks. Renamed symbol defines used by TMP to append TMP_ in front of the define to avoid potential conflicts with user defines. Improved the Project Files GUID Remapping tool to allow specifying a target folder to scan. Added the ability to cancel the scanning process used by the Project Files GUID Remapping tool. Moved TMP Settings to universal settings window in 2018.3 and above. Changing style sheet in the TMP Settings will now be reflected automatically on existing text objects in the editor. Added new function TMP_StyleSheet.UpdateStyleSheet() to update the internal reference to which style sheet text objects should be using in conjunction with the style tag. [1.2.4] - 2018-06-10 Changes Fixed a minor issue when using Justified and Flush alignment in conjunction with \\u00A0. The Font Asset creationSettings field is no longer an Editor only serialized field. [1.2.3] - 2018-05-29 Changes Added new bitmap shader with support for Custom Font Atlas texture. This shader also includes a new property \"Padding\" to provide control over the geometry padding to closely fit a modified / custom font atlas texture. Fixed an issue with ForceMeshUpdate(bool ignoreActiveState) not being handled correctly. Cleaned up memory allocations from repeated use of the Font Asset Creator. Sprites are now scaled based on the current font instead of the primary font asset assigned to the text object. It is now possible to recall the most recent settings used when creating a font asset in the Font Asset Creator. Newly created font assets now contain the settings used when they were last created. This will make the process of updating / regenerating font assets much easier. New context menu \"Update Font Asset\" was added to the Font Asset inspector which will open the Font Asset Creator with the most recently used settings for that font asset. New Context Menu \"Create Font Asset\" was added to the Font inspector panel which will open the Font Asset Creator with this source font file already selected. Fixed 3 compiler warnings that would appear when using .Net 4.x. Modified the TMP Settings to place the Missing Glyph options in their own section. Renamed a symbol used for internal debugging to avoid potential conflicts with other user project defines. TMP Sprite Importer \"Create Sprite Asset\" and \"Save Sprite Asset\" options are disabled unless a Sprite Data Source, Import Format and Sprite Texture Atlas are provided. Improved the performance of the Project Files GUID Remapping tool. Users will now be prompted to import the TMP Essential Resources when using the Font Asset Creator if such resources have not already been imported. [1.2.2] - 2018-03-28 Changes Calling SetAllDirty() on a TMP text component will now force a regeneration of the text object including re-parsing of the text. Fixed potential Null Reference Exception that could occur when assigning a new fallback font asset. Removed public from test classes. Fixed an issue where using nested links (which doesn't make sense conceptually) would result in an error. Should accidental use of nested links occurs, the last / most nested ends up being used. Fixed a potential text alignment issue where an hyphen at the end of a line followed by a new line containing a single word too long to fit the text container would result in miss alignment of the hyphen. Updated package license. Non-Breaking Space character (0xA0) will now be excluded from word spacing adjustments when using Justified or Flush text alignment. Improved handling of Underline, Strikethrough and Mark tag with regards to vertex color and Color tag alpha. Improved TMP_FontAsset.HasCharacter(char character, bool searchFallbacks) to include a recursive search of fallbacks as well as TMP Settings fallback list and default font asset. The &ltgradient&gt tag will now also apply to sprites provided the sprite tint attribute is set to a value of 1. Ex. &ltsprite=\"Sprite Asset\" index=0 tint=1&gt. Updated Font Asset Creator Plugin to allow for cancellation of the font asset generation process. Added callback to support the Scriptable Render Pipeline (SRP) with the normal TextMeshPro component. Improved handling of some non-breaking space characters which should not be ignored at the end of a line. Sprite Asset fallbacks will now be searched when using the &ltsprite&gt tag and referencing a sprite by Unicode or by Name. Updated EmojiOne samples from https://www.emojione.com/ and added attribution. Removed the 32bit versions of the TMP Plugins used by the Font Asset Creator since the Unity Editor is now only available as 64bit. The isTextTruncated property is now serialized. Added new event handler to the TMP_TextEventHandler.cs script included in Example 12a to allow tracking of interactions with Sprites. [1.2.1] - 2018-02-14 Changes Package is now backwards compatible with Unity 2018.1. Renamed Assembly Definitions (.asmdef) to new UPM package conventions. Added DisplayName for TMP UPM package. Revised Editor and Playmode tests to ignore / skip over the tests if the required resources are not present in the project. Revised implementation of Font Asset Creator progress bar to use Unity's EditorGUI.ProgressBar instead of custom texture. Fixed an issue where using the material tag in conjunction with fallback font assets was not handled correctly. Fixed an issue where changing the fontStyle property in conjunction with using alternative typefaces / font weights would not correctly trigger a regeneration of the text object. [1.2.0] - 2018-01-23 Changes Package version # increased to 1.2.0 which is the first release for Unity 2018.2. [1.1.0] - 2018-01-23 Changes Package version # increased to 1.1.0 which is the first release for Unity 2018.1. [1.0.27] - 2018-01-16 Changes Fixed an issue where setting the TMP_InputField.text property to null would result in an error. Fixed issue with Raycast Target state not getting serialized properly when saving / reloading a scene. Changed reference to PrefabUtility.GetPrefabParent() to PrefabUtility.GetCorrespondingObjectFromSource() to reflect public API change in 2018.2 Option to import package essential resources will only be presented to users when accessing a TMP component or the TMP Settings file via the project menu. [1.0.26] - 2018-01-10 Added Removed Tizen player references in the TMP_InputField as the Tizen player is no longer supported as of Unity 2018.1. [1.0.25] - 2018-01-05 Added Fixed a minor issue with PreferredValues calculation in conjunction with using text auto-sizing. Improved Kerning handling where it is now possible to define positional adjustments for the first and second glyph in the pair. Renamed Kerning Info Table to Glyph Adjustment Table to better reflect the added functionality of this table. Added Search toolbar to the Glyph Adjustment Table. Fixed incorrect detection / handling of Asset Serialization mode in the Project Conversion Utility. Removed SelectionBase attribute from TMP components. Revised TMP Shaders to support the new UNITY_UI_CLIP_RECT shader keyword which can provide a performance improvement of up to 30% on some devices. Added TMP_PRESENT define as per the request of several third party asset publishers. [1.0.23] - 2017-11-14 Added New menu option added to Import Examples and additional content like Font Assets, Materials Presets, etc for TextMesh Pro. This new menu option is located in \"Window -> TextMeshPro -> Import Examples and Extra Content\". New menu option added to Convert existing project files and assets created with either the Source Code or DLL only version of TextMesh Pro. Please be sure to backup your project before using this option. The new menu option is located in \"Window -> TextMeshPro -> Project Files GUID Remapping Tool\". Added Assembly Definitions for the TMP Runtime and Editor scripts. Added support for the UI DirtyLayoutCallback, DirtyVerticesCallback and DirtyMaterialCallback."
  },
  "Library/PackageCache/com.unity.textmeshpro@3.0.6/Documentation~/TextMeshPro.html": {
    "href": "Library/PackageCache/com.unity.textmeshpro@3.0.6/Documentation~/TextMeshPro.html",
    "title": "TextMesh Pro User Guide | Cacher Game",
    "summary": "TextMesh Pro User Guide Overview This User Guide was designed to provide first time users of TextMesh Pro with a basic overview of the features and functionality of the tool. Installation The TextMesh Pro UPM package is already included with the Unity Editor and as such does not require installation. TextMesh Pro \"TMP\" does however require adding resources to your project which are essential for using TextMesh Pro. To import the \"TMP Essential Resources\", please use the \"Window -> TextMeshPro -> Import TMP Essential Resources\" menu option. These resources will be added at the root of your project in the \"TextMesh Pro\" folder. The TextMesh Pro package also includes additional resources and examples that will make discovering and learning about TextMesh Pro's powerful features easier. It is strongly recommended that first time users import these additional resources. To import the \"TMP Examples & Extras\", please use the \"Window -> TextMeshPro -> Import TMP Examples & Extras\" menu option. These resources will also be added in the same \"TextMesh Pro\" folder inside your project. Quick Start There are two TextMesh Pro components available. The first TMP text component is of type <TextMeshPro> and designed to work with the MeshRenderer. This component is an ideal replacement for the legacy TextMesh component. To add a new <TextMeshPro> text object, go to: �GameObject->3D Object->TextMeshPro Text�. The second TMP text component is of type <TextMeshProUGUI> and designed to work with the CanvasRenderer and Canvas system. This component is an ideal replacement for the UI.Text component. To add a new <TextMeshProUGUI> text object, go to: �GameObject->UI->TextMeshPro Text�. You may also wish to watch this Getting Started short video which covers this topic. We strongly recommend that you also watch the Font Asset Creation video as well as the Working with Material Presets as these two topics is also key to working and getting the most out of TextMesh Pro. As mentionned in the Installation section of this guide, it is recommended that you import the \"TMP Examples & Extras\" and take the time to explore each of the examples as they provide a great overview of the functionality of the tool and the many text layout and rich text tags available in TextMesh Pro. Support & API Documentation Should you have questions or require assistance, please visit the Unity UI & TextMesh Pro section of the Unity forum as well as the TextMesh Pro User Forum where you will find additional information, Video Tutorials and FAQ. In the event you are unable to find the information you seek, always feel free to post on the Unity UI & TextMesh Pro section user forum. Online Documentation is also available on TextMesh Pro including Rich Text tags, Shaders, Scripting API and more."
  },
  "Library/PackageCache/com.unity.textmeshpro@3.0.6/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.textmeshpro@3.0.6/LICENSE.html",
    "title": "| Cacher Game",
    "summary": "TextMesh Pro copyright © 2021 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/CHANGELOG.html",
    "title": "Changelog | Cacher Game",
    "summary": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog [1.7.6] - 2023-10-05 Fixed Fixed issue where a warning would be logged in the console for TrackAsset (TB-229). Fixed issue where changing the name of a group track was not undoable (TB-218). Fixed performance regression when rebuilding the playable graph. [1.7.5] - 2023-06-15 Fixed Fixed issue where exceptions were thrown when different ControlTracks are referencing the same TimelineAsset (IN-21163). The Text Track sample has been updated to use the com.unity.ugui package. Removed usage of deprecated API: UnityEditor.MemoryProfiler [1.7.4] - 2023-03-08 Fixed Fixed issue where previewing the Timeline would create prefab property modifications [1.7.3] - 2023-01-31 Fixed Fixed issue where modifying curves on an animation clip did not trigger an evaluation of the graph when the Timeline Window is hidden. (TB-117) [1.7.2] - 2022-09-12 Fixed Fixed an issue where menu items related to track, marker and clip types in contextual menus would be in arbitrary order in some versions of Unity. Menu items related to types will now be sorted based on their full names, including the assembly name. Fix post-extrapolation mode change not recalculating previous clip pre-extrapolation time. ([ATL-1291]) Fixed an issue where prefab overrides would be created when keyframing a prefab instance in Timeline. ([TB-108]) Fixed an issue where a warning would be raised when using the undo history to undo multiple timeline interactions([TB-119]) Fixed an issue where in some cases a NullReferenceException would be thrown in the PlayableDirector inspector after a TimelineAsset would be unloaded in the Editor([TB-129]) Fixed an issue with the NoFoldOut attribute drawer, which was behaving incorrectly when used outside of the sample context. ([TB-132]) [1.7.1] - 2022-03-07 Fixed Fixed warnings related to meta files related to missing folders. [1.7.0] - 2022-02-21 Added Added TimelinePlaybackControls Editor API: The Playback controls API lets you drive the Timeline Window playback controls from code. From this API, you can Change the current Time/Frame Query the current Time/Frame Start/Stop playback of the currently shown Timeline Go to First or Last frame Go to previous or next frame. Use it to accelerate your workflow, or build your own workflows on top of Timeline. Changed [Requires Unity 2021.2] Fixed an issue where the last frame of a Timeline was not guaranteed to be executed when the Playable Director had Wrap Mode None. License file header changed from \"Timeline copyright © 2021 Unity Technologies ApS\" to \"Timeline copyright © 2021 Unity Technologies\" Fixed Fixed an issue where unused TrackAssets would be saved in the TimelineAsset file after removing tracks. Fixed an issue where grouped markers at time zero would sometimes disappear after clicking on them (https://issuetracker.unity3d.com/issues/timeline-markers-disappear-when-double-clicking-on-stacked-markers-at-0-frames) Fixed an issue where selecting a prefab in the project view could trigger an exception when parenting the prefab to a prefab sub-object. (1386125) Fixed an issue where duplicated or pasted tracks that were part of group tracks would lose their associated bindings (https://issuetracker.unity3d.com/issues/duplicated-track-groups-lose-their-nester-tracks-game-object-assignments) Fixed an issue where pasting a track after changing scenes would lose PlayableAsset references in clips (https://issuetracker.unity3d.com/issues/animation-tracks-copy-loses-its-properties-when-its-pasted-from-another-scene) Fixed an issue where the Timeline Window play range would not be serialized and persisted. Fixed an issue where clicking on a clip during Play Mode would evaluate the Timeline unnecessarily. (https://issuetracker.unity3d.com/issues/timeline-rebuilds-playable-graph-when-selecting-a-timeline-clip-during-play-mode) Fixed an issue where control clips would behave inconsistently if the clip was set to hold, but the PlayableDirector was set to not extrapolate. (https://issuetracker.unity3d.com/product/unity/issues/guid/1375771) Fixed issue where a warning would appear in 2022.1 regarding AnimationWindowState.SnapMode. [Requires Unity 2021.2] Fixed an issue where the last frame of a Timeline was not guaranteed to be executed when the Playable Director had Wrap Mode None. Fixed an issue where the Timeline Window's UI would not update until the user clicked in the window if the TimelineAsset's file contents were changed on disk, such as during a version control operation 1357110 [1.6.3] - 2021-10-20 Fixed Fixed an issue where the Timeline Window would not work correctly with read-only source controlled files. Fixed an issue where the a MissingReferenceException would be thrown when an IAnimationWindowPreview component previewed by Timeline would be destroyed. (https://issuetracker.unity3d.com/issues/missingreferenceexception-is-thrown-when-using-rigbuilder-inside-a-prefab) Fixed an issue where the \"Match Content\" action would not apply on all selected clips. (1368028) [1.6.2] - 2021-08-05 Fixed Fixed an issue where copy-pasting Timeline Clips that contain Generic Lists of ExposedReferences would cause a NullReferenceException (1332377) [1.6.1] - 2021-06-22 Added ClipDrawOptions.hideScaleIndicator can now be used to disable the clip scale indicator. Added an asterisk to the Timeline Window when the currently edited Timeline Asset is dirty (has unsaved changes). (1024230) Added the IInspectorChangeHandler interface to change what happens when a UI component in the inspector is modified. (1283486) (Unity 2020.2+ only) The Timeline window title displays an asterisk when there are unsaved changes. Double click now toggles the collapsed state of group tracks. A keyboard shortcut can now be mapped to expand or collapse group tracks. Added displayClipName property to ClipDrawOption. Use displayClipName to display (true) or hide (false) the clip name. New API added to TimelineEditorWindow: TimelineNavigator. Enables navigation between timelines and nested timelines through code for automation purposes. Gives access to Timeline window breadcrumbs. (Unity 2021.2+ only) Added Framelocked preview option in Timeline preferences. Added framerate display with standard framerates. TimelineAsset framerate can be set with a StandardFramerate value. (TimelineAsset.SetStandardFramerate) Changed Removed non-working PlayRange options (Loop/Hold) as both were actually mapping to Loop behaviour and always have been. Timeline settings menu has been modified to use standard framerates in framerate submenu. TimelineAsset.fps is obsolete and is replaced by TimelineAsset.frameRate. TimelineProjectSettings.assetDefaultFramerate is obsolete and is replaced by TimelineProjectSettings.defaultFramerate. Fixed Removed GC allocations in PlayableDirector.duration when a timeline asset is assigned. (1298818) Removed warnings with AnimationWindowState snap mode. (1306205) Fixed issue where the \"Navigate Right\" (default key: Right Arrow ▶) would not behave consistently. The correct order of operations should now always be, in order: expand group, select first track of group, then select first item of the track. Fixed frame display not rounding up correctly. (1333009) Fixed an issue where TimelinePlayable duration would not be initialized if the playable is not created from the PlayableDirector. (1329151) Fixed memory leak in custom playable inspectors. (1332377) Fixed exception when using the Key All Animated shortcut with no Timeline selected. (1334339) Fixed issue where a warning would appear regarding obsolete AnimationWindowState.SnapMode values. [1.5.5] - 2021-04-30 Fixed Fixed an issue in the Curves view where the color indicator was sized incorrectly on high-res displays. (1318782) Fixed a rare issue where keyframes were created for Playable Curves when switching to play mode. (1319124) Fixed an issue where clearing the Unity selection did not refresh the Timeline window. (1320260) Fixed an issue with IAnimationWindowPreview.StartPreview not getting called for sub timelines. (1322571) Fixed an issue where the curve color identifiers would overlap property names when the Timeline window was resized. (1323591) Fixed a regression where changes made to clip curves would not be processed until another modification caused a graph rebuild. Fixed compilation issue on 2020.1 due to incorrect version checks. Fixed issue where text labels were incorrectly displayed when the mouse pointer was located above a clip. [1.5.4] - 2021-03-10 Fixed Fixed issue where the horizontal scrollbar could not be moved or resized. [1.5.3] - 2021-03-05 Changed Disabled edition of Track Asset Inspector Script field as it could break Timeline Assets. Fixed Fixed issue where the timeline header track would automatically open during a drag and drop operation. (1305436) Fixed a rare issue where some broken tracks could not be removed. (1305388) Fixed rare issue where the time field could not be edited after opening a timeline. (1312198) Fixed cosmetic issue where the duration marker was drawn over the scroll bar. Fixed issue where times without a decimal separator (. or , depending on locale) would not be interpreted correctly by the time field. (1315605) Fixed issue where a selection rectangle could not be made when started inside a track. (1315840) Performing Undo/Redo will not affect Timeline window selection when the window is locked. (Selecting sub-timelines can still be undone). (1313515) Fixed an issue where text would be clipped in the track header binding. (1302401) Fixed issue where clicking in the Timeline window while there is no active timeline would throw an exception. [1.5.2] - 2021-01-08 Added During recording, there are new ways to key animated properties: A new Inspector context menu has been added (Key All Animated) that sets a key to all currently animated properties. It is possible to make a multi-selection of tracks to set a keyframe to all currently animated properties. If no track is selected, all recording tracks are keyed. If properties are selected in the curve editor, only those properties are keyed. TimelineEditor.GetWindow and TimelineEditor.GetOrCreateWindow to get the current Timeline window or create a Timeline window. TimelineEditorWindow.SetCurrentTimeline to change which timeline asset is opened in the Timeline window. TimelineEditorWindow.lock to lock or unlock the Timeline window. TrackExtensions.GetCollapsed, TrackExtensions.SetCollapsed, TrackExtensions.IsVisibleRecursive to get and change the visibility state of a track. AnimationTrackExtensions.IsRecording, AnimationTrackExtensions.SetRecording, AnimationTrackExtensions.SupportsRecording to get or change the recording state of an Animation track. Added two methods in TrackEditor to control how an object is bound to a track: IsBindingAssignableFrom and GetBindingFrom. Added Japanese translation. The Timeline window will automatically rebuild the graph when a notifications's properties are changed. The Timeline window will be automatically refreshed when a marker's properties are changed. Added TimelineEditor.GetInspectedTimeFromMasterTime and TimelineEditor.GetMasterTimeFromInspectedTime to convert time from master to inspected timeline and vice versa when using sub-timelines. Added API to improve how to get/set a TimelineClip's parent track: TimelineClip.GetParentTrack (replaces obsolete property getter) ItemsUtils.SetParentTrack (extension method thar replaces obsolete property setter) Added a new Seconds time display mode and renamed previous Seconds mode to Timecode. TimelinePreferences.timeFormat field, UnityEditor.Timeline.TimeFormat enum. Added API for the user to clip to the track area: API: Relevant member to MarkerOverlayRegion, API: MarkerOverlayRegion.trackRegion, API: MarkerOverlayRegion constructor. Added Gameplay sequence sample. This sample demonstrates how Timeline can be used to create a small in-game moment, using built-in tracks. Added Customization sample. This sample demonstrates how to create custom tracks, clips, markers and actions. Changed The binding field on a track header will change its background color when dragging a valid object on it. Timeline marker track is now selectable. TimelineClip property parentTrack is now obsolete. TimelinePreferences.timeUnitInFrames is now obsolete. Fixed Fixed a bug affecting the conversion between seconds and frames in the inspector. Fixed issue where KeyAllAnimated was available when right-clicking on markers and tracks that were not in record mode. (1270304) Fixed issue where the mouse cursor would stay stuck to a resize icon when resizing the track header. (1076031) Fixed case where an animation event at time 0 would not fire on a timeline loop. (1184106) Fixed issue where Timeline objects (ie. TrackAsset, ControlTrack, SignalAsset, etc.) would have incorrect links to the documentation pages. Available starting from Unity 2021.1. (1082941) Fixed multiple issues related to blends Fix display of blends when clips have ease-in/ease-out (1178066) Fix clip disappearing when dragging it from left to right completely inside another clip. Fix select and drag clip discarding foreground display rule of selected clip after releasing the drag. Fix fully blended clips selection not available. (1289912) Fixed issue where the clip display would flicker when moving two clips that are completely overlapped. (1085679) The Timeline window will no longer revert to editing only the asset if the user uses the Timeline selector to pick a game object and switches focus. (1291455) Create button on timeline panel no longer defaults to an invalid path. (1289923) Fixed issue where Timeline's bindings field would loses names and bindings when selecting clips. (1293941) Make Timeline's duration result displayed in the Inspector, when switching from duration mode: Based On Clips to Fixed Length, closer to the actual duration. (1156920) Copy/Paste of clips in the Timeline Window will no longer paste clips at an invalid time in mix-mode. (1289925) [1.4.5] - 2020-11-19 Fixed Fixed issue where changing a clip's extrapolation values would clear the current clip selection. (936046) Fixed multiple issues related to the curves view: Fixed curve removal not functioning with PlayableAssets (clips & tracks curves). (1231002) Fixed inconsistent icon display on curves. Fixed incorrect ordering of properties. Properties now have a object/type/property ordering. Fixed unnecessary grouping of fields. Changed context menu from Remove Properties to Remove Curves to better reflect the change in functionality between curves for GameObjects and curves for PlayableAssets. Fixed behaviour where removing a single field in a Position, Rotation or Scale group would remove the entire group. Fixed case where pausing in Playmode and switching the active director in editor could pause the director. (1263707) Material properties are now displayed by their shader name in the curves view when possible. (1115961) Fixed issue where a signal could be pasted on a track that doesn't support notifications. (1283763) Fixed issue where a clip could be paseted on an incompatible track. (1283763) Fixed errors when leaving prefab mode when a timeline is opened. (1280331) No preview will be shown when the PlayableDirector is disabled. (1286198) Fixed issue where an infinite clip's Foot Ik property was not visible in the Inspector when selecting its track. (1279824) Fixed issue where child particle systems were not controlled correctly when they are not subemitters. (1212943) Fixed inconsistent recording behaviour on audio tracks and PlayableAssets. Default values are changed when a value is not recorded, and the key added/updated when a value is already animated. (1283453) Fixed issue where the curves view for tracks and PlayableAssets would not update when changed externally (such as from the Animation window). Fixed Add Key/Remove Key context menus not being properly enabled in some cases when using tracks and PlayableAssets. Fixed simulation of subemitters when scrubbing a timeline. (1142781) Fixed choppy playback of particles with a large fixed time step. (1262234) [1.4.4] - 2020-10-09 Fixed Disable drag and drop of Signal asset on Control Track. (1222760) Fixed system locale causing issues when keying float values on custom clips. (1190877) Fixed issue where recording to a clip would place keys on the frame. (1274892) Fixed keyboard clip selection from locked tracks. (1233612) Fixed issue where the Timeline window would stay locked even when no timeline asset is shown. (1278598) Fixed issue where invoking SelectLeft or SelectRight shortcuts on a group track, the group would not collapse or expand. (1279379) Fixed Blend Curve Editor from the clip's inspector that was not responding correctly to undo and redo commands. (978673) Fixed issue where the Frame All action would not frame keys outside of clips when the curve display is collapsed. (1273725, #295) Scrolling the horizontal scrollbar of the timeline to the right edge will no longer prevent the user from dragging left again. (1127199, #301) Splitting a clip with an ease in or out value now ensures ease duration stays on correct side of split. (1279350) Fixed delay when zooming in after reaching Timeline window's maximum and then zooming back. (1214228) Prevent creation of presets with Group Tracks. (1281056) Fixed issue where markers placed on top of clips could not be selected. (1284807, #314) Fixed issue where multiple markers placed on top of each other could not be selected. (1284801, #314) [1.4.3] - 2020-08-26 Fixed Fixed incorrect selection when clicking on a clip's blend. (1178052) Fixed issue where an exception was thrown when drawing an Audio clip's waveform when that clip wasn't in the AssetDatabase. (1268868) When choosing Add Signal Emitter from Signal Asset, closing the Object Selector window will not add an empty Signal Emitter. (1261553) Fixed issue where an error would appear when editing keys in the Animation window if the Timeline window is opened. (1269829) Fixed issue where the Frame All operation would continually increase the zoom value when only empty tracks are added to the timeline (1273540). [1.4.2] - 2020-08-04 Fixed Fixed double-click not opening the AnimationWindow on clips with animated parameters. (1262950) Fixed issue where the Timeline window would rebuild its Playable Graph every time an AnimationClip would be added, changed or deserialized. (1265314, 1267055) [1.4.1] - 2020-07-15 Fixed Fixed IndexOutOfRangeException exception being thrown when editing inspector curves. (1259902) Fixed IndexOutOfRangeException exception being thrown when the New Signal dialog replaces an existing signal. (1241170) Fixed signal state being reset on paused timelines. (1257208) Fixed nested custom types not updating animation values in the inspector. (1239893) Fixed AnimationTracks SceneOffset mode incorrectly overriding root transform on tracks without root transform in editor. (1237704) The DisplayName attribute is now supported when used with TrackAssets. (1253397) Fixed NullReference exception being thrown when clicking on the Scene Preview checkbox if the Timeline window was closed. (1261543) [1.4.0] - 2020-06-26 Added Added ClipCaps.AutoScale to automatically change the speed multiplier value when the clip is trimmed in the Timeline window. Added a DeleteClip method in TrackAsset. Added dependency on Animation, Audio, Director and Particle System modules. (1229825) Added an option in TimelineAsset.EditorSettings to disable scene preview. Added base classes to define custom actions: TimelineAction TrackAction ClipAction MarkerAction Added the following attributes that can be used with action classes: ApplyDefaultUndo to automatically manage undo operations. ActiveInMode to control in which Timeline mode the action is valid. MenuEntry to add the action to the context menu. TimelineShortcut can be added to a static method to invoke the action with a shortcut. Invoker to invoke actions using Timeline's selection or context. MenuOrder contains menu priority values, to be used with MenuEntry. TimelineModes to specify in which mode an action is valid, to be used with MenuEntry. ActionContext to provide a context to invoke TimelineActions. ActionValidity to specify is an action is valid for a given context. UndoExtension to manage undo operations with common Timeline types. Changed Improved performance with ControlTracks in preview mode for cases where multiple Control Tracks are assigned to the same PlayableDirector. Improved layout and appearance of track header buttons. Reduced icons' file size without any quality loss. A track's binding will be duplicated when pasting or duplicating a track. When creating a new timeline asset, the \"Timeline\" suffix will not be added to the file name twice. ClipCaps.All now includes the new Autoscale feature. To get the previous ClipCaps.All behaviour on clips, use ClipCaps.Looping | ClipCaps.Extrapolation | ClipCaps.ClipIn | ClipCaps.SpeedMultiplier | ClipCaps.Blending Inline curve selection is now synced with the clip's selection. Selecting a curve view property will also select the corresponding curve view. Clicking and holding the Command or Control key on a curve view will deselect it if it was already selected. Improved Timeline window UI performance. Fixed Selecting clips from locked tracks is not allowed anymore when using the playhead's context menu. Inserting gaps in locked tracks is not allowed anymore. When adding an Activation track, the viewport is adjusted to show the new Activation clip. Fixed issue where trimming AnimationClips would also change the speed multiplier. [1.3.4] - 2020-06-09 Fixed Fix a Control Track bug that caused the first frame of an animation to evaluated incorrectly when scrubbing forwards and backwards. (1253485) Fixed memory leak where the most recently played timeline would not get unloaded. (1214752 and 1253974) [1.3.3] - 2020-05-29 Fixed Fixed regression where animation tracks were writing root motion when the animation clip did not contain root transform values (1249355) [1.3.2] - 2020-04-02 Fixed Fixed issue where the clip Inspector's curve preview would close when clicking on the curve. (1228127) Fixed issue where the curves view was not synced between Animation and Timeline windows. (1213937) Fixed issue where play range didn't loop when range ends on the final frame. (1215926) Fixed issue where displaying an array in the curves view generated errors. (1178251) [1.3.1] - 2020-03-13 Fixed Fixed issue where the curves view would flicker when editing multiple keys. (1217326) Fixed issue where adding a keyframe in the curves view at the end of a clip would not place the keyframe at the correct position. (1221337) [1.3.0] - 2020-02-26 Added Inline Curve Properties can be removed. Tracks can be individually resized. Changed Creating a new Timeline will no longer automatically add an Animation Track and an Animator to the target GameObject. Ease-in and ease-out values for clips are no longer restricted to 50% of the clip's duration. The resize handle for inline curves has been moved to the track header area. Reduced the minimum width of the track header area. Trimming the left edge of a clip while pressing the Shift key will change the Speed Multiplier value. Fixed Fixed humanoid characters going to default pose during initial root motion recording. (1174752) Fixed Override Tracks not masking RootTransform when an AvatarMask without the Root Node is applied. (1190600) Fixed preview of Avatar Masks on base level Animation Tracks. (1190600) [1.2.13] - 2020-02-24 Fixed Fixed Performance issue where Control Tracks would resimulate during the tail of a non-looping particle clip. (1216702) Fixed adjacent recording clips highlighting the wrong clip. (1210312) Fixed timescale drawing to only draw visible lines which avoids a hang with very large clips. (1213189) Fixed SignalReceiver.ChangeSignalAtIndex incorrectly throwing exception when multiple entries are set to null. (1210877) Fixed a memory leak with Animation Clips in Edit mode. Fixed issue where changes to a Signal Receiver component in a prefab were reverted. (1210883) Fixed avatar mask reassignment not causing immediate re-evaluation. (1219326) Fixed issues related to recursive control tracks. (1178423) Fixed issue where using the HideInMenu attribute in combination with a class inheriting from Marker would not hide the marker from the Timeline context menus. (1221054) [1.2.12] - 2020-02-21 Fixed Fixed issue where the curves view would change its framing when moving a clip. (1217353) [1.2.11] - 2020-01-22 Fixed Fixed Control Track inspector dropdown not opening. (1208943) Fixed issue where applying the Match content command on subtimeline clip with a newly created subtimeline with no duration makes the clip disappear. (1203662) Fixed issue where the opened timeline is changed to another timeline when switching focus from Unity to a different application. (1087348) Fixed issue where the keys in the inline curves view were incorrectly positioned (1205835) Changed ControlPlayableAsset.searchHierarchy (a.k.a. Control Children) now defaults to false. [1.2.10] - 2019-12-08 Fixed Fixed issue where object selectors on tracks did not show bound objects. (1202853) Fixing inspector blend graph display for animation clips. (1201474) Fixed Timeline Window lock state when restarting Unity and no timeline are selected. (1201405) [1.2.9] - 2019-12-06 Fixed Added missing high-resolution icons for Personal Skin. [1.2.8] - 2019-11-21 Fixed Fixed issue where recording couldn't be turned on for override tracks. (1199389) Fixed overlay bug when panning. (1198348) Fixed Foot IK being applied in Editor when option is disabled. (1197426) Fixed issue where the Animation Track's inline curves were not properly aligned when panning the timeline. (1198364) [1.2.7] - 2019-11-15 Fixed Fixed inline curves to display PlayableBehaviour array properties. (1178251) Fixed clip selection from playhead. (1187495) Fixed recorded clips dirtying the scene on copy/paste. (1181492) [1.2.6] - 2019-10-25 Added Added Timeline manual. [1.2.5] - 2019-10-16 Changed Added tooltips that were missing for Timeline selector and settings buttons. (1152790) Removed Undo menu entry that was added when clicking on the Inline curves button. (1187402) Fixed Fixed issue where recording couldn't be turned off when an object is deactivated. (1187174) Timelines listed in the Timeline selector will now be sorted alphabetically. (1190514) Fixed Insert Frames options from Trackhead context menu not applying to markers. (1187895) Fixed incorrect display when a large number of nested group tracks was added to a Timeline. (1157367) [1.2.4] - 2019-10-03 Changed Properties in the Inline Curve editor will now be listed in the same order as the Animation window. (1184058) Updated the appearance of the Timeline window to conform to the editor's UX redesign Improved the appearance of clip blends. Fixed Adding a PlayableDirector with no Playable Asset will no longer trigger a repaint of the Timeline Window on each frame. (1172707) Fixed issue where a clip's blend selection border was not drawn correctly when there was a previous clip. (1178173) Fixed issue where Animation Events were fired twice when the Playable Director Wrap mode is set to Loop. (1173281) Fixed issue where double-clicking on a Timeline Asset would not open it in the Timeline window. (1182159) Fixed issue where the paste shortcut would not work when copying and pasting between two different timelines. (1184967) Fixed audio stutter when going into playmode. (1167289) Fixed PreviousFrame and NextFrame controls in subtimelines with large offsets. (1175320) Fixed issue where exceptions were thrown when resetting a Signal Receiver component. (1158227) Increased font size of clip labels (1179642) [1.2.3] - 2019-10-03 Fixed Removed unnecessary directories from the package. [1.2.2] - 2019-08-20 Fixed Fixed issue where fields for custom clips were not responding to Add Key commands. (1174416) Fixed issue where a different track's bound GameObject is highlighted when clicking a track's bound GameObject box. (1141836) Fixed issue where a clip locks to the playhead's position when moving it. (1157280) [1.2.1] - 2019-08-01 Fixed Fixed appearance of a selected clip's border. Fixed non-transform properties from AnimationClips not being correctly put into preview mode when the avatar root does not contain the animator component. (1162334) Fixed an issue where the context menu for inline curves keys would not open on MacOS. (1158584) Fixed recording state being incorrect after toggling preview mode (1146551) Fixed copying clips without ExposedReferences causing the scene to dirty (1144469) [1.2.0] - 2019-07-16 Compatible with Unity 2019.3 Added Added ILayerable interface. Implementing this interface on a custom track will enable support for multiple layers, similar to the AnimationTracks override tracks. Added \"Pan\" autoscrolling option in the Timeline window. Enabled rectangle tool for inline curves. Changed Scrolling horizontally with the mouse wheel or trackpad now pans the timeline view horizontally, instead of zooming. Scrolling vertically with the mouse wheel or trackpad on the track headers or on the vertical scroll bar now pans the timeline view vertically, instead of zooming. Fixed Fixed an issue causing info text to overlap when displaying multiple lines (1150863). Fixed duration mode not reverting from \"Fixed Length\" to \"Based On Clips\" properly. (1154034) Fixed playrange markers being drawn over horizontal scrollbar (1156023) Fixed an issue where a hotkey does not autofit all when Marker is present (1158704) Fixed an issue where an exception was thrown when overwriting a Signal Asset through the Signal Emitter inspector. (1152202) Fixed Control Tracks not updating instances when source prefab change. (case 1158592) An exception will be thrown when calling TrackAsset.CreateMarker() with a marker that implements INotification if the track does not support notifications. (1150248) Fixed preview mode being reenabled when warnings change on tracks. (case 1151381) Fixed minimum clip duration to be frame aligned. (case 1156602) Fixed playhead being moved when applying undo while recording.(case 1154802) Fixed warnings about localEulerAnglesRaw when using RectTransform. (case 1151100) Fixed precision error on the duration of infinite tracks. (case 1156723) Fixed issue where two GatherProperties call were made when switching between two PlayableDirectors. (1159036) Fixed issue where inspectors for clips, tracks and markers would get incorrectly displayed when no Timeline Window is opened. (1158242, 1158283) Fixed issue with clip connectors that were incorrectly drawn when the timeline was panned or zoomed. (1141960) Fixed issue where evaluating a Playable Graph inside a Notification Receiver would cause an infinite recursion. (1149930) Fixed Trim and Move operations to ensure playable duration is updated upon completion. (1151894) Fixed options menu icon that was blurry on high-dpi screens. (1154623) Track binding field is now larger. (1153446) Fixed issue where an empty Timeline window would create new objects on each repaint. (1142894) Fixed an issue causing info text to overlap when displaying multiple lines (when trimming + time scaling, for example). (1150863) Fixed duration mode not reverting from \"Fixed Length\" to \"Based On Clips\" properly. (1154034) Prevented the PlayableGraph from being created twice when playing a timeline in play mode with the Timeline window opened. (1147247) Fixed issue where an exception was thrown when clicking on a SignalEmitter with the Timeline window in asset mode. (1146261) A timeline will now be played correctly when building a player with Mono and Managed Stripping Level set higher than Low. (1133182) The Signal Asset creation dialog will no longer throw exceptions when canceled on macOS. (1141959) Fixed issue where the Emit Signal property on a Signal Emitter would not get saved correctly. (1148709) Fixed issue where a Signal Emitter placed at the start of a timeline would be fired twice. (1149653) Fixed record button state not updating when offset modes are changed. (1142747) Cleared invalid assets from the Timeline Clipboard when going into or out of PlayMode. (1144473) Copying a Control Clip during play mode no longer throws exceptions. (1141581) Going to Play Mode while inspecting a Track Asset will no longer throw exceptions. (1141958) Resizing Timeline's window no longer affects the zoom value. (1147150) Snap relaxing now responds to Command on Mac, instead of Control. (1149144) Clips will no longer randomly disappear when showing or hiding inline curves. (1141661) The global/local time referential button will no longer be shown for a top-level timeline. (1080872) Playhead will not be drawn above the bottom scrollbar anymore. (1134016) Fixed moving a marker on an Infinite Track will keep the track in infinite mode (1141190) Fixed zooming in/out will keep the padding at the beginning of the timeline (1030689) Fixed marker UI is the same color and size on infinite track (1139370) Fixed Disable the possibility to add Markers to tracks of a Timeline that is ReadOnly (1134463) Fixed wrong context menu being shown when right-clicking a marker (1133592) Fixed creation of override track to work with multiselection (1133592) [1.1.0] - 2019-02-14 Compatible with Unity 2019.2 Added ClipEditor, TrackEditor and MarkerEditor classes users can derive from to control visual appearance of custom timeline clips, tracks and markers using the CustomTimelineEditor attribute. ClipEditor.GetSubTimelines to allow user created clips that support sub-timelines in editor TimelineEditor.selectedClip and TimelineEditor.selectedClips to set and retrieve the currently selected timeline clips IPropertyCollector.AddFromName override that takes a component. Warning icons to SignalEmitters when they do not reference an asset Ability to mute/unmute a Group Track. Mute/Unmute only selected track command added for tracks with multiple layers. Animate-able Properties on Tracks and Clips can now be edited through inline curves. Added loop override on AnimationTrack clips (1140766) ReadOnly/Source Control Lock support for Timeline Scene Changed Control Track display to show a particle system icon when particle systems are being controlled Animate-able Properties for clips are no longer edited using by \"recording\"; they are edited through the inline curves just like tracks. AudioTrack properties can now be animated through inline curves. Changed Marker show/hide to be undoable. Hide will also unselect markers. (1124661) Changed SignalReceivers show their enabled state in the inspector. (1131163) Changed Track Context Menu to show \"Add Signal Emitter\" at the top of the list of Marker commands. (1131166) Moved \"Add Signal Emitter\" and \"Add Signal Emitter From Asset\" commands out of their sub-menu. (1131166) Fixed Fixed markers being drawn outside their pane. (1124381) Fixed non-public tracks not being recognized by the Timeline Editor. (1122803) Fixed keyboard shortcuts for Frame All (default: A) and Frame Selected (default: F) to also apply horizontally (1126623) Fixed recording getting disabled when selecting a different GameObject while the Timeline Window is not locked. (1123119) Fixed time sync between Animation and Timeline windows when clips have non-default timescale or clip-in values. (930909) Fixed animation window link not releasing when deleting the timeline asset. (1127425) Fixed an exception being raised when selecting both a Track marker and a Timeline marker at the same time. (1113006) Fixed the header marker area will so it no longer opens its context menu if it's hidden. (1124351) Fixed Signal emitters to show the Signals list when created on override tracks. (1102913) Fixed a crash on IL2CPP platforms when the VideoPlayer component is not used. (1129572) Fixed Timeline Duration changes in editor not being undoable. (1109279) Fixed Match Offsets commands causing improper animation defaults to be applied. (911678) Fixed Timeline Inspectors leaving EditorGUI.showMixedValue in the wrong state. (1123895) Fixed issue where performing undo after moving items on multiple tracks would not undo some items. (1131071) Fixed cog icon in the Signal Receiver inspector being blurry. (1130320) Fixed Timeline marker track hamburger icon not being centered vertically. (1131112) Fixed detection of signal receivers when track is in a group. (1131811) Fixed exception being thrown when deleting Signal entries. (1131065) Fixed Markers blocking against Clips when moving both Clips and Markers in Ripple mode. (1102594) Fixed NullReferenceException being thrown when muting an empty marker track. (1131106) Fixed SignalEmitter Inspector losing the Receiver UI when it is locked and another object is selected. (1116041) Fixed Marker and Clip appearing to be allowed to move to another track in Ripple mode. (1131123) Fixed issue where the Signal Emitter inspector did not show the Signal Receiver UI when placed on the timeline marker track. (1131811) Fixed Replace mode not drawing clips when moved together with a Marker. (1132605) Fixed inline curves to retain their state when performing undo/redo or keying from the inspector. (1125443) Fixed an issue preventing Timeline from entering preview mode when an Audio Track is present an a full assembly reload is performed. (1132243) Fixed an issue where the Marker context menu would show a superfluous line at the bottom. (1132662) Fixed an issue preventing Timeline asset to be removed from a locked Timeline Window when a new scene is loaded. (1135073) Fixed EaseIn/Out shortcut for clips [1.0.0] - 2019-01-28 Compatible with Unity 2019.1 Added This is the first release of Timeline, as a Package Added API calls to access all AnimationClips used by Timeline. Added support in the runtime API to Animate Properties used by template-style PlayableBehaviours used as Mixers. Added Markers. Markers are abstract types that represent a single point in time. Added Signal Emitters and Signal Assets. Signal Emitters are markers that send a notification, indicated by a SignalAsset, to a GameObject indicating an event has occurred during playback of the Timeline. Added Signal Receiver Components. Signal Receivers are MonoBehaviour that listen for Signals from Timeline and respond by invoking UnityEvents. Added Signal Tracks. Signal Tracks are Timeline Tracks that are used only for Signal Emitters. Fixed Signal Receiver will no longer throw exceptions when its inspector is locked (1114526) Context menu operations will now be applied on all selected tracks (1089820) Clip edit mode clutch keys will not get stuck when holding multiple keys at the same time (1097216) Marker inspector will be disabled when the marker is collapsed (1102860) Clip inspector will no longer throw exceptions when changing values when the inspector is locked (1115984) Fixed appearance of muted tracks (1018643) Fixed multiple issues where clips and markers were selectable when located under the time ruler and the marker header track (1117925, 1102598) A marker aligned with the edge of a clip is now easier to select (1102591) Changed behaviour of the Timeline Window to apply modifications immediately during Playmode (922846, 1111908) PlayableDirector.played event is now called after entering or exiting Playmode (1088918) Undoing a paste track operation in a group will no longer corrupt the timeline (1116052) The correct context menu will now be displayed on the marker header track (1120857) Fixed an issue where a circular reference warning appeared in the Control Clip inspector even if there was no circular reference (1116520) Fixed preview mode when animation clips with root curves are used (case 1116297, case 1116007) Added option to disable foot IK on animation playable assets (case 1115652) Fixed unevaluated animation tracks causing default pose (case 1109118) Fixed drawing of Group Tracks when header is off-screen (case 876340) Fixed drag and drop of objects inside a group being inserted outside (case 1011381, case 1014774)"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/TableOfContents.html",
    "title": "| Cacher Game",
    "summary": "About Timeline Timeline overview Using the Timeline window Creating a Timeline Asset and Timeline instance Recording basic animation with an Infinite clip Converting an Infinite clip to an Animation clip Animating a humanoid Using an Animation Override track and Avatar masking Nesting Timeline instances Timeline window Timeline Preview and Timeline Selector Timeline Playback Controls Track List and Track Headers Adding Tracks Selecting Tracks Duplicating Tracks Deleting Tracks Locking Tracks Muting Tracks Reordering Tracks and Rendering Priority Using Track Groups Collapsing and Expanding Track Groups Locking Track groups Clip Edit modes and the Clips view Panning and Zooming the Clips View Adding Clips Inserting Clips Selecting Clips Positioning Clips Tiling Clips Duplicating Clips Trimming Clips Splitting Clips Resetting Clips Changing Clip Play Speed Setting Gap Extrapolation Easing-in and Easing-out Clips Blending Clips Matching clip offsets Curves View Hiding and Showing Curves Navigating the Curves View Selecting Keys Adding Keys Editing Keys Changing Interpolation and Shape Deleting Keys Timeline Settings Timeline Inspector Setting Timeline Properties Setting Track Properties Activation Track Properties Animation Track Properties Setting Clip Properties Activation Clip Properties Animation Clip Common Properties Animation Clip Playable Asset Properties Audio Clip Properties Control Clip Common Properties Control Clip Playable Asset Properties Playable Director Component Samples Annotation marker Video track Time dilation track Tween track Text track Defining custom USS styles Timeline Glossary"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_about.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_about.html",
    "title": "Clip Edit modes and the Clips view | Cacher Game",
    "summary": "Clip Edit modes and the Clips view Use the Clips view to add, position, and manipulate clips on each track in the Track list. The selected Clip Edit mode determines how clips interact when you add, move, or delete them. The Clip Edit modes (green) and the Clips view (red) Clips and the Clips view In the Clips view, each clip has a colored accent line that identifies the type of clip: Activation clips are green. Animation clips are blue. Audio clips are orange. Control clips are turquoise. Playable clips are white. A clip based on data, such as an Animation clip or an Audio clip, displays arrows that indicate when the clip has been trimmed to exclude part of its source animation, waveform, or other data. For example, if an Animation clip uses only part of its full key animation, white arrows indicate that key animation exists before the start or after the end of the clip. Small arrows (circled) indicate that data exists before the start or after the end of the area defined by the clip To resize a clip and view its hidden data, either right-click the clip and select Match Content from the context menu, or select the clip and modify its clip timing properties in the Inspector window. When you resize a clip, the selected Clip Edit mode determines how the surrounding clips are affected. Clip Edit modes Select a Clip Edit mode to choose how clips are added, positioned, and trimmed within the Clips view, or when modifying clip timing properties in the Inspector window. There are three Clip Edit modes that affect most clip editing features: Mix mode (default), Ripple mode, and Replace mode. Clip Edit modes are Mix (default and selected), Ripple, and Replace mode You can also temporarily switch between Clip Edit modes. This is useful if, for example, you want to temporarily use Ripple mode to offset the content of a track while you position clips. To temporarily switch between Clip Edit modes, hold down the following keyboard keys: Hold 1 to temporarily switch to Mix mode. Hold 2 to temporarily switch to Ripple mode. Hold 3 to temporarily switch to Replace mode. Mix mode Use Mix mode to add, position, and trim clips without moving or replacing adjacent clips. Mix mode creates blends between intersecting clips. Mix mode is the default Clip Edit mode. Timeline window with Mix mode as the selected Clip Edit mode. The position cursor (circled) indicates where you drag to position the clip. In Mix mode, when you hover over a selected clip in the Clips view, the cursor changes to indicate the action that you can perform. The action depends on the part of the clip that you hover over: When you hover over the start of a selected clip, the cursor changes to a trim cursor. The trim cursor indicates the area to drag to trim the start of the clip. When you hover over the middle of a selected clip, the cursor changes to a position cursor and indicates the area to drag to position the clip. When you hover over the end of a selected clip, the cursor changes to a trim cursor. The trim cursor indicates the area to drag to trim the end of the clip. In Mix mode, if you drag to trim or position a clip and it intersects another clip, the cursor changes to a white arrow that points towards the blend being created. There are three possible cursors depending on whether the blend is created at the beginning of the clip, at the end of the clip, or at both the beginning and end of the clip. The white arrow cursor indicates that dragging Clip 2A to the right creates a blend, at the end of the clip, between Clip 2A and Clip 2B. Ripple mode Use Ripple mode to add, position, and trim a clip while affecting the subsequent clips on the same track. Positioning or trimming clips in Ripple mode preserves the gaps between subsequent clips. Timeline window with Ripple mode as the selected Clip Edit mode. The position cursor (circled) indicates where you drag to position the clip. In Ripple mode, when you hover over a selected clip in the Clips view, the cursor changes to indicate the action that you can perform. The actions and areas are similar to Mix mode: When you hover over the start of a selected clip, the cursor changes to a trim cursor. The trim cursor indicates the area to drag to trim the clip relative to its start. When you hover over the middle of a clip, the cursor changes to a position cursor and indicates the area to drag to position the clip. When you hover over the end of a clip, the cursor changes to a trim cursor. The trim cursor indicates the area to drag to trim the clip relative to its end. In Ripple mode, when you click and drag to trim or position a clip, the cursor switches to a yellow arrow that points towards the affected clips and gaps. A yellow line indicates the ripple point. When you drag to trim a clip, dragging left and right changes the duration of the selected clip and repositions subsequent clips and gaps after the ripple point. For example, the yellow arrow cursor indicates that trimming the start of Clip 2A in Ripple mode changes the clip duration and affects the clips and gaps after the ripple point: Clip 2B and Clip 2C.] Replace mode Use Replace mode to add, position, and trim a clip while cutting or replacing intersecting clips. Timeline window with Replace mode as the selected Clip Edit mode. The position cursor (circled) indicates where you drag to position the clip. In Replace mode, when you hover over a selected clip in the Clips view, the cursor changes to indicate the action that you can perform. The actions and areas are similar to Mix mode: When you hover over the start of a selected clip, the cursor changes to a trim cursor. The trim cursor indicates the area to drag to trim the clip relative to its start. When you hover over the middle of a clip, the cursor changes to a position cursor and indicates the area to drag to position the clip. When you hover over the end of a clip, the cursor changes to a trim cursor. The trim cursor indicates the area to drag to trim the clip relative to its end. In Replace mode, when you drag to position a clip, the clip becomes translucent so that you can view overlapping clips. If the clip being positioned overlaps other clips, the cursor changes to a red arrow and red replacement lines indicate where each overlap occurs. Releasing the clip cuts the underlying clip at each red overlap. For example, the red arrow cursor indicates that dragging Clip 2A to the right overlaps Clip 2B. Releasing the clip cuts Clip 2B at the point where the overlap occurs. In Replace mode, trimming a clip is similar to positioning a clip. When you drag to trim a clip and it intersects another clip, the cursor changes to a red arrow and a red replacement line indicates where the overlap occurs. Releasing the trim cuts the intersecting clip at the red replacement line."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_add.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_add.html",
    "title": "Adding clips | Cacher Game",
    "summary": "Adding clips The Timeline window supports different methods of adding clips to tracks, depending on the type of track, where you click, and whether a clip or track is already selected. The quickest method to add a clip is to right-click on an empty area within a track and select the appropriate Add option from the context menu. Depending on the track, the options for adding a clip change. Context menu for adding an Activation clip. There are other ways to add clips: Select a clip option from the Track menu in the Track Header to add a clip at the location of the Timeline Playhead. Drag an animation Source Asset from the Project window to an empty area in the Timeline window to automatically create an Animation track and add an Animation clip. Drag an animation Source Asset from the Project window to an existing track in the Timeline window to add an Animation clip to the same track. Drag an audio Source Asset from the Project window to an empty area in the Timeline window to automatically create an Audio track and add an Audio clip. Drag a GameObject with a PlayableDirector component to create a nested Timeline instance. This automatically creates a Control track and adds a Control clip for the nested Timeline instance. Drag a Prefab from the Project window to an empty area in the Timeline window to add a Prefab instance to your Timeline instance. This automatically creates a Control track and adds a Control clip for the Prefab instance. Drag a GameObject with a Particle component to add a particle effect to your Timeline instance. This automatically creates a Control track and adds a Control clip for the duration of the Particle effect. When you add a clip, the selected Clip Edit mode determines how the added clip interacts with surrounding clips. For example, if you add an Animation clip or an Audio clip in Mix mode and the added clip intersects a clip on the same track, Timeline creates a blend."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_blend.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_blend.html",
    "title": "Blending clips | Cacher Game",
    "summary": "Blending clips Blend two clips on the same track to create a smooth transition between two Animation clips, two Audio clips, or two Playable clips. To blend two clips, select the Mix Clip Edit mode and position or trim one clip until it overlaps an adjacent clip. In a blend, the first clip is referred to as the outgoing clip and the second clip is referred to as the incoming clip. The area where the outgoing clip transitions to the incoming clip is referred to as the blend area. The blend area sets the duration of the transition. The blend area shows the transition between the outgoing clip and incoming clip Although the Clips view represents a blend area as a single linear curve, the transition between clips is actually comprised of two blend curves. The blend curve for the outgoing clip is referred to as the Blend Out curve. The blend curve for the incoming clip is referred to as the Blend In curve. By default, each blend curve is automatically set to an ease-in and ease-out curve. Use Blend Curves to customize the blend area Use the Blend Curves in the Inspector window to change the shape for either the Blend In or Blend Out curve of the selected clip. However, the Inspector window only allows you to edit the properties of one clip at a time. You cannot simultaneously customize both blend curves from the same blend area. To customize the Blend Curves for the transition between two clips: Select the outgoing clip to customize its Blend Out curve (labelled Out). Select the incoming clip to customize its Blend In curve (labelled In). To customize either the Blend Out curve or Blend In curve, use the drop-down menu to switch from Auto to Manual. With Manual selected, the Inspector window shows a preview of the blend curve. Click the curve preview to open the Curve Editor below the Inspector window. Select Manual and click the curve preview to open the Curve Editor Use the Curve Editor to customize the shape of the blend curve. By default, the blend curve includes a key at the beginning of the curve and a key at the end of the curve. The Curve Editor provides the following different methods of modifying the blend curve: Select the key at the start or end of the blend curve and use the tangent handles to adjust the interpolation between keys. Add additional keys to change the shape of the blend curve by adding more interpolation points. Adding keys in the Curve Editor is the same as adding keys in the Curves view. Right-click a key to delete or edit the key. Editing keys in the Curve Editor is the same as editing keys in the Curves view. Note that you cannot delete the first and last keys. Select a shape template from the bottom of the Curve Editor. The Curve Editor also includes shape templates based on whether you are modifying the Blend In curve or the Blend Out curve. Select a shape template to change the blend curve to the selected shape template."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_dup.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_dup.html",
    "title": "Duplicating clips | Cacher Game",
    "summary": "Duplicating clips There are many ways to duplicate clips in the Clips view: Select a clip or multiple clips. Right-click in the Clips view and select Duplicate from the context menu. Select a clip or multiple clips. Hold Command/Control and press D. Right-click an unselected clip and choose Duplicate from the context menu. Duplicating clips copies each selected clip and places the duplicates after the last clip on the same track. If you duplicate clips used in a blend or clips separated by a gap, the blend or gap is also duplicated. If you duplicate an Animation clip that uses a recorded clip as its Source Asset, the recorded clip is also duplicated. The duplicate of the recorded clip only appears in your Project after you save the Scene or Project. For example, the following images demonstrates what happens if you duplicate an Animation clip named \"Clip 2B\" that uses the recorded clip named \"Recorded (3)\". Select the\"Clip 2B\", hold Command/Control and press D to duplicate A duplicate Animation clip is placed at the end of the same track. The recorded clip associated with \"Clip 2B\" is also duplicated. The new \"Recorded (6)\" recorded clip appears in the Project window after you save the Scene or Project"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_ease.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_ease.html",
    "title": "Easing-in and easing-out clips | Cacher Game",
    "summary": "Easing-in and easing-out clips Ease-in and ease-out a clip to create a smooth transition between a clip and its surrounding gaps. To create an ease-in or ease-out transition, select a clip and, in the Inspector window, set either the Ease In Duration or the Ease Out Duration. Use Ease In Duration and Ease Out Duration to smoothly transition into and out of the selected clip. Ease-in and ease-out transitions create different effects, depending on the track: On an Animation track or an Animation Override track, ease-in to an Animation clip to create a smooth transition between the animation in the gap before the clip and the Animation clip. Ease-out of an Animation clip to create a smooth transition between the Animation clip and the animation in the gap after the clip. For information on the factors that determine what animation occurs in the gap before and after an Animation clip, see Setting gap extrapolation. On an Audio track, ease-in to an Audio clip to fade in the volume of the audio waveform. Ease-out of an Audio clip to fade out the volume of the audio waveform specified by the Audio clip. On a Playable track, ease-In to a Playable clip to fade in the effect or script in the Playable clip. Ease-out of a Playable clip to fade out the effect or script in the Playable clip. Ease-in and ease-out an Animation clip to transition between its animation and its gaps. Timeline represents ease-in and ease-out transitions as a linear curve. Although the Clips view represents an ease-in or ease-out transition as a single linear curve, every ease-in or ease-out transition is actually set to a gradually easing-in or easing-out curve by default. To change the shape of either the ease-in curve (labelled In) or the ease-out (labelled Out) curve, use the Blend Curves in the Inspector window. Use the Blend Curves to customize ease-in or ease-out transitions Note that the Blend Curves might affect the blend area used for blending between two clips. The Ease In Duration and Ease Out Duration properties indicate whether the Blend Curves affect an ease-in or ease-out transition, or a blend. For example, If the Ease Out Duration is editable, then the Blend Out curve (labelled Out) affects the curve used by an ease-out transition. If the Ease Out Duration is not editable, then the Blend Out curve (labelled Out) affects the outgoing clip in a blend between two clips. Ease Out Duration is not editable, therefore the Out curve affects the blend area between two clips To customize either the ease-in or ease-out transition, use the drop-down menu to switch from Auto to Manual. With Manual selected, the Inspector window shows a preview of the blend curve. Click the curve preview to open the Curve Editor below the Inspector window. Select Manual and click the preview to open the Curve Editor The Curve Editor is the same editor that is used to customize the shape of the blend curves when blending between clips. When creating an ease-in or an ease-out transition with Animation clips, the Animation clip blends between its gaps and the Animation clip. The following factors affect the values of animated properties in the gaps surrounding an Animation clip: The pre-extrapolate and post-extrapolate settings for the Animation clip and for other Animation clips on the same track. Animation clips on other Animation tracks that are bound to the same GameObject. The position or animation of the GameObject in the Scene, outside the Timeline Asset. Gap extrapolation and easing clips To successfully ease-in or ease-out an Animation clip, gap extrapolation must not be set based on the Animation clip being eased-in or eased-out. Gap extrapolation must either be set to None or set by another Animation clip. For example, the following ease-in transition has no effect because the Pre-Extrapolate for the Victory_Dance clip is set to Hold. This means that the ease-in creates a transition between the first frame of the Animation clip and the rest of the Animation clip. The gap is set to Hold from the Animation clip (circled). The ease-in transition has no effect. To ease-in from the Idle clip, set pre-extrapolate for the Victory_Dance clip to None. The ease-in gap uses the post-extrapolate mode from the Idle clip (circled). Overriding Animation tracks with ease-in and ease-out transitions Use two Animation tracks bound to the same GameObject to create a smooth transition between two Animation clips. For example, if two Animation tracks are bound to the same GameObject and a clip on the second track contains an ease-in transition, the ease-in transition creates a smooth transition between the animation on the previous track and the animation on the second track. Example of using two Animation tracks, bound to the same GameObject, to create smooth transitions between Animation clips. In this example, the Animation clip on the first track is a repeated idle cycle where the humanoid GameObject stands still. The Animation clip in the second track eases-in the Victory_Dance motion and eases-out to return back to the idle cycle To successfully override animation on a previous track, the gap extrapolation for the second track must be set to None so that the animation data in the gap is taken from the previous track bound to the same GameObject. The ease-in and ease-out transitions use this animation data."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_gap_extrap.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_gap_extrap.html",
    "title": "Setting gap extrapolation | Cacher Game",
    "summary": "Setting gap extrapolation Gap extrapolation refers to how an Animation track approximates animation data in the gaps before and after an Animation clip. The main purpose for extrapolating animation data in the gaps between Animation clips is to avoid animation anomalies. Depending on the GameObject bound to the Animation track, these anomalies could be a GameObject jumping between two transformations, or a humanoid jumping between different poses. Each Animation clip has two gap extrapolation properties: Pre-Extrapolate, which controls how animation data is approximated in the gap before an Animation clip, and Post-Extrapolate, which controls how animation data extends in the gap after an Animation clip. By default, Timeline sets both extrapolation properties to Hold. This sets the gap before the Animation clip to the animation on the first frame, and the gap after the Animation clip to the animation on the last frame. Each gap \"holds\" the animation at a certain frame. Icons before and after an Animation clip indicate the selected extrapolation modes. Icons indicate the pre-extrapolate and post-extrapolate modes When an Animation track contains a gap between two Animation clips, the Post-Extrapolate property of the left clip sets the gap extrapolation. If the Post-Extrapolate property of the clip to the left of a gap is set to None, the Pre-Extrapolate property of the right clip sets the gap extrapolation. Icons before and after Animation clips indicate whether the extrapolation for a gap is taken from the Post-Extrapolate property of the clip to the left or from the Pre-Extrapolate property of the clip to the right. First track (red box): gap extrapolation from Post-Extrapolate of the left clip. Third track (blue box): gap extrapolation from Pre-Extrapolate of the right clip. To change the Pre-Extrapolate and Post-Extrapolate properties, select the Animation clip and use the Animation Extrapolation properties in the Inspector window. Use Pre-Extrapolate and Post-Extrapolate to set the extrapolation modes for the selected Animation clip The Pre-Extrapolate property is hidden when one of the following is true: The gap before the Animation clip is set by the Post-Extrapolation mode of the previous clip. There is no gap before the Animation clip. Use the Pre-Extrapolation property to set the gap extrapolation of the gap before the selected Animation clip to one of the following options: None: Turns off pre-extrapolation. In the gap before the selected Animation clip, the GameObject uses its transform, pose, or state from the Scene. Select None if, for example, you want to create an ease-in between the motion of a GameObject in the Scene and an Animation clip. See Easing-in and Easing-out Clips for details. Hold (default): In the gap before the selected Animation clip, the GameObject bound to the Animation track uses the values assigned at the start of the Animation clip. Loop: In the gap before the selected Animation clip, the GameObject bound to the Animation track repeats the entire animation as a forward loop: from start to end. To offset the start of the loop, use the Clip In property. Ping Pong: In the gap before the selected Animation clip, the GameObject bound to the Animation track repeats the entire animation forwards, then backwards. Use the Clip In property to offset the start of the loop. Changing the Clip In property affects the start of the loop when looping forward, and the end of the loop when looping backwards. Continue: In the gap before the selected Animation clip, the GameObject bound to the Animation track either holds or loops the animation based on the settings of the Source Asset. For example, if the selected Animation clip uses the motion file \"Recorded(2)\" as its Source Asset and \"Recorded(2)\" is set to Loop, then selecting Continue loops the animation according to the \"Recorded(2)\" Loop Time settings. Use the Post-Extrapolate property to set the gap extrapolation of the gap after the selected Animation clip to one of the following options: None: Turns off post-extrapolation. In the gap after the selected Animation clip, the GameObject uses its transform, pose, or state from the Scene. Selecting None is useful if, for example, you want to create an ease-out between an Animation clip and the motion of a GameObject in the Scene. See Easing-in and Easing-out Clips for details. Hold (default): In the gap after the selected Animation clip, the GameObject bound to the Animation track uses the values assigned at the end of the Animation clip. Loop: In the gap after the selected Animation clip, the GameObject bound to the Animation track repeats the entire animation as a forward loop: from start to end. To offset the start of the loop, use the Clip In property. Ping Pong: In the gap after the selected Animation clip, the GameObject bound to the Animation track repeats the entire animation forwards, then backwards. Use the Clip In property to offset the start of the loop. Changing the Clip In property affects the start of the loop when looping forward, and the end of the loop when looping backwards. Continue: In the gap after the selected Animation clip, the GameObject bound to the Animation track either holds or loops the animation based on the settings of the Source Asset. For example, if the selected Animation clip uses the motion file \"Recorded(2)\" as its Source Asset and \"Recorded(2)\" is set to Loop, then selecting Continue loops the animation according to the \"Recorded(2)\" Loop Time settings."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_insert.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_insert.html",
    "title": "Inserting clips | Cacher Game",
    "summary": "Inserting clips The Timeline window supports different methods of inserting clips depending on the type of track, where you click, and whether a clip or track is already selected. In the Timeline window, inserting clips refers to adding and making space for a clip without blending or replacing intersecting clips. To accurately insert a clip, select Ripple mode as the Clip Edit mode, and position the Timeline Playhead to set the insertion point. Select Add From Animation Clip from the Track menu for the track where you want to insert the clip. Accurately insert a clip with the Ripple mode (red circle), the Timeline Playhead (green box), and the Add From Animation Clip in the Track menu In the above example, the Timeline Playhead is the insertion point. You can specify the insertion point using these other methods: Right-click within a gap and add a clip with the context menu. The insertion point is where you right-click. Drag a Source Asset (animation or audio) to a track in the Clips view. The insertion point is where you stop dragging. The location of the insertion point determines where the clip is inserted and how it affects the other clips and gaps on the same track: If the insertion point intersects a clip, the inserted clip is added at the insertion point. The intersected clip, and all subsequent clips and gaps, are rippled after the inserted clip. If the insertion point is within a gap and there is enough space between the insertion point and the next clip, then the inserted clip is added to the gap. The other clips on the track are not affected. If the insertion point is within a gap and the inserted clip overlaps the next clip, the inserted clips is added at the insertion point. The next clip, and all subsequent clips and gaps, are rippled to accommodate the inserted clip. For example, inserting a clip at the Timeline Playhead ripples Clip 1B to accommodate the 36 frame Run clip."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_match.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_match.html",
    "title": "Matching clip offsets | Cacher Game",
    "summary": "Matching clip offsets Every Animation clip contains key animation, or motion, that animates the GameObject, or humanoid, bound to the Animation track. When you add an Animation clip to an Animation track, its key animation or motion does not automatically begin where the previous clip ends. The key animation or motion also does not end where the next clip begins. By default, each Animation clip begins at the position and rotation of the GameObject, or humanoid, at the beginning of the Timeline instance. An animation sequence of three Animation clips. For example, three Animation clips create an animation sequence that starts with a clip of a standing humanoid that starts to run, then turns left, and finally comes to a stand still. Each Animation clip begins at the position and rotation of the humanoid at the start of the Timeline instance, indicated by a red arrow in the Scene view below. The three Animation clips, Stand2Run, RunLeft, and Run2Stand, end at the green, blue, and yellow arrows, respectively. For an animation sequence to flow seamlessly between adjacent Animation clips, you must match each Animation clip with its previous clip or next clip. Matching clips adds a position and rotation offset for each Animation clip. The position and rotation offsets are named Clip Transform Offsets and they can be set manually or automatically. The following sections describe how to automatically match two or many Animation clips. Matching two clips To match the clip offsets between two clips, right-click the Animation clip that you want to match. From the context menu, select either Match Offsets to Previous Clip or Match Offsets to Next Clip. Matching an Animation clip with the next clip For example, right-click the middle Animation clip, named \"RunLeft\", and select Match Offsets To Next Clip to match its offsets to the next clip When you are matching offsets for a single Animation clip, you don’t need to select the Animation clip first, but you must right-click the Animation clip that you want to match. For example, if you right-click an Animation clip that is not selected, Timeline matches the clicked clip and ignores the selected Animation clips. The context menu only displays the match options available for the clicked Animation clip. For example, if there is a gap before the clicked Animation clip, only the Match Offsets to Next Clip menu item is available. Matching many clips To match the clip offsets of many clips, select the adjacent Animation clips that you want to match and right-click one of the selected clips. From the context menu, select either Match Offsets to Previous Clip or Match Offsets to Next Clip. Matching many clips with previous clips For example, select the \"RunLeft\" and \"Run2Stand\" clips. Right-click one of the selected clips, and select Match Offsets to Previous Clips, to match the \"RunLeft\" clip with the previous \"Stand2Run\" clip, and to match \"Run2Stand\" with the previous \"RunLeft\" clip."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_pan_zoom.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_pan_zoom.html",
    "title": "Panning and zooming the Clips view | Cacher Game",
    "summary": "Panning and zooming the Clips view Use either the keyboard or the zoombar to pan and zoom the contents of the Clips view. There are many ways to pan, zoom, or frame clips in the Clips view with the keyboard: To pan, either middle-drag, or hold Alt and drag. To frame all selected clips, select clips then press F. To frame all clips, press A. To zoom horizontally, move the scroll-wheel. To zoom vertically, hold Command/Control and move the scroll-wheel. When you horizontally zoom the Clips view, the zoombar indicates the level of zoom. The zoombar is the horizontal bar at the bottom of the Clips view that zooms and pans the section of the Timeline instance or Timeline Asset that is shown in the Clips view. The zoombar (inside the red box) and the zoombar handles (shown by the green arrows). The zoombar thumb is the area between the two zoombar handles. There are many ways to pan and zoom with the zoombar: To pan, drag the zoombar thumb left or right. To jump to a section of the Timeline instance or Timeline Asset, click on an empty area of the scrollbar, on either side of the zoombar. To zoom in or zoom out, drag either zoombar handle. Dragging a zoombar handle also resizes the zoombar thumb. On the zoombar thumb, a white line indicates the location of the Timeline Playhead. Use this line to see where the Timeline Playhead is in relation to the zoom level and the part of the Timeline instance shown in the Clips view."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_position.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_position.html",
    "title": "Positioning clips | Cacher Game",
    "summary": "Positioning clips To position a clip, select Mix mode as the Clip Edit mode. Select a clip and hover over the middle of the clip. When the cursor changes to a position cursor, click and drag the clip to its new position. While dragging, black lines indicate the selection of clips being positioned. The Timeline ruler shows the start time and end time of the selected clips being positioned. Select Mix mode (circled). Select and drag to position a clip. By default, when you drag to position clips, both Snap to Frame and Edge Snap are enabled in the Clips view. You can change these snap settings in the Timeline Settings menu. You can also move a clip to another track of the same type. Drag the clip off of its current track and a white ghost indicates where the clip will be moved. If you drag a clip to an area where the clip cannot be placed, the ghost changes to red indicating that you cannot release the clip in that area. For example, you cannot drag a clip where there is no track. The ghost of the selection being moved is drawn in red if you attempt to move a clip to an invalid area You can position a selection of clips on the same track, or on different tracks. You are not limited to positioning one clip at a time. The same edge snapping rules and invalid area restrictions apply when positioning a selection of clips on many tracks. Positioning clips with the Inspector window You can use the Inspector window to position clips. To position a clip with the Inspector window, select a clip and use the Clip Timing properties in the Inspector window to change its Start property. Clip Timing properties for an Animation clip The effect that changing the Start value has on adjacent clips depends on the selected Clip Edit mode. Positioning clips in different Clip Edit modes You are not restricted to positioning clips with Mix mode as the selected Clip Edit mode. You can also position clips in Ripple mode and in Replace mode. The difference is the effect each Clip Edit mode has on adjacent clips on the tracks where clips are being moved: Positioning clips in Mix mode creates blends between intersecting clips. Positioning clips in Ripple mode ripples subsequent clips, respecting the gaps between clips. Positioning clips in Replace mode cuts or replaces intersecting clips. Positioning clips with the Timeline Playhead You can position clips by inserting frames at the position of the Timeline Playhead. To do this, move the Timeline Playhead to where you want to insert frames. To insert frames starting at frame 40, move the Timeline Playhead to frame 40 Right-click the Timeline Playhead on the Timeline ruler above the Clips view, choose Insert > Frame, and a number of frames. To insert 25 frames, right-click the Timeline Playhead and select Insert > Frame, then 25 Frames This inserts frames in the Timeline Asset at the position of the Timeline Playhead. Inserting frames only repositions the clips that start after the position of the Timeline Playhead. Only the clips that start after the Timeline Playhead are moved. In this example, inserting 25 frames at frame 40 affects Clip 1B, Clip 2B, and Clip 2C."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_reset.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_reset.html",
    "title": "Resetting clips | Cacher Game",
    "summary": "Resetting clips You can reset the duration and speed of a clip. Resetting a clip does not reset the following properties: Start Ease In Duration and Ease Out Duration Animation Extrapolation settings Blend Curves To reset a clip, right-click the clip and select Editing from the context menu. Then, select Reset Duration, Reset Speed, or Reset All. Depending on the reset option you select, resetting a clip does the following: Option: Description: Reset Duration Resets the Duration and the Clip In. Reset Speed Resets the Speed Multiplier. Reset All Resets the Duration, Clip In, and Speed Multiplier. If resetting a clip results in two clips overlapping each other, Timeline creates a blend for the overlap, regardless of the selected Clip Edit mode."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_select.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_select.html",
    "title": "Selecting clips | Cacher Game",
    "summary": "Selecting clips Click to select a single clip. The Clips view displays the selected clip with a white border, including its blends. Selecting a clip deselects all other tracks or clips. Selecting a clip also shows its properties in the Inspector window. The clip properties change depending on the type of clip and whether multiple clips are selected. See Setting Clip properties for details. Hold Shift and click to select contiguous clips vertically on different tracks or horizontally on the same track. For example, to select three contiguous clips on the same track, select the first clip, then hold Shift and click the third clip. All three clips are selected. Click to select the first clip Shift-click the third clip to select contiguous clips on the same track Hold Command/Control and click to select discontiguous clips. Hold Command/Control and click a selected clip to deselect it. Click and drag on an empty area in the Clips view to draw a selection rectangle. This selects all clips inside the rectangle, including the clips that intersect the rectangle. Hold down Shift and draw a selection rectangle to add clips to the current selection. You can also press the Tab key to select clips. The behaviour of the Tab key changes depending on the current selection: If a track is selected, press Tab to select the first clip on the selected track. If many tracks are selected, press Tab to select the first clip on the first selected track. If a clip is selected, press Tab to select its track. If there are no clips or tracks selected, press Tab to select the first clip on the first track. Use the arrow keys to change the selected clips. The behaviour and results depend on the current selection and which modifier keys you press: If nothing is selected in the Timeline window, press the Tab, Up arrow, or Down arrow key to select the first clip on the first track. If a clip is selected, press the Left arrow key to select the previous clip. If the selected clip is the first clip on a track, the Left arrow key selects the track. If a clip is selected, press the Right arrow key to select the next clip. Press the Up arrow key to select the closest clip on a previous track. Press the Down arrow key to select the closest clip on a next track. Hold Shift and press either the Left arrow key or Right arrow key to add or remove clips from the selection of clips. Whether a clip is added to or removed from the selection of clips is relative to the first selected clip. If you zoom into the Clips view, it pans to show either the start or end of the most recently selected clip. For example, if a selected clip is framed in the Clips view and you press the Right arrow key to select the next clip which is outside the Clips view, the Clips view pans to show the start of the selected clip. You can also select clips with the Timeline Playhead. Right-click the Timeline Playhead and choose a selection option. This selects clips that either start after, start before, end after, end before, or intersect the Timeline Playhead. Clips are selected on all tracks. Right-click the Timeline Playhead and choose Select for more clip selection options"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_speed.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_speed.html",
    "title": "Changing clip play speed | Cacher Game",
    "summary": "Changing clip play speed Change the clip play speed to accelerate or decelerate its audio, motion, animation, or particle effect. Changing the clip play speed affects the duration of the clip. You can only change the play speed for Animation clips, Audio clips, and Control clips. To change the clip play speed, first, select the Clip Edit mode to determine how other clips on the same track are affected: If the change in duration results in two clips that overlap each other: Select Mix mode to create a blend. Select Replace mode to cut or remove intersecting clips. Select Ripple mode to reposition the clips that come after the clip being sped up or slowed down. Ripple mode preserves the gaps between clips. Select the clip and set the Speed Multiplier property in the Inspector window. The Speed Multiplier property shows the play speed as a multiplier of the original clip speed, so 1 plays the clip at the same speed as the original clip. Speed Multiplier in the Inspector window For example, to double the play speed of an Animation clip, change the Speed Multiplier to 2. This changes the duration of an 80 frame Animation clip to 40 frames by doubling its play speed. There are other ways to change the play speed of a clip: Right-click the clip and select Editing > Double Speed to halve the clip duration. The clip plays at twice its current speed. A short-dashed line and a multiplication factor indicates an accelerated clip. Doubling the clip speed sets the Speed Multiplier property to double its current value. Right-click the clip and select Editing > Half Speed to double the clip duration. The clip plays at half its current speed. A long-dashed line and multiplication factor indicates a decelerated clip. Halving the clip speed sets the Speed Multiplier property to half its current value. Right-click the clip and select Editing > Reset Speed to reset the clip to its original speed. This is the original duration of the clip. Resetting the clip speed sets the Speed Multiplier property to 1. A short-dashed line and multiplication factor of 2.00x indicates a clip playing at double its original speed"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_split.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_split.html",
    "title": "Splitting clips | Cacher Game",
    "summary": "Splitting clips You can split a clip into two identical clips that have different start points, end points, and durations. You can extend the start or end of the clip to include split animation or audio. You can also reset a clip to undo a split and other edits. To split a clip, select the clip, position the playhead where you want to split the clip, and either right-click the clip and select Editing > Split, or press S. Any selected clips that intersect the playhead are split into separate clips. You can position, trim, and edit split clips independently. Select the clips to be split, position the playhead where you want the split to occur, and press S Selected clips are split where each clip intersects the playhead If a split clip is part of a blend, or if the split is performed within a blend, Timeline copies the blend settings to the split clips."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_tile.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_tile.html",
    "title": "Tiling clips | Cacher Game",
    "summary": "Tiling clips Tile clips to remove gaps and blends between clips on the same track. Tiling clips is useful if you want each clip to begin exactly where the previous clip ends. If you select multiple clips on multiple tracks, you must select at least two clips on the same track for tiling to have an affect. To tile clips, select at least two clips on the same track. Three clips with gaps and blends are selected Right-click on one of the selected clips and select Tile from the context menu. Timeline positions the selected clips based on the position of the first selected clip. The first selected clip does not move, and the duration of each clip remains the same. Tiling removes gaps and blends between the selected clips"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_trim.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_trim.html",
    "title": "Trimming clips | Cacher Game",
    "summary": "Trimming clips Trimming a clip cuts off a portion of the clip at its start or end. To trim a clip, select the Mix mode as the Clip Edit mode, then drag the start or end of the clip. Dragging the start or end of a clip automatically selects the clip, showing its properties in the Inspector window. Use the Clip Timing properties in the Inspector window to set the start, end, duration, and offset (Clip In) of a clip to exact values. Position and trim a clip by adjusting its Start, End, Duration, and Clip In properties in the Inspector window Trimming the start of a clip Trimming an Animation clip or Audio clip after the start of the Source Asset, selects the part of the Source Asset the clip uses. Trimming the start of an Animation clip trims its key animation, relative to the start of the Source Asset Trimming a clip is non-destructive. Trim the clip again to modify its start to include the animation, or the audio waveform, cut off during a previous trim. You can also reset a clip to undo trims or other edits. To trim the start of a clip to a precise time or frame, use the Clip In property in the Inspector window. Changing the Clip In property is similar to the same effect as trimming the start of a clip after the start of its Source Asset. Trimming the end of a clip As with the start of the clip, trimming an Animation clip or Audio clip before the end of the Source Asset, selects the part of the Source Asset the clip uses. Trimming the end of an Animation clip trims its key animation, relative to the end of the Source Asset If you trim the end of an Animation clip or Audio clip past the end of the Source Asset the clip is based on, the extra clip area either holds or loops, depending on the settings of the Source Asset. For example, an Animation clip named \"End Move\" uses the motion file \"Recorded(2)\" as its Source Asset. The motion file \"Recorded(2)\" is set to loop. Trimming the end of the Animation clip past the end of the \"Recorded(2)\" Source Asset fills the extra clip area by looping \"Recorded(2)\". A white animation curve shows the hold or loop. A white animation curve indicates whether the extra clip area holds or loops data, depending on the Source Asset To choose whether the extra clip area holds or loops, select the Source Asset to change its settings in the Inspector window. Depending on the type of Source Asset, different properties control whether the Source Asset holds or loops. If you are unsure which Source Asset is used by a clip, select the clip in the Clips view, right-click and select Find Source Asset from the context menu. This highlights the Source Asset in the Project window. Trimming the end of looping clips The Timeline window provides special trimming options for Animation clips or Audio clips with loops. These special trim options either remove the last partial loop or complete the last partial loop. For example, the Animation clip named run_away is over three times longer than the Source Asset on which it is based. Since the Source Asset is set to loop, the Animation clip loops the Source Asset until the Animation clip ends which results in a partial loop. L1, L2, and L3 signify complete loops. The clip ends partially through the fourth loop, L4. To extend the end of the clip and complete a partial loop, select the clip, right-click and select Editing > Complete Last Loop. To trim the clip at the last complete loop, select the clip, Right-clip and select Editing > Trim Last Loop. The result of select Editing > Complete Last Loop The result of select Editing > Trim Last Loop Trimming with the Timeline Playhead You can also trim a clip based on the location of the playhead. To trim using the playhead, position the playhead within the clip to be trimmed. Right-click the clip and select either Editing > Trim Start or Editing > Trim End. Trim Start trims the start of the clip to the playhead. Trim End trims the end of the clip to the playhead. _Move the Timeline Playhead within the _ Right-click and select Editing > Trim Start to trim the start of the clip to the playhead If you select clips on multiple tracks, Timeline only trims the selected clips that intersect the playhead."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_about.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_about.html",
    "title": "Curves view | Cacher Game",
    "summary": "Curves view The Curves view shows the animation curves for Infinite clips, or for Animation clips that were converted from Infinite clips. Use the Curves view for basic animation editing such as adding keys, modifying keys, adjusting tangents, and changing the interpolation between keys. To view animation curves for an Infinite clip, click the Curves icon next to the Track name. To view animation curves for an Animation clip, select the Animation clip and click the Curves icon. The Curves view is similar to Curves mode in the Animation window. The Curves icon (circled) shows and hides the Curves view for the selected clip The Curves icon does not appear for Animation tracks with humanoid animation or imported animation. To view and edit key animation for humanoid or imported Animation clips, right-click an Animation clip and select Edit in Animation Window from the context menu. You can also double-click the Animation clip. The Animation window appears, linked to the Timeline window. When in linked mode, the Animation window shows a Linked icon and the name of the Animation clip being edited. Click the Linked icon to stop editing the Animation clip and to release the Animation window from linked mode. Animation window linked to the Timeline window, indicated by the Linked icon and Animation clip name"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_hide.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_hide.html",
    "title": "Hiding and showing curves | Cacher Game",
    "summary": "Hiding and showing curves For the selected Animation clip, the Curves view includes a hierarchical list of the properties with animation curves. Expand, collapse, select, and deselect the properties in this list to filter which animation curves show in the Curves view. For example, to show only the X-axis animation curves for the position of a GameObject, expand Position, select the Position.x property, and then press F to frame the animation curve for the Position.x property. Curves view showing the animation curve for the Position.x property There are many ways to expand, collapse, select, and deselect animation curves: Click the Triangle icon of a parent property to expand and collapse its list of child properties. Hold Shift and click to select contiguous properties. Hold Command/Control and click to select discontiguous properties. Hold Command/Control and click a selected property to deselect it."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_add.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_add.html",
    "title": "Adding keys | Cacher Game",
    "summary": "Adding keys The Curves view provides the following methods for adding keys: Right-click on an animation curve and select Add Key. This method adds a key at the location of the right-click. Double-click on an animation curve. This method adds a key at the location of the Double-click."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_del.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_del.html",
    "title": "Deleting keys | Cacher Game",
    "summary": "Deleting keys The Curves view provides the following methods for deleting keys: Right-click a key and select Delete Key from the context menu. This method does not affect selected keys. Select a key and either press Delete or right-click and select Delete Key from the context menu."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_edit.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_edit.html",
    "title": "Editing keys | Cacher Game",
    "summary": "Editing keys Edit a key to change its time, value, or both. The Curves view provides the following different methods for editing a key: Right-click a key and select Edit from the context menu to enter specific values for time and value. Select a key and press Enter to enter specific values. Select and drag a key to change its time and value. Drag a key vertically, then press Shift to snap the key on the vertical axis. This changes the value of the key, but not its time. Drag a key horizontally, then press Shift to snap the key on the horizontal axis. This changes the time of the key, but not its value."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_interp.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_interp.html",
    "title": "Changing interpolation and shape | Cacher Game",
    "summary": "Changing interpolation and shape Every key has one or two tangents that control the interpolation of the animation curve. The term interpolation refers to the estimation of values that determine the shape of the animation curve between two keys. Whether a key has one of two tangents depends on the location of the key on the animation curve. The first key only has a right tangent that controls the interpolation of the animation curve after the key. The last key only has a left tangent that controls the interpolation of the animation curve before the last key. The first key (red) only has a right tangent, and the last key (blue) only has a left tangent All other keys have two tangents where the left tangent controls the interpolation before the key, and the right tangent controls the interpolation after the key. By default, tangents are joined. Dragging one tangent affects the position of both tangents, and the interpolation of the animation curve both before and after the key. Keys that are neither the first key nor last key have joined tangents by default. Dragging either tangent changes the interpolation of the animation curve both before and after the key. Dragging a tangent may also change the interpolation mode of the animation curve. For example, most keys are set to the Clamped Auto interpolation mode which automatically smooths animation curve as it passes through the key. If you drag a tangent of a key set to Clamped Auto, the interpolation mode changes to Free Smooth. The term interpolation mode refers to the interpolation algorithm that determines which shape to use when drawing the animation curve. To view the interpolation mode for a key, select the key and right-click. The context menu shows the interpolation mode. To change the interpolation mode for a key, select the key, right-click and select another interpolation mode. The context menu shows the interpolation mode for the selected key. Use the context menu to change the interpolation mode. Some interpolation modes break the left and right tangents so that you can position them separately. When tangents are broken, you can set a separate interpolation mode for the animation curve before the key and the animation curve after the key. For more details on the different interpolation modes, see Editing Curves. In the Animation window documentation, the interpolation mode is referred to as tangent type."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_sel.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_sel.html",
    "title": "Selecting keys | Cacher Game",
    "summary": "Selecting keys Click to select a single key. Selecting a key deselects all other selected keys. The Curves view displays the selected key with its tangents. Click to select a single key. A selected key shows its tangents. To select contiguous keys along the same animation curve, click the first key, then hold Shift and click the last key. Hold Shift and click a key to select contiguous keys There are many ways to select and deselect keys in the Curves view: Hold Command/Control and click to select discontiguous keys. Hold Command/Control and click a selected key to deselect it. Click and drag on an empty spot in the Curves view to draw a selection rectangle. This selects all keys within the rectangle. Hold down Shift while drawing the selection rectangle to add keys to the current selection. Double-click a selected key to select all keys on the same animation curve."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_nav.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_nav.html",
    "title": "Navigating the Curves view | Cacher Game",
    "summary": "Navigating the Curves view Use one of the following methods to pan, zoom, resize, or frame the animation curves and keys in the Curves view: To pan, middle-drag, or hold Alt and drag. To zoom vertically, move the scroll-wheel, or hold Alt and right-drag. To zoom horizontally, hold Command/Control and zoom vertically. To resize the Curves view, drag the double line separating the Curves view from the next track in the Track list. To frame only selected animation curves or selected keys, press F. To frame all animation curves or keys, press A. You can also use the Zoombar to pan, zoom, and resize the Clips view."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/grp_hide.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/grp_hide.html",
    "title": "Collapsing and expanding Track groups | Cacher Game",
    "summary": "Collapsing and expanding Track groups To collapse the tracks in a Track group, either click the Triangle icon beside the name of the Track group or double-click the Track group. The tracks are collapsed from view in the Timeline window, not muted. To expand the tracks in a Track group, click the Triangle icon or double-click the Track group again. Triangle icon (circled) collapses the tracks in the Game Board Track group. A ghost track visually represents the tracks in the collapsed group. You can also press the Left Arrow key to collapse the tracks in a Track group while the Track group is selected. Press the Right Arrow key to expand the tracks in a Track group. If you press the Right Arrow key with a Track group already selected, the selection switches to the first track in the Track group."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/grp_lock.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/grp_lock.html",
    "title": "Locking Track groups | Cacher Game",
    "summary": "Locking Track groups You can also lock a Track group to prevent editing its Track sub-groups, tracks, and clips. This is useful when you have finished animating the content within a Track group and you want to avoid inadvertently modifying its tracks or clips. You cannot edit the tracks or select the clips in a locked Track group. The Lock icon identifies a locked Track group. Selected and locked Track group with Lock icon (red circle) To lock a Track group, right-click on the Track group header and select Lock from the context menu. You can also select a Track group and press L. You can select and lock multiple Track groups. To unlock a Track group, click the Lock icon. You can also select a locked Track group and press L, or right-click and select Unlock from the context menu. Tracks in a Track group maintain their individual locked state when you lock a Track group. This means that if you lock a track and then lock its Track group, when you unlock the Track group, the track remains locked. For example, the MovingPieces Track group has its first track locked and its second track unlocked. If you lock the Track group, both the first and second track are locked. If you unlock the Track group, the first track remains locked and the second track is unlocked because the first track was already locked before the Track group was locked."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/grp_use.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/grp_use.html",
    "title": "Using Track groups | Cacher Game",
    "summary": "Using Track groups Use Track groups to organize tracks when you are working with many tracks. For example, a Timeline Asset contains an Animation track and an Audio track that interacts with the same GameObject. To organize these tracks, move them into their own Track group. To add a Track group, click the Add button and select Track Group from the Add menu. You can also right-click an empty area of the Track list and select Track Group from the context menu. A new Track group appears at the bottom of the Track list. Timeline window with Track group added To rename a Track group, click its name and an I-beam cursor appears. Type the new name for the Track group and press Return. To move tracks into a Track group, select one or more tracks and drag over the Track group. The Track group is highlighted. When dragging a selection of tracks, the last selected track type displays beside the cursor. To drop the tracks before a specific track in the Track group, drag until a white insert line indicates the destination. Release the mouse button when the white insert line appears within the Track group Selected tracks are moved to the location of the insert line A Track group can also have any number of Track sub-groups. To add a Track sub-group, either select a Track group and click the Add button in the Track list, or click the Plus icon beside the Track group name, and select Track Sub-Group. You can also use this menu to add tracks directly to a Track group or a Track sub-group. Click the Plus icon to add Track Sub-Groups and tracks to Track groups"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/index.html",
    "title": "About Timeline | Cacher Game",
    "summary": "About Timeline Unity's Timeline Use Unity's Timeline to create cinematic content, game-play sequences, audio sequences, and complex particle effects. Each cut-scene, cinematic, or game-play sequence that you create with Unity's Timeline consists of a Timeline Asset and a Timeline instance. The Timeline window creates and modifies Timeline Assets and Timeline instances simultaneously. The Timeline Overview section includes details on the relationship between the Timeline window, Timeline Assets, and Timeline instances. The Using Timeline section shows how to create Timeline Assets and Timeline instances, record basic animation, animate humanoids, and use other Timeline features. The Samples section includes a description of the samples offered by the Timeline package. Installing Timeline Timeline is a Package and is installed through the Packages window in Unity. Consult the Packages window documentation for more information. Technical details Requirements This version of Timeline is compatible with the following versions of the Unity Editor: 2019.1 and later (recommended) Package contents The following table indicates the folder structure of the Timeline package: Location Description <Runtime> Root folder containing the source for the Timeline Runtime. This is the source for what is available in the Player. <Editor> Root folder containing the source for the Timeline Editor used to edit Timeline files inside the Unity Editor. Document revision history Date Reason October 23, 2020 Added documentation for customization samples. October 22, 2020 Added samples section October 10, 2018 Document created. Matches package version 0.0.0"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_about.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_about.html",
    "title": "Timeline properties in the Inspector window | Cacher Game",
    "summary": "Timeline properties in the Inspector window The Inspector window displays information about the selected GameObject including all attached components and their properties. This section documents the properties in the Inspector window that appear when you select one or many Timeline Assets, tracks, clips, or a combination. If you select a single Timeline Asset, track, or clip, the Inspector window displays the properties for the selected Asset, track, or clip. For example, if you select an Animation clip, the Inspector window shows the common properties and Playable Asset properties for the selected Animation clip. Inspector window when selecting an Animation clip in the Timeline window If you select multiple Timeline Assets, tracks, or clips, the Inspector window shows two sections: a section with properties that apply to the entire selection, and a section of common properties that apply to each selected object individually. For example, if you select an Audio clip on one track and two Animation clips on another track, the Inspector window includes Multiple Clip Timing properties and Clip Timing properties: Use the Multiple Clip Timing properties to change the Start or End of the selection as a group. For example, if you change the Start to frame 30, the selection of clips start at frame 30. This moves the start of the first clip to frame 30 and the remaining selected clips are placed relative to the first clip, respecting gaps between selected clips. Use the Clip Timing properties to change the common properties for each selected clip. If the selected clips have different values for the same property, the value is represented with a dash (\"-\"). If you change the dash to a value, it sets the value for all selected clips. For example, if you change the Ease In Duration from a dash to 10 frames, the ease in of each selected clip changes to 10 frames. Inspector window when selecting multiple clips, on multiple tracks, in the Timeline window If your selection does not have common properties, the Inspector window prompts you to narrow the selection. For example, if you select an Animation track and an Audio clip in the Timeline window, you are prompted to narrow the selection: The message in the Inspector window when the selection does not have common properties"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp.html",
    "title": "Setting clip properties | Cacher Game",
    "summary": "Setting clip properties Use the Inspector window to change the name of a clip and other properties, such as its timing and blend properties. The available properties depend on the type of clip selected. For example, select an Activation clip to change its name and set its Clip Timing. Inspector window when selecting an Activation clip in the Timeline window Not all clips have properties. See the following sections for clips with properties: Activation clip properties Animation clip common properties Animation clip Playable Asset properties Audio clip properties Control clip common properties Control clip Playable Asset properties"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_act.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_act.html",
    "title": "Activation clip properties | Cacher Game",
    "summary": "Activation clip properties Use the Inspector window to change the name of an Activation clip and its Clip Timing. Inspector window when selecting an Activation clip in the Timeline window Display Name The name of the Activation clip shown in the Timeline window. By default, each Activation clip is named \"Active\". Clip Timing properties Use the Clip Timing properties to change the position and duration of the Activation clip. Most timing properties are expressed in both seconds (s) and frames (f). When specifying seconds to modify a Clip Timing property, all decimal values are accepted. When specifying frames, only integer values are accepted. For example, if you attempt to enter 12.5 in a frames (f) field, it is set to 12 frames. Depending on the selected Clip Edit mode, changing the Start, End, or Duration may ripple or replace Activation clips on the same track. Property Description Start The frame or time (in seconds) when the clip starts. Changing the Start also affects the End. Changing the Start sets the End to the new Start value plus the Duration. End The frame or time (in seconds) when the clip ends. Changing the End also affects the Start. Changing the End sets the Start to the new End value minus the Duration. Duration The duration of the clip in frames or seconds. Changing the Duration also affects the End. Changing the Duration sets the End to the Start value plus the new Duration."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_anim_com.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_anim_com.html",
    "title": "Animation clip common properties | Cacher Game",
    "summary": "Animation clip common properties Use the Inspector window to change the common properties of an Animation clip. The common properties of an Animation clip include its name, timing, play speed, blend properties, and extrapolation settings. Inspector window when selecting an Animation clip in the Timeline window Display Name The name of the Animation clip shown in the Timeline window. Clip Timing properties Use the Clip Timing properties to position, change the duration, change the ease-in and ease-out duration, choose the extrapolation mode, and adjust the play speed of the Animation clip. Most timing properties are expressed in both seconds (s) and frames (f). When specifying seconds, a Clip Timing property accepts decimal values. When specifying frames, a property only accepts integer values. For example, if you attempt to enter 12.5 in a frames (f) field, the Inspector window sets the value to 12 frames. Depending on the selected Clip Edit mode, changing the Start, End, or Duration may blend, ripple, or replace Animation clips on the same track. Property Description Start The frame or time (in seconds) when the clip starts. Changing the Start changes the position of the clip on its track in the Timeline Asset. Changing the Start also affects the End. Changing the Start sets the End to the new Start value plus the Duration. End The frame or time (in seconds) when the clip ends. Changing the End also affects the Start. Changing the End sets the Start to the new End value minus the Duration. Duration The duration of the clip in frames or seconds. Changing the Duration also affects the End. Changing the Duration sets the End to the Start value plus the new Duration. Ease In Duration Sets the number of seconds or frames that it takes for the clip to ease in. If the beginning of the clip overlaps and blends with another clip, the Ease In Duration cannot be edited and instead shows the duration of the blend between clips. See Blending clips. Ease Out Duration Sets the number of seconds or frames that it takes for the clip to ease out. If the end of the clip overlaps and blends with another clip, the Ease Out Duration cannot be edited and instead shows the duration of the blend between clips. In this case, trim or position the clip to change the duration of the blend between clips. See Blending clips. Clip In Sets the offset of when the source clip should start playing. For example, to play the last 10 seconds of a 30 second Animation clip, set Clip In to 20 seconds. Speed Multiplier A multiplier on the playback speed of the clip. This value must be greater than 0. Changing this value changes the duration of the clip. Animation Extrapolation Use the Animation Extrapolation properties to set the gap extrapolation before and after an Animation clip. The term gap extrapolation refers to how an Animation track approximates or extends animation data in the gaps before, between, and after the Animation clips on a track. There are two properties for setting the gap extrapolation between Animation clips. The Pre-Extrapolate property only appears for Animation clips. Property Description Pre-Extrapolate Controls how animation data is approximated in the gap before an Animation clip. The Pre-Extrapolate property affects the easing-in of an Animation clip. Post-Extrapolate Controls how animation data extends in the gap after an Animation clip. The Post-Extrapolate property affects the easing-out of an Animation clip. Blend Curves Use the Blend Curves to customize the transition between the outgoing and incoming Animation clips. See Blending clips for details on how to blend clips and customize blend curves. When easing-in or easing-out clips, use the Blend Curves to customize the curve that eases-in or eases-out an Animation clip. See Easing-in and Easing-out clips for details."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_anim_plyb.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_anim_plyb.html",
    "title": "Animation clip Playable Asset properties | Cacher Game",
    "summary": "Animation clip Playable Asset properties Use the Inspector window to change the Playable Asset properties of an Animation clip. These properties include controls for manually applying position and rotation clip offsets, and options for overriding default clip matching. To view the Playable Asset properties for an Animation clip, select an Animation clip in the Timeline window and expand Animation Playable Asset in the Inspector window. Inspector window showing the Animation Playable Asset properties for the selected Animation clip Animation Clip Use the Animation Clip to change the source asset used by the clip on the Animation track. The source asset is either a recorded Infinite clip or an external motion clip. Clip Transform Offsets Use the Clip Transform Offsets area to manually apply position and rotation offsets to the selected Animation clip. The tools and properties underneath the Clip Transform Offsets provide two methods of manually applying offsets based on the selected source: Property: Description: Move tool Shows a Move Gizmo in the Scene view. Use the Move Gizmo to manually position the clip offset for the selected Animation clip. Using the Move Gizmo changes the Position coordinates. Rotate tool Shows a Rotate Gizmo in the Scene view. Use the Rotate Gizmo to manually rotate the clip offset for the selected Animation clip. Using the Rotate Gizmo changes the Rotation coordinates. Position Manually sets the clip offset in X, Y, and Z coordinates. By default, the Position coordinates are set to zero and are relative to the track offsets. Rotation Manually sets the clip rotation offset around the X, Y, and Z axes. By default, the Rotation axes are set to zero and are relative to the track offsets. You can also automatically match the clip offsets based on the end of the previous Animation clip, or the start of the next Animation clip. The transforms that are matched depends on the Offset Match Fields. Offsets Match Fields Use Offsets Match Fields to choose which transforms to match when matching clip offsets. By default, Use Defaults is enabled and uses the default matching options set for the Animation track. Disable Use Defaults to override the track matching options and choose which transformations to match when performing a Match Offsets to Previous Clip or Match Offsets to Next Clip for the selected Animation clip. When you disable Offsets Match Fields, a series of additional checkboxes appear. Use these additional checkboxes to enable or disable matching per coordinate, for both position and rotation. Remove Start Offset Enable Remove Start Offset to make the Animation clip begin at position zero and rotation zero. The rest of the position and rotation keys in the Animation clip follow from zero. Enabling Remove Start Offset makes it easier to match the Animation clip with the previous Animation clip. Disable Remove Start Offset to keep the starting position and rotation. The Animation clip starts from its original position and rotation. Foot IK Enable Foot IK if the Animation clip is animating a humanoid and you want to use inverse kinematics for foot solving. Inverse kinematics attempts to remedy foot sliding by solving and influencing foot placement from the foot to the hip of the humanoid. Disable Foot IK if the Animation clip is animating a non-humanoid object such as a moving platform or a quadruped character with a non-human bone structure."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_aud.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_aud.html",
    "title": "Audio clip properties | Cacher Game",
    "summary": "Audio clip properties Use the Inspector window to change the properties of an Audio clip. These properties include the name, timing, play speed, blend properties, audio media, and loop option. Inspector window when selecting an Audio clip in the Timeline window Display Name The name of the Audio clip shown in the Timeline window. This is not the name of the audio file that Unity uses for the waveform. For information on audio file properties, see Audio Playable Asset below. Clip Timing properties Use the Clip Timing properties to position, change the duration, change the ease-in and ease-out duration, and adjust the play speed of the Audio clip. Most timing properties are expressed in both seconds (s) and frames (f). When specifying seconds, a Clip Timing property accepts decimal values. When specifying frames, a property only accepts integer values. For example, if you attempt to enter 12.5 in a frames (f) field, the Inspector window sets the value to 12 frames. Depending on the selected Clip Edit mode, changing the Start, End, or Duration may blend, ripple, or replace Audio clips on the same track. Property Description Start The frame or time (in seconds) when the clip starts. Changing the Start property changes the position of the clip on its track in the Timeline Asset. Changing the Start also affects the End. Changing the Start sets the End to the new Start value plus the Duration. End The frame or time (in seconds) when the clip ends. Changing the End also affects the Start. Changing the End sets the Start to the new End value minus the Duration. Duration The duration of the clip in frames or seconds. Changing the Duration also affects the End. Changing the Duration sets the End to the Start value plus the new Duration. Blend Curves Use the Blend Curves to customize the fade-in and fade-out between the outgoing and incoming Audio clips. See Blending clips for details on how to blend clips and customize blend curves. When easing-in or easing-out Audio clips, use the Blend Curves to customize the curve that fades-in or fades-out an Audio clip. See Easing-in and Easing-out clips for details. Audio Playable Asset Use the Audio Playable Asset properties to select the Audio file used by the Audio clip and to set whether the selected Audio clip loops (Loop enabled) or plays once (Loop disabled)."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_ctrl_com.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_ctrl_com.html",
    "title": "Control clip common properties | Cacher Game",
    "summary": "Control clip common properties Use the Inspector window to change the common properties of a Control clip. You can only create a Control clip in a Control track. A Control clip is a special clip that controls a nested Timeline instance, Particle System, Prefab instance, or ITimeControl Script, depending on how you create the Control clip: If you create the Control clip from a GameObject with a Playable Director component associated with a Timeline Asset, then the Control clip controls a nested Timeline instance. If the GameObject parents other GameObjects associated with many Timeline Assets, then the Control clip controls multiple Timeline instances. If you create the Control clip from a GameObject with a Particle System component, then the Control clip controls a Particle System. If you create the Control clip from a GameObject linked to a Prefab, then the Control clip controls a Prefab instance. If you create the Control clip from a GameObject with a script that implements the ITimeControl interface, then the Control clip controls an ITimeControl Script. The common properties of a Control clip include its name and Clip Timing properties. Not all common properties apply to all types of Control clips. Inspector window when selecting a Control clip in the Timeline window Display Name The name of the Control clip shown in the Timeline window. Clip Timing properties Use the Clip Timing properties to position and change the duration of the Control clip. Most timing properties are expressed in both seconds (s) and frames (f). When specifying seconds, a Clip Timing property accepts decimal values. When specifying frames, a property only accepts integer values. For example, if you attempt to enter 12.5 in a frames (f) field, the Inspector window sets the value to 12 frames. Depending on the selected Clip Edit mode, changing the Start, End or Duration of a Control clip may create an insert or replace clips on the same track. You cannot create a blend between Control clips. Property: Description: Start The frame or time (in seconds) when the Control clip starts. Changing the Start changes the position of the Control clip on its track in the Timeline Asset. Changing the Start also affects the End. Changing the Start sets the End to the new Start value plus the Duration. End The frame or time (in seconds) when the Control clip ends. Changing the End also affects the Start. Changing the End sets the Start to the new End value minus the Duration. Duration The duration of the clip in frames or seconds. Changing the Duration also affects the End. Changing the Duration sets the End to the Start value plus the new Duration. Clip In Sets the offset of when the Control clip starts playing. The Clip In property only affects Particle Systems and nested Timeline instances. Speed Multiplier A speed multiplier that affects the playback speed of the Control clip. This value must be greater than 0. The Speed Multiplier property only affects Particle Systems and nested Timeline instances."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_ctrl_plyb.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_ctrl_plyb.html",
    "title": "Control clip Playable Asset properties | Cacher Game",
    "summary": "Control clip Playable Asset properties Use the Inspector window to change the playable asset properties of a Control clip. To view the playable asset properties for a Control clip, select a Control clip in the Timeline window and expand Control Playable Asset in the Inspector window. Inspector window showing the Control Playable Asset properties for the selected Control clip Source Game Object Use Source Game Object to select the GameObject with the Particle System, nested Timeline instance, or ITimeControl Script for the selected Control clip. Changing the Source Game Object changes what the Control clip controls. Prefab Use Prefab to select a Prefab to instantiate when the Timeline instance plays in Play Mode. When a Prefab is selected, the label of the Source Game Object property changes to Parent Object. When in Play Mode, the Prefab is instantiated as a child of the Parent Object. Although the Prefab is instantiated at the start of the Timeline instance, the Prefab is only activated during the Control clip. When the Control clip ends, the Prefab instance is deactivated. Control Activation Enable Control Activation to activate the Source Game Object while the Control clip plays. Disable this property to activate the Source Game Object during the entire Timeline instance. The Control Activation property only affects Control clips that control a nested Timeline instance or a Particle System. Post Playback When Control Activation is enabled, use the Post Playback property to set the activation state for the nested Timeline instance when the main Timeline stops playing. The Post Playback property only affects nested Timeline instances. Post-Playback State Description Active Activates the Source Game Object after the nested Timeline instance finishes playing. Inactive Deactivates the Source Game Object after the nested Timeline instance finishes playing. Revert Reverts the Source Game Object to its activation state before the nested Timeline instance began playing. Advanced properties Use the Advanced properties to select additional functionality based on whether the Control clip controls a Playable Director, Particle System, or ITimeControl Script. The Advanced properties do not apply to all Control clips. Property Description Control Playable Directors Enable this property if the Source Game Object is attached to a Playable Director and you want the Control clip to control the nested Timeline instance associated with this Playable Director. Control Particle Systems Enable this property when the Control clip includes a Particle System. Set the value of the Random Seed property to create a unique, repeatable effect. Control ITimeControl Enable this property to control ITimeControl scripts on the Source GameObject. To use this feature, the Source Game Object must have a script that implements the ITimeControl interface. Control Children Enable this property if the Source Game Object has a child GameObject with either a Playable Director, Particle System, or ITimeControl Script, and you want the Control clip to control this child component. For example, if the Source Game Object is a GameObject that parents another GameObject with a Particle System, enable this property to make the Control clip control the Particle system on the child GameObject."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_tl.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_tl.html",
    "title": "Setting Timeline Asset properties | Cacher Game",
    "summary": "Setting Timeline Asset properties Use the Inspector window to set the frame rate, the duration mode, and a fixed length for the selected Timeline Asset. From the Project window, select a Timeline Asset to view its properties. Inspector window when selecting a Timeline Asset in the Project window Property Description Frame Rate Sets the reference frame rate for the Timeline Asset and its Timeline instances. Change the Frame Rate to align clips at precise frames but changing the Frame Rate is only visual and has no effect on play speed, keys, tracks, or clips. Timeline supports the following standard frame rates: 24 (PAL), 25 (NTSC), 30, 50, and 60. Timeline also supports custom frame rates from 1e-6 to 1000. To set a custom frame rate, enter a non-standard frame rate for the Frame Rate property. In the Timeline Settings menu, the Custom menu item is enabled and automatically selected for the Timeline instance. The Custom menu item shows the custom frame rate in parentheses. Duration Mode Choose whether the duration of the Timeline Asset extends to the end of the last clip or ends at a specific time or frame. Based On Clips Sets the length of the Timeline Asset based on the end of the last clip. Fixed Length Sets the length of the Timeline Asset to a specific number of seconds or frames. Duration Shows the length of the Timeline Asset in seconds and frames when the Duration Mode is set to Based on Clips. Sets the length of the Timeline Asset to a specific number of seconds or frames when the Duration Mode is set to Fixed Length."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_trk.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_trk.html",
    "title": "Setting track properties | Cacher Game",
    "summary": "Setting track properties Use the Inspector window to change the name of a track and its properties. The available properties depend on the type of track selected. For example, select an Animation Track to set how track offsets are applied, to apply an avatar mask, and to select which transforms are modified when matching offsets between Animation clips. Inspector window when selecting an Animation track in the Timeline window Not all tracks have properties. See the following sections for tracks with properties: Activation Track properties Animation Track properties"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_trk_act.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_trk_act.html",
    "title": "Activation track properties | Cacher Game",
    "summary": "Activation track properties Use the Inspector window to change the name of an Activation track and set the state of its bound GameObject when the Timeline Asset finishes playing. Inspector window when selecting an Activation track in the Timeline window Property Description Display Name The name of the Activation track shown in the Timeline window and Playable Director component. The Display Name applies to the Timeline Asset and all of its Timeline instances. Post-playback state Sets the activation state for the bound GameObject when the Timeline Asset stops playing. The Post-playback state applies to the Timeline Asset and all of its Timeline instances. Active Activates the bound GameObject when the Timeline Asset finishes playing. Inactive Deactivates the bound GameObject when the Timeline Asset finishes playing. Revert Reverts the bound GameObject to its activation state before the Timeline Asset began playing. For example, if the Timeline Asset finishes playing with the GameObject set to inactive, and the GameObject was active before the Timeline Asset began playing, then the GameObject reverts to active. Leave As Is Sets the activation state of the bound GameObject to the state the Timeline Asset is at when it finishes playing. For example, if the Timeline Asset finishes playing with the GameObject set to inactive, the GameObject remains inactive."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_trk_anim.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_trk_anim.html",
    "title": "Animation track properties | Cacher Game",
    "summary": "Animation track properties Use the Inspector window to change the name of an Animation track, set how track offsets are applied, apply an avatar mask, and set which transforms are modified by default when you match clip offsets. Inspector window when selecting an Animation track in the Timeline window Property Description Display Name The name of the Animation track shown in the Timeline window and in the Playable Director component. The Display Name applies to the Timeline Asset and all of its Timeline instances. Track Offsets Applies a position and rotation offset to the start of each Animation clip on the selected Animation track. The position and rotation offset starts from a specific position and rotation or from the position and rotation relative to a state machine or another Timeline instance. Apply Transform Offsets Starts the animation in each Animation clip from a specific position and rotation offset. Use the Move and Rotate tools, and the Position and Rotation fields, to set the starting position and rotation. Apply Scene Offsets Starts the animated GameObject from its current position and rotation in the Scene. Use this mode to build a Timeline instance that transitions to and from a state machine or to and from another Timeline instance. Auto (deprecated) If you load a Scene or Project that was built before 2018.3, Track Offsets is automatically set to Auto (deprecated). This is a special mode for backwards compatibility. After opening an old Project, choose another Track Offsets mode because the Auto (deprecated) offset disables key animation recording. Move tool Enable the Move tool to show the Move Gizmo in the Scene view. Use the Move Gizmo to visually position the transform offset. Positioning the Move Gizmo changes the Position properties. The Move tool only appears when Track Offsets is set to Apply Transform Offsets. Rotate tool Enable the Rotate tool to show the Rotate Gizmo in the Scene view. Use the Rotate Gizmo to visually rotate the track offset. Rotating the Rotate Gizmo changes the Rotation properties. The Rotate tool only appears when Track Offsets is set to Apply Transform Offsets. Position Sets the track position offset in X, Y, and Z coordinates. The Position fields only appears when Track Offsets is set to Apply Transform Offsets. Rotation Sets the track rotation offset in X, Y, and Z coordinates. The Rotation fields appear when Track Offsets is set to Apply Transform Offsets. Apply Avatar Mask Enables Avatar masking. When enabled, Timeline applies the animation of all Animation clips on the track based on the selected Avatar Mask. Avatar Mask Selects the Avatar Mask applied to all Animation clips on the Animation track. An Avatar Mask defines which humanoid body parts are animated by Animation clips on the selected Animation track. The body parts that are masked are animated by other Animation tracks in the Timeline Asset. For example, you can use an Avatar Mask to combine the lower-body animation on an Animation track with the upper body animation on an Override Animation track. Default Offset Match Fields Expand to display a series of checkboxes that choose which transforms are matched when matching clip offsets between Animation clips. The Default Offset Match Fields set the default matching options for all Animation clips on the same track. Use the Animation Playable Asset properties to override these defaults for each Animation clip."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/play_director.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/play_director.html",
    "title": "Playable Director component | Cacher Game",
    "summary": "Playable Director component The Playable Director component stores the link between a Timeline instance and a Timeline Asset. The Playable Director component controls when the Timeline instance plays, how the Timeline instance updates its clock, and what happens when the Timeline instance finishes playing. Playable Director component added to the GameObject named Ground. The GameObject is associated with the GroundCTL Timeline Asset. The Playable Director component also shows the list of tracks from the associated Timeline Asset (Playable property) that animate GameObjects in the Scene. The link between Timeline Asset tracks and GameObjects in the Scene is referred to as binding or Track binding. For more on binding and the relationship between Timeline Assets and Timeline instances, see Timeline overview. Property Description Playable Associates a Timeline Asset with a GameObject in the Scene. When you make this association, you create a Timeline instance for the selected Timeline Asset. After you create a Timeline instance, you can use the other properties in the Playable Director component to control the instance and choose which GameObjects in the Scene are animated by the Timeline Asset. Update Method Sets the clock source that the Timeline instance uses to update its timing. DSP Select for sample accurate audio scheduling. When selected, the Timeline instance uses the same clock source that processes audio. DSP stands for digital signal processing. Game Time Select to use the same clock source as the game clock. This clock source is affected by time scaling. Unscaled Game Time Select to use the same clock source as the game clock, but without being affected by time scaling. Manual Select to not use a clock source and to manually set the clock time through scripting. Play on Awake Whether the Timeline instance is played when game play is initiated. By default, a Timeline instance is set to begin as soon as the Scene begins playback. To disable the default behaviour, disable the Play on Awake option in the Playable Director component. Wrap Mode The behaviour when the Timeline instance ends playback. Hold Plays the Timeline instance once and holds on the last frame until playback is interrupted. Loop Plays the Timeline instance repeatedly until playback is interrupted. None Plays the Timeline instance once. Initial Time The time (in seconds) at which the Timeline instance begins playing. The Initial Time adds a delay in seconds before the Timeline instance actually begins. For example, when Play On Awake is enabled and Initial Time is set to five seconds, if you click the Play button in the Unity Toolbar, Play Mode starts and the Timeline instance begins five seconds later. Current Time Views the progression of time according to the Timeline instance in the Timeline window. The Current Time field matches the Playhead Location field. Use the Current Time field when the Timeline window is hidden. The Current Time field appears in the Playable Director Component when in Timeline Playback mode or when Unity is in Game Mode. Bindings Shows the link between GameObjects in the Scene with tracks from the associated Timeline Asset (Playable property). The Bindings area is split into two columns: The first column lists the tracks from the Timeline Asset. Each track is identified by an icon and its track type. The second column lists the GameObject linked (or bound) to each track. The Bindings area does not list Track groups, Track sub-groups, or tracks that do not animate GameObjects. The Timeline window shows the same bindings in the Track list."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_about.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_about.html",
    "title": "Samples | Cacher Game",
    "summary": "Samples Gameplay Sequence Demo This sample demonstrates how Timeline can be used to create a small in-game moment, using built-in tracks. Overview In this example, we have a Player character jogging and then colliding with another character. The Player character represents our gameplay character and is using a looping jog animation. The Timeline then takes control of the player character, collides with the other character, then returns to his original gameplay animation (jog) once the Timeline has finished. Note that the gameplay animation is driven by an Animator and will only play at runtime. The character will be in a T-Stance pose for the runtime portion when using the Timeline preview. Timeline Structure This sample uses the following tracks: Activation, Animation, Audio, Control and Marker track. The GameplaySequence timeline has been organized in the following groups: Building, Lights, Cameras, Characters, Audio and Props. Building group This group contains two Control tracks: Building Spawn which spawns the building prefab, and Building Particles that controls two particle systems in the scene (ElectricalSparks and SandSwirlsEffect). Lights group This group contains two Animation tracks; one for the Sun light, and the other for the flickering light. Both tracks where animated in Unity and the curves can be seen by enabling the curves icon or double clicking on the track to open the Animation window. Sun light is animated in Rotation (sunrise) and the Point light has a spiked Intensity curve. Cameras group This group contains two cameras: Main camera using an Animation track, and Follow camera using an Activation track. Main Camera has an animation curve for the continuous movement (which can be seen by enabling the curves icon) and two override tracks, one for each character. The clips on the override tracks have static values for a fixed camera shot. Follow camera is simply parented child of the Player character's root and activated for the follow-cam shots. Characters group The first track is an Animation track for the Playercharacter. Notice that clip pre and post extrapolations are set to None, meaning the character will not be influenced by the timeline during these gaps. At runtime, these gaps mean the Player character will be using his Animator state, jog. The second track is an Activation track for the second character, making his appear in the scene. The third and last track is an Animation track for the second character. On this track, the second character blends from one clip to another creating a cinematic sequence. Audio group This group contains four Audio tracks; Player, crickets, neon-light & character2. The Player track has a jog/breathing and bump clip. The crickets track has pan and volume animation curves (can be seen by enabling the curves icon). The neon-light sound is for the flickering Point light. The Character2 tracks contains all audio clips for this second character. Props group This group animates Table and Can. The first Activation track makes Table appear in the scene. The second Activation track makes a static version of Can appear in the scene. The third track is an Animation track that animates the table bump animation. The last track is a Control track with a sub-timeline for the can animation. The static version of the can is disabled and replaced with the animated version when the Control clip starts. Double-clicking the Control track clip will enter the Can sub-timeline. Can Sub-Timeline This sub-timeline contains an Animation track for the can rolling off the table and bouncing on the ground, an Audio track for the sounds effects and a Control track for the liquid particles splashing out of the can. Marker track In the Timeline window, under the time ruler, there is a Marker track with one Signal at frame 1200. This is the Signal marker that triggers the jog audio clip on Player once the timeline finishes the gameplay jog. Customization samples This sample includes tracks, clips, markers and actions that demonstrate how to extend and customize timeline in different ways. Annotation: provides a marker that can be used as a bookmark. Video track: provides a track capable of playing video clips. Time dilation track: provides a track that can be used to adjust Unity's global Time.timeScale. Tween track: provides a track that can be used for simple transform movements. Text track: provides a track that can be used to display different messages to the screen using a TextMeshPro Text component. Demo Included is a demo timeline that showcases all the of the above samples."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_annotation.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_annotation.html",
    "title": "Annotation marker sample | Cacher Game",
    "summary": "Annotation marker sample The Annotation sample provides a marker that can be used as a bookmark for your timeline. Here are the options available on an annotation: Field | Description --- | --- Title | The annotation's title. This will be displayed as a tooltip, when hovering the mouse on the annotation. Color | The annotation's color in the Timeline window. Show line overlay | Use this option to show a vertical line that spans the full height of the Timeline window. Custom marker workflow example This example will demonstrate how to: create a custom marker; customize a marker with MarkerEditor; use a custom USS style to draw a marker; add additional commands with Actions; 1. Create an annotation marker A marker is an item that can be added to a Timeline Asset and is used to represent a point in time. Markers also have a specialization, just like clips (Activation clip, Audio clip, Animation clip, etc). In order to add a new type of marker, all we need to do is to create a class that inherits the Marker class: public class AnnotationMarker : UnityEngine.Timeline.Marker {} This custom marker can now be added to any track or on the timeline marker area: We can add a title, description and color to the annotation: public class AnnotationMarker : Marker { public string title; public Color color; public string description; public bool showLineOverlay; } The annotation marker itself is now complete. But the customization work is not done yet. Timeline offers many customization abilities. 2. Customize the marker's appearance A marker's appearance can be customized using a USS style or with MarkerEditor. Both paths have their advantages and drawbacks. Custom USS style A marker can use a USS style to specify its appearance. For more information on how to create custom USS styles, see how to define custom USS styles. The CustomStyle attribute can be used to specify a style for a given marker: [CustomStyle(\"AnnotationStyle\")] public class AnnotationMarker : Marker { //... } AnnotationStyle is defined in a USS stylesheet and will be used when a marker is displayed on screen: USS styles are useful if the desired appearance is simple (i.e. when only using a texture icon). For more complex stuff (i.e. dynamically changing a marker's color), a MarkerEditor will be needed. Custom editor MarkerEditor can be used to augment the capabilities of a marker in the editor. It works like a custom Inspector; the CustomTimelineEditor attribute is used to tell Timeline that a MarkerEditor class should be associated to a given marker. [CustomTimelineEditor(typeof(AnnotationMarker))] public class AnnotationMarkerEditor : MarkerEditor { //... } Marker information MarkerEditor lets us provide information about the marker by overriding the GetMarkerOptions method. public override MarkerDrawOptions GetMarkerOptions(IMarker marker) { var annotation = marker as AnnotationMarker; if (annotation != null) { return new MarkerDrawOptions { tooltip = annotation.title }; } return base.GetMarkerOptions(marker); } Here the tooltip of an Annotation has been set to use the annotation's title variable. MarkerDrawOptions can also set the error text on a marker, which can be useful if a variable has been incorrectly set and needs attention. Overlay An overlay can be drawn on top of a marker by overriding the DrawOverlay method: public override void DrawOverlay(IMarker marker, MarkerUIStates uiState, MarkerOverlayRegion region) { var annotation = marker as AnnotationMarker; if (annotation != null) { //Draw overlay code... } } An overlay is drawn on top of the marker; the USS style is drawn first and DrawOverlay is called afterwards. For an Annotation, we can use DrawOverlay to change the color of the marker and to draw a line that spans the full Timeline window's height. To do this, we can use the information given in region. Along with the visible time range, MarkerOverlayRegion provides two rectangles that can be used to know where to draw: markerRegion markerRegion is the rectangle that encompasses the marker. This is useful to draw something directly on the marker itself. For Annotation, this rectangle is used to draw the color overlay. timelineRegion timelineRegion is the rectangle that encompasses the clips and markers region of the timeline window. This is useful to draw something out of the marker's region, like the Annotation's line overlay. const float k_LineOverlayWidth = 6.0f; float markerRegionCenter = markerRegion.xMin + (markerRegion.width - k_LineOverlayWidth) / 2.0f; Rect lineRect = new Rect(markerRegionCenter, timelineRegion.y, k_LineOverlayWidth, timelineRegion.height); 3. Create custom Actions Timeline Action Actions can be used to add new menu entries in Timeline's context menus. For an Annotation, we want to add a menu item available in all context menus to create an Annotation with the clipboard's contents. To do this, a TimelineAction is needed, along with the MenuEntry attribute. [MenuEntry(\"Create Annotation from clipboard contents\")] public class CreateAnnotationFromClipboardContents : TimelineAction { //... } MenuEntry lets Timeline know that this action can be added in context menus. Classes inheriting from TimelineAction need to override two methods: Execute and Validate. Validate Validate is used to specify that the action's prerequisites are fulfilled. In the case of CreateAnnotationFromClipboardContents, the action is only valid if there actually is contents in the clipboard. ActionValidity is used to describe the validity state of an action: public override ActionValidity Validate(ActionContext context) { if (!markers.All(marker => marker is AnnotationMarker)) return ActionValidity.NotApplicable; string buffer = EditorGUIUtility.systemCopyBuffer; return buffer.Length == 0 ? ActionValidity.Invalid : ActionValidity.Valid; } ActionValidity.Valid : The action can be executed. ActionValidity.Invalid : The action cannot be executed given the current context and will appear grayed out in context menus. ActionValidity.NotApplicable : The action does not apply to the current context and will not show up in menus. Execute Execute should run the code necessary to execute the action's purpose. public override bool Execute(ActionContext context) { string buffer = EditorGUIUtility.systemCopyBuffer; TrackAsset track = context.tracks.FirstOrDefault(); if (buffer.Length != 0) { // Create the new annotation and add it to the track //... return true; } return false; } The return value should specify if the execution succeeded or not. Marker Action It is also possible to write custom actions that apply only to markers, instead of all Timeline items. This is the purpose of the MarkerEditor class. It works just like TimelineAction, except that action applies to a list of markers. A shortcut can also be assigned to an action. A static method with the TimelineShortcut attribute is needed. Invoker can be used to easily execute a given action: [TimelineShortcut(\"Replace annotation description with clipboard\", KeyCode.G)] public static void InvokeAction() { Invoker.InvokeWithSelectedMarkers<ReplaceAnnotationDescriptionAction>(); } Notes Runtime considerations AnnotationMarker is available at runtime; it can be queried using, for example, TrackAsset.GetMarkers(). However, AnnotationMarkerEditor and custom actions are not available at runtime, since it depends on classes that are not part of the runtime assembly."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_text.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_text.html",
    "title": "Text Track sample | Cacher Game",
    "summary": "Text Track sample This track requires the TextMeshPro package to be installed in the project. This type of track can be used to display different messages to the screen using a TextMeshPro Text Component. It is ideal for things like subtitles. It demonstrates the following: Registering custom previewable properties in a custom track. Perform custom blending of clips using a mixer PlayableBehaviour. Provide custom clip data that can be animated using the inline curve editor using a PlayableBehaviour template. Using a ClipEditor to react to changes in a clip. Usage To use this custom track, drag a TextMeshPro Text Component into the hierarchy view of the Timeline. A TextTrack will be created, and use the track context menu to create clips. Clip properties such as Message, FontSize and Color can be modified in the inspector by selecting the clip. Clips can be overlapped to create transitions."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_time.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_time.html",
    "title": "Time Dilation Track sample | Cacher Game",
    "summary": "Time Dilation Track sample This type of track can be used to adjust Unity's global Time.timeScale for the duration of the clip. The most common use would be to create bullet-time style effects. The sample demonstrates the following: Creating a custom TrackMixer PlayableBehaviour that performs custom blending of clip values. Setting and restoring Unity global values in a PlayableBehaviour. How to support blending and extrapolation on custom clips. Provide custom clip data that can be animated using the inline curve editor using a PlayableBehaviour template. Usage Create a TimeDilationTrack in timeline using the Add Track menu, found under the Timeline.Samples submenu. Add clips to the track, and use the inspector to set scale values for the clip, or use the inline curve editor to animate the scale values. Clips can also be overlapped to create transitions between clips."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_tween.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_tween.html",
    "title": "Transform Tween track sample | Cacher Game",
    "summary": "Transform Tween track sample This track can be used for simple transform movements between two points. Usage This track can be used for simple transform movements. All translation happens in a straight line but the speed can be controlled with an animation curve. The Tween track binds to the scene Transform you wish to move. Field Description Start Location This is a reference to a Transform in the scene that marks the position and/or rotation of the moving Transform when the playable starts. If it is left null the position/rotation of the moving Transform when the playable starts will be used. End Location This is a reference to a Transform in the scene that marks the position and/or rotation of the moving Transform when the playable finishes. Tween Position Whether or not the position of the Transform should change. Tween Rotation Whether or not the rotation of the Transform should change. Custom clip workflow example This example will demonstrate how to: create a custom clip, track and mixer; use the PlayableGraph API to animate an object's transform; customize a clip with ClipEditor; 1. Custom clip when a Timeline begins playing, nodes called Playables are created. They are organized in a tree-like structure called the PlayableGraph. For each frame, Timeline samples this graph to read and mix multiple data sources (animation, audio and more). The first step to create a custom clip is to define a new PlayableBehaviour that will be added to a graph. It will need to store the data needed to implement the transform tween: public class TweenBehaviour : PlayableBehaviour { public Transform startLocation; public Transform endLocation; public bool shouldTweenPosition; public bool shouldTweenRotation; public AnimationCurve curve; } The PlayableBehaviour's data is not serialized and will be lost once its parent graph is destroyed. To save this data, the next step is to define a new PlayableAsset: [Serializable] public class TweenClip : PlayableAsset { public ExposedReference<Transform> startLocation; public ExposedReference<Transform> endLocation; public bool shouldTweenPosition = true; public bool shouldTweenRotation = true; public AnimationCurve curve; //... } Note: The clip needs to store a start and an end location. Since an asset cannot directly reference a scene object, it cannot store a transform object directly. This is why an ExposedReference<Transform> is used. A PlayableAsset's main purpose is to build a PlayableBehaviour. This is done with the CreatePlayable method: public class TweenClip : PlayableAsset { //... public override Playable CreatePlayable(PlayableGraph graph, GameObject owner) { // create a new TweenBehaviour ScriptPlayable<TweenBehaviour> playable = ScriptPlayable<TweenBehaviour>.Create(graph); TweenBehaviour tween = playable.GetBehaviour(); // set the behaviour's data tween.startLocation = startLocation.Resolve(graph.GetResolver()); tween.endLocation = endLocation.Resolve(graph.GetResolver()); tween.curve = curve; tween.shouldTweenPosition = shouldTweenPosition; tween.shouldTweenRotation = shouldTweenRotation; return playable; } } CreatePlayable will initialize a new TweenBehaviour using TweenClip's data. 2. Custom track A custom track is created by defining a TrackAsset subclass. The following attributes can be added to a TrackAsset: TrackBindingType: defines which type of object should be bound to a track; TrackClipType: defines which type of clip should be associated to a track. For this example, the track needs a Transform object binding and can only accepts clips of type TweenClip, which was previously defined in step 1: [TrackBindingType(typeof(Transform))] [TrackClipType(typeof(TweenClip))] public class TweenTrack : TrackAsset { // ... } The data setup is complete; TweenTrack and TweenClip can now be added to a timeline: However, no transform tween has been implemented yet. To do this, a track mixer is needed. 3. Define a track mixer To properly handle blending, or crossfading, between two clips, a track mixer is needed. A track mixer is a PlayableBehaviour that will have access to all clips data and will blend those together. Track mixer setup By default, when a track is added to a timeline, an empty playable is generated and is connected to each clip's playable. For example, this track: will generate the following playable graph: Timeline: this playable is the root playable; all playables related to tracks are connected to this node. Playable: this playable represents the track mixer. Since no track mixer is defined, an empty one is generated. TweenBehaviour: this playable represents a clip. One per clip is generated. All clip playables are connected to the track mixer. In order to define a custom track mixer, a new PlayableBehaviour needs to be defined: public class TweenMixerBehaviour : PlayableBehaviour {} then, in TrackAsset, the CreateTrackMixer method can be used to specify a custom track mixer: public class TweenTrack : TrackAsset { public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount) { return ScriptPlayable<TweenMixerBehaviour>.Create(graph, inputCount); } } Now the playable graph looks like this: The empty playable that used to connect clip playables together is now replaced by TweenMixerBehaviour. Transform tween implementation The implementation of the transform tween resides in the ProcessFrame method from TweenMixerBehaviour. Here are the main steps of that implementation: Initialization: When the timeline is first played, the initial transform of the track binding is fetched. If the start or end transform is null, the initial transform will be used instead. Get clip behaviours & weights: to appropriately blend, the mixer needs to ask information for all of its inputs (clips): // Iterate on all the playable's (mixer) inputs (ie each clip on the track) int inputCount = playable.GetInputCount(); for (int i = 0; i < inputCount; i++) { // get the input connected to the mixer Playable input = playable.GetInput(i); // get the weight of the connection float inputWeight = playable.GetInputWeight(i); // get the clip's behaviour TweenBehaviour tweenInput = GetTweenBehaviour(input); } Calculate and blend: A linear interpolation is used to calculate a transform between two points. Apply result: Once the calculation is done, the transform is written in the track binding object: // Apply the final position and rotation values in the track binding trackBinding.position = accumPosition + m_InitialPosition * (1.0f - totalPositionWeight); trackBinding.rotation = accumRotation.Blend(m_InitialRotation, 1.0f - totalRotationWeight); 4. Customize a clip's appearance ClipEditor can be used to augment the capabilities of a clip in the editor. It works like a custom Inspector; the CustomTimelineEditor attribute is used to tell Timeline that a ClipEditor class should be associated to a given clip. [CustomTimelineEditor(typeof(TweenClip))] public class TweenClipEditor : ClipEditor { //... } It is possible to customize the appearance of a clip with the DrawBackground method: public override void DrawBackground(TimelineClip clip, ClipBackgroundRegion region) { TweenClip asset = clip.asset as TweenClip; if (asset == null) return; // Drawing code here... } Notes Only the portion between (0,1) of the curve will be used. When a clip ends, the object bound to the track will return to its original position."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_video.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_video.html",
    "title": "VideoTrack sample | Cacher Game",
    "summary": "VideoTrack sample The Video Track sample provides a track capable of playing video clips in Timeline. It demonstrates how to do the following: Using built-in blending, speed and clip-in capabilities in custom clips. Using ClipEditors to customize clip drawing. Using a mixer PlayableBehaviour to perform look-ahead operations. Managing UnityEngine.Object lifetime (VideoPlayer) with a PlayableBehaviour. Using ExposedReferences to reference components in the scene from a PlayableAsset. Usage Drag and drop an imported video from the project window onto a timeline. The video track and clip will be created. The video clip has several playback options, including the option to specify the camera to render to video to, and an audio source to redirect the audio. If no camera is specified, the main camera in the scene will be used. If no audio source is specified, the audio will play directly (i.e. no 3D audio). Known Issues The video track supports ease-in and ease-out of a video, but blending between videos will not give expected results. Editing a timeline containing video clips may cause the clip to flicker or change unexpectedly. Looping a timeline with video clips may cause the video to be de-synchronized."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_about.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_about.html",
    "title": "Timeline overview | Cacher Game",
    "summary": "Timeline overview Use the Timeline window to create cut-scenes, cinematics, and game-play sequences by visually arranging tracks and clips linked to GameObjects in your Scene. A cinematic sequence in the Timeline window. For each cut-scene, cinematic, or game-play sequence, the Timeline window saves the following: Timeline Asset: Stores the tracks, clips, and recorded animations without links to the specific GameObjects being animated. The Timeline Asset is saved to the Project. Timeline instance: Stores links to the specific GameObjects being animated or affected by the Timeline Asset. These links, referred to as bindings, are saved to the Scene. Timeline Asset The Timeline window saves track and clip definitions as a Timeline Asset. If you record key animations while creating your cinematic, cut-scene, or game-play sequence, the Timeline window saves the recorded clips as children of the Timeline Asset. The Timeline Asset saves tracks and clips (red). Timeline saves recorded clips (blue) as children of the Timeline Asset. Timeline instance To animate a GameObject in your Scene with a Timeline Asset, you must create a Timeline instance. A Timeline instance associates a Timeline Asset with the GameObject in the Scene, through a Playable Director component. When you select a GameObject in a Scene that has a Playable Director component, the Timeline instance appears in the Timeline window. The bindings appear in the Timeline window and in the Playable Director component (Inspector window). The Playable Director component shows the Timeline Asset (blue) with its bound GameObjects (red). The Timeline window shows the same bindings (red) in the Track list. The Timeline window provides an automated method of creating a Timeline instance while creating a Timeline Asset. Reusing Timeline Assets Because Timeline Assets and Timeline instances are separate, you can reuse the same Timeline Asset with many Timeline instances. For example, you could create a Timeline Asset named VictoryTL with the animation, music, and particle effects that play when the main game character (Player) wins. To reuse the VictoryTL Timeline Asset to animate another game character (Enemy) in the same Scene, you can create another Timeline instance for the secondary game character. The Player GameObject (red) is attached to the VictoryTL Timeline Asset] The Enemy GameObject (blue) is also attached to the VictoryTL Timeline Asset] Because you are reusing the Timeline Asset, any modification to the Timeline Asset in the Timeline window results in changes to all Timeline instances. For example, in the previous example, if you delete the Audio track while modifying the Player Timeline instance, the Timeline window removes the track from the VictoryTL Timeline Asset. The Timeline window also removes the Audio track from all instances of the VictoryTL Timeline Asset, including the Enemy Timeline instance."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_gloss.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_gloss.html",
    "title": "Timeline glossary | Cacher Game",
    "summary": "Timeline glossary This topic provides an alphabetical list of the terminology used throughout the Timeline documentation. animatable property: A property belonging to a GameObject, or belonging to a component added to a GameObject, that can have different values over time. animation: The result of adding two different keys, at two different times, for the same animatable property. animation curve: The curve drawn between keys set for the same animatable property, at different frames or seconds. The position of the tangents and the selected interpolation mode for each key determines the shape of the animation curve. binding or Track binding: Refers to the link between Timeline Asset tracks and the GameObjects in the scene. When you link a GameObject to a track, the track animates the GameObject. Bindings are stored as part of the Timeline instance. blend and blend area: The area where two Animation clips, Audio clips, or Control clips overlap. The overlap creates a transition that is referred to as a blend. The duration of the overlap is referred to as the blend area. The blend area sets the duration of the transition. Blend In curve: In a blend between two Animation clips, Audio clips, or Control clips, there are two blend curves. The blend curve for the incoming clip is referred to as the Blend In curve. Blend Out curve: In a blend between two Animation clips, Audio clips, or Control clips, there are two blend curves. The blend curve for the out-going clip is referred to as the Blend Out curve. clip: A generic term that refers to any clip within the Clips view of the Timeline window. Clips view: The area in the Timeline window where you add, position, and manipulate clips. Control/Command: This term is used when instructing the user to press or hold down the Control key on Windows, or the Command key on Mac. Curves view: The area in the Timeline window that shows the animation curves for Infinite clips or for Animation clips that have been converted from Infinite clips. The Curves view is similar to Curves mode in the Animation window. Gap extrapolation: How an Animation track approximates animation data in the gaps before and after an Animation clip. field: A generic term that describes an editable box that the user clicks and types-in a value. A field is also referred to as a property. incoming clip: The second clip in a blend between two clips. The first clip, the out-going clip, transitions to the second clip, the incoming clip. Infinite clip: A special animation clip that contains basic key animation recorded directly to an Animation track within the Timeline window. An Infinite clip cannot be positioned, trimmed, or split because it does not have a defined duration: it spans the entirety of an Animation track. interpolation: The estimation of values that determine the shape of an animation curve between two keys. interpolation mode: The interpolation algorithm that draws the animation curve between two keys. The interpolation mode also joins or breaks left and right tangents. key: The value of an animatable property, set at a specific point in time. Setting at least two keys for the same property creates an animation. out-going clip: The first clip in a blend between two clips. The first clip, the out-going clip, transitions to the second clip, the incoming clip. Playhead Location field: The field that expresses the location of the Timeline Playhead in either frames or seconds, depending on the Timeline Settings. property: A generic term for the editable fields, buttons, checkboxes, or menus that comprise a component. An editable field is also referred to as a field. tangent: One of two handles that controls the shape of the animation curve before and after a key. Tangents appear when a key is selected in the Curves view, or when a key is selected in the Curve Editor. tangent mode: The selected interpolation mode used by the left tangent, right tangent, or both tangents. Timeline or Unity's Timeline: Generic terms that refer to all features, windows, editors, and components related to creating, modifying, or reusing cut-scenes, cinematics, and game-play sequences. Timeline Asset: Refers to the tracks, clips, and recorded animation that comprise a cinematic, cut-scene, game-play sequence, or other effect created with the Timeline window. A Timeline Asset does not include bindings to the GameObjects animated by the Timeline Asset. The bindings to scene GameObjects are stored in the Timeline instance. The Timeline Asset is project-based. Timeline window: The official name of the window where you create, modify, and preview a Timeline instance. Modifications to a Timeline instance also affects the Timeline Asset. Timeline instance: Refers to the link between a Timeline Asset and the GameObjects that the Timeline Asset animates in the scene. You create a Timeline instance by associating a Timeline Asset to a GameObject through a Playable Director component. The Timeline instance is scene-based. Timeline Playback Controls: The row of buttons and fields in the Timeline window that controls playback of the Timeline instance. The Timeline Playback Controls affect the location of the Timeline Playhead. Timeline Playback mode: The mode that previews the Timeline instance in the Timeline window. Timeline Playback mode is a simulation of Play mode. Timeline Playback mode does not support audio playback. Timeline Playhead: The white marker and line that indicates the exact point in time being previewed in the Timeline window. Timeline Selector: The name of the menu in the Timeline window that selects the Timeline instance to be previewed or modified. track: A generic term that refers to any track within the Track list of the Timeline window. Track groups: The term for a series of tracks organized in an expandable and collapse collection of tracks. Track list: The area in the Timeline window where you add, group, and modify tracks."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_play_cntrls.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_play_cntrls.html",
    "title": "Timeline Playback Controls | Cacher Game",
    "summary": "Timeline Playback Controls To play the Timeline instance and to control the location of the Timeline Playhead, use the Timeline Playback Controls. Timeline Playback Controls Timeline Start button To move the Timeline Playhead to the start of the Timeline instance, click the Timeline Start button, or hold Shift and press Comma (,). Previous Frame button To move the Timeline Playhead to the previous frame, click the Previous Frame button, or press Comma (,). Timeline Play button To preview the Timeline instance in Timeline Playback mode, click the Timeline Play button, or press the Spacebar. Timeline Playback mode does the following: Begins playback at the current location of the Timeline Playhead and continues to the end of the Timeline instance. If the Play Range button is enabled, playback is restricted to a specified time range. The Timeline Playhead position moves along the Timeline instance. The Playhead Location field shows the position of the Timeline Playhead in either frames, timecode or seconds, depending on the Timeline settings. To pause playback, click the Timeline Play button again, or press the Spacebar. When playback reaches the end of the Timeline instance, the Wrap Mode determines whether playback should hold, repeat, or do nothing. The Wrap Mode setting is a Playable Director component property. Timeline Playback mode provides a preview of the Timeline instance while in the Timeline window. Timeline Playback mode is only a simulation of Play Mode in the Game View. The Timeline Playback mode does not support audio playback. To preview a Timeline instance with audio, enable the Play on Awake option in the Playable Director component and preview game play in Play Mode. Next Frame button To move the Timeline Playhead to the next frame, click the Next Frame button, or press Period (.). Timeline End button To move the Timeline Playhead to the end of the Timeline instance, click the Timeline End button, or hold Shift and press Period (.). Play Range button Enable the Play Range button to restrict playback to a specific range of seconds or frames. You can only set a play range when previewing a Timeline instance within the Timeline window. Unity ignores the play range in Play Mode. The Timeline ruler highlights the play range and indicates its start and end with white markers. To modify the play range, drag either marker. Play Range (red circle) enabled with while markers and highlighted area defining range Timeline Playhead and Playhead Location field The Timeline Playhead indicates the exact point in time being previewed in the Timeline window. The Playhead Location field expresses the location of the Timeline Playhead in either frames or seconds. Playhead Location field and Timeline Playhead (red). The Timeline Playhead also appears on the Zoombar (red arrow). Use the Zoombar to navigate, scroll, and zoom the Clips view. A white line indicates the location of the Timeline Playhead in relation to the entire Timeline instance. To jump the Timeline Playhead to a specific time, click the Timeline ruler. You can also enter the time value in the Playhead Location field and press Enter. When entering a value, frames are converted to seconds or seconds are converted to frames, based on the Timeline settings. For example, if the Timeline ruler is expressed as seconds with a frame rate of 30 frames per second, entering 180 in the Playhead Location field converts 180 frames to seconds and moves the Timeline Playhead to 6:00. To set the time format that the Timeline window uses, configure the Timeline Settings. Switching between Local and Global Use the Local or Global button to change the Timeline ruler from local time to global time. Local time and global time are only relevant when editing a nested Timeline instance. To create a nested Timeline instance, drag a GameObject associated with a Timeline instance into another Timeline instance. The Timeline instance you are dragging into becomes the master Timeline instance. The Timeline instance associated with the GameObject becomes a nested Timeline instance. A nested Timeline instance appears as a Control clip on a Control track (red arrow) To edit a nested Timeline instance, double-click the Control clip that contains the nested Timeline instance. The Timeline window switches to the nested Timeline instance, indicated by the Timeline title which shows the name and GameObject of the master Timeline instance, followed by the name and GameObject of the nested Timeline instance. The Timeline title indicates that you are editing a nested Timeline instance (red outline). The Global button (red arrow) indicates that the nested Timeline instance is shown using global time. When editing a nested Timeline instance, click Global to switch the Timeline ruler to Local time. Local time is relative to the nested Timeline. This means that the Timeline ruler starts at zero. A nested Timeline instance in Local time. Click Local to view the Timeline ruler in relation to the placement of the nested Timeline in the master Timeline instance. This means that if, for example, if the Control clip is placed at frame 70 of the master Timeline then the Timeline ruler starts at 70 at the beginning of the nested Timeline instance. A nested Timeline instance in Global time."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_selector.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_selector.html",
    "title": "Timeline Preview and Timeline Selector | Cacher Game",
    "summary": "Timeline Preview and Timeline Selector Use the Timeline Selector to select the Timeline instance to view, modify, or preview in the Timeline window. The Timeline Preview button enables or disables previewing the effect that the selected Timeline instance has on your Scene. Timeline Preview button with Timeline Selector and menu. Selecting a Timeline instance automatically enables the Timeline Preview button. To select a Timeline instance, click the Timeline Selector and choose from the list of Timeline instances in the current Scene. Each menu item displays the name of the Timeline Asset and its associated GameObject in the current Scene. For example, the Timeline Asset named GroundATL that is associated with the Ground GameObject, displays as \"GroundATL (Ground).\""
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_settings.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_settings.html",
    "title": "Timeline Settings | Cacher Game",
    "summary": "Timeline Settings Use the Timeline Settings to choose the Timeline window and Timeline Asset settings such as the unit of measurement, the duration mode, audio waveform, and window snap settings. Click the Cog icon in the Timeline window to view the Timeline Settings menu Time Unit Select either Frames, Timecode or Seconds to set the Timeline window to display time in that format. Timecode will display the time in seconds with sub-second values displayed in frames. Duration Mode Use the Duration Mode to set whether the duration of the Timeline Asset extends to the end of the last clip (Based On Clips), or ends at a specific time or frame (Fixed Length). When the Duration Mode is set to Fixed Length, use one of the following methods to change the length of the Timeline Asset: Select the Timeline Asset in the Project window and use the Inspector window to set the Duration in seconds or frames. In the Timeline window, drag the blue marker on the timeline. The blue marker indicates the end of the Timeline Asset. A blue line indicates the duration of the Timeline Asset. Timeline Asset duration (red rectangle) and end marker (green circle) Frame Rate Select one of the options under Frame Rate to set the unit of measurement for the Timeline ruler. Change the Frame Rate to align clips at precise frames but changing the Frame Rate is only visual and has no effect on play speed, keys, tracks, or clips. The following standard frame rates are listed: Film (24 fps), PAL (25 fps), NTSC (29.97 fps), 30, 50, or 60. Timeline supports custom frame rates from 1e-6 to 1000. To set a custom frame rate, you must use the Frame Rate property in the Timeline Asset settings. When the Timeline Asset is set to a custom frame rate, the Custom menu item is enabled and is automatically selected for the Timeline instance. The Custom menu item shows the custom frame rate in parentheses. Show Audio Waveforms Enable Show Audio Waveforms to draw the waveforms for all audio clips on all audio tracks. For example, use an audio waveform as a guide when manually positioning an Audio clip of footsteps with the Animation clip of a humanoid walking. Disable Show Audio Waveform to hide audio waveforms. Show Audio Waveforms is enabled by default. Enable Audio Scrubbing Enable Audio Scrubbing to play audio while dragging the Timeline Playhead. Disable Enable Audio Scrubbing to stop playing audio while dragging the Timeline Playhead. When disabled, Timeline only plays audio when in Timeline Playback mode. Snap to Frame Enable Snap to Frame to manipulate clips, preview Timeline instances, drag the Timeline Playhead, and position the Timeline Playhead using frames. Disable Snap to Frame to use subframes. Snap to Frame is enabled by default. Disable Snap to Frame to position clips and drag the playhead between frames For example, when Snap to Frame is disabled and you drag the Timeline Playhead, it moves the playhead between frames. The format of Playhead Location displays differently depending on whether the Timeline window is set to Seconds, Timecode or Frames: When the Timeline window is set to Frames, the Playhead Location shows frames and subframes. For example, 8 frames and 34 subframes displays as 8.34. When the Timeline window is set to Timecode, the Playhead Location shows seconds, frames, and subframes. For example, 6 seconds, 17 frames, and 59 subframes displays as 6:17 [.59]. When the Timeline window is set to Seconds, the Playhead Location shows seconds. For example, 6.5 seconds displays as 6:50. Manipulating clips, previewing Timeline instances, and positioning the playhead at the subframes level is useful when attempting to synchronize animation and effects with audio. Many high-end audio processing software products create audio waveforms with subframe accuracy. Edge Snap Enable the Edge Snap option to snap clips when you position, trim, and create blends. When enabled, the Timeline window snaps the start or end of a clip when dragged within 10 pixels of the Timeline Playhead, the start or end of a clip on the same track, the start or end of a clip on another track, or the start or end of the entire Timeline instance. The start guide or end guide is redrawn in white to indicate that the clip has snapped to the edge of another clip or the Timeline Playhead. Disable Edge Snap to create more accurate blends, ease-ins, or ease-outs. Edge Snap is enabled by default."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_window.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_window.html",
    "title": "Timeline window | Cacher Game",
    "summary": "Timeline window To access the Timeline window, select Sequencing > Timeline from the Window menu. What the Timeline window shows depends on what you select in either the Project window or the Scene view. For example, if you select a GameObject that is associated with a Timeline Asset, the Timeline window shows the tracks and clips from the Timeline Asset and the GameObject bindings from the Timeline instance. Selecting a GameObject associated with a Timeline Asset displays its tracks and clips, and the bindings from the Timeline instance If you haven’t selected a GameObject, the Timeline window informs you that the first step for creating a Timeline Asset and a Timeline instance is to select a GameObject. With no GameObject selected, the Timeline window provides instructions If a GameObject is selected and it is not associated with a Timeline Asset, the Timeline window provides the option for creating a new Timeline Asset, adding the necessary components to the selected GameObject, and creating a Timeline instance. Select a GameObject that is not associated with a Timeline Asset to create a new Timeline Asset, add components, and create a Timeline instance To use the Timeline window to view a previously created Timeline Asset, select the Timeline Asset in the Project window and open the Timeline window. The Timeline window shows the tracks and clips associated with the Timeline Asset, but without the track bindings to GameObjects in the Scene. In addition, the Timeline Playback Controls are disabled and there is no Timeline Playhead. Timeline Asset selected in the Project window shows its tracks and clips, but with no track bindings. The Timeline Playback Controls are disabled. Timeline saves the track bindings to GameObjects in the Scene with the Timeline instance, not the Timeline Asset. For details on the relationship between the Project, Scene, Timeline Assets, and Timeline instances, see Timeline overview."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_add.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_add.html",
    "title": "Adding tracks | Cacher Game",
    "summary": "Adding tracks The Timeline window supports many different methods of adding tracks to the Track list. Depending on the method you choose, the Timeline window may also add track bindings to the Track header, clips to tracks, and components to GameObjects. Add Track menu The simplest method to add a track is to click the Add button and select the type of track from the Add Track drop-down menu. You can also right-click an empty area of the Track list to make the Add Track menu appear. The Timeline window also supports dragging a GameObject into the Track list. Drag a GameObject into an empty area in the Track list and select the type of track to add from the context menu. Depending on the type of track selected, the Timeline window performs different actions: Select Animation Track and the Timeline window binds the GameObject to the Animation track. If the GameObject doesn't already have an Animator component, the Timeline window creates an Animator component for the GameObject. Select Activation Track and the Timeline window binds the GameObject to the Activation track. There are some limitations when creating an Activation track when dragging a GameObject. For example, the main GameObject with the Playable Directory component should not be bound to an Activation track. Because this is the same GameObject that links the Timeline Asset to the Scene, activating and disabling the GameObject affects the length of Timeline instance. Select Audio Track and the Timeline window adds an Audio Source component to the GameObject and binds this Audio Source component to the Audio track."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_delete.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_delete.html",
    "title": "Deleting tracks | Cacher Game",
    "summary": "Deleting tracks Delete a track to remove the track, its clips, blends, and properties from the Timeline window. This is a destructive action that modifies a Timeline Asset and affects all Timeline instances based on the Timeline Asset. There are many ways to delete tracks: Select a track and press the Delete key (or hold Command and press Delete). Select a track. Right-click an empty area in the Track list and select Delete from the context menu. Right-click a track and select Delete from the context menu. Deleting an Animation track also deletes the recorded Infinite clips for Animation clips that were converted from Infinite clips. The Project window may still show recorded Infinite clips as children of a Timeline Asset because it is not updated until you save the Scene or Project. You cannot delete a locked track."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_dup.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_dup.html",
    "title": "Duplicating tracks | Cacher Game",
    "summary": "Duplicating tracks Duplicating a track copies its clips, blends, and Inspector properties. If the duplicated track is bound to a GameObject, the binding is reset to None. Track binding for a duplicated track is reset to None There are many ways to duplicate tracks: Select a track. Right-click an empty area in the Track list and select Duplicate from the context menu. Select a track. Hold Command/Control and press D. Select a track. Hold Command/Control and press C, for copy, then press V, for paste. Right-click a track and either select Duplicate from the context menu or hold Command/Control and press D."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_list_about.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_list_about.html",
    "title": "Track list and Track headers | Cacher Game",
    "summary": "Track list and Track headers Use the Track list to add, select, duplicate, delete, lock, mute, and reorder the tracks that comprise a Timeline Asset. You can also organize tracks into Track groups. Track list and Track headers for the Timeline instance named GroundETL Each track has two areas: Track list: Shows a Track header for each track. Clips view: Shows the clips for each track. The Track header contains the name of the track or its binding information. Track bindings are saved to the Playable Director component associated with the GameObject that is linked to the Timeline Asset. This association is referred to as a Timeline instance (see Timeline overview). Each Track header has a colored accent that identifies the track type and its clips: Activation tracks are green. Use Activation tracks to add Activation clips which set when the bound GameObject is active (shown). The GameObject is bound to the Activation track. Animation tracks are blue. Use Animation tracks to add Animation clips that animate the bound GameObject. Use an Animation track and its Animation clips to record basic animation or animate a humanoid. Audio tracks are orange. Use Audio tracks to add Audio clips for playing background music or sound effects. Each Audio clip is bound to an audio waveform. The audio source, that plays each waveform, is bound to the Audio track. Control tracks are turquoise. Use Control tracks to add Control clips which are special clips that control a nested Timeline instance, Particle System, Prefab instance, or ITimeControl Script. How the Control clip is created determines what it controls. Playable tracks are white. Use Playable tracks to add Playable clips. Each Playable clip is bound to a script that uses the Playables API to create custom animation tools, effects or gameplay mechanisms. Each Track header is also identified by an icon. If a track has a binding error or if the bound GameObject is disabled, the icon representing a track changes to an alert icon. For example, if an Animation track is bound to a GameObject that is disabled at the location of the Playhead, the icon switches to an alert icon. An alert icon indicates that the RedCube bound GameObject is disabled at the start of the Timeline instance"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_lock.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_lock.html",
    "title": "Locking tracks | Cacher Game",
    "summary": "Locking tracks Lock a track to prevent editing of the track and any of the clips used by the track. Use lock when you have finished animating a track and you want to avoid inadvertently modifying the track. You cannot edit or delete a locked track, or select its clips. The Lock icon identifies a locked track. Selected and locked track with Lock icon (red circle) To lock a track, right-click on the track and select Lock from the context menu. You can also select a track and press L. You can select and lock multiple tracks at a time. A track can be both locked and muted. To unlock a track, click the Lock icon. You can also select a locked track and press L, or right-click and select Unlock."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_mute.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_mute.html",
    "title": "Muting tracks | Cacher Game",
    "summary": "Muting tracks Mute a track to disable its clips and their effect on the Scene. You can also use mute when your Timeline instance includes many tracks with animations and you want to focus on the animation of one or a few tracks. The Mute icon identifies a muted track. Selected and muted track with Mute icon (red circle) To mute a track, right-click on the track and select Mute from the context menu. You can also select a track and press M. You can select and mute multiple tracks at a time. A track can be both muted and locked. To unmute a track, click the Mute icon. You can also select a muted track and press M, or right-click and select Unmute. Note: Muted tracks can be deleted."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_reorder.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_reorder.html",
    "title": "Reordering tracks and rendering priority | Cacher Game",
    "summary": "Reordering tracks and rendering priority In the Timeline window, the rendering and animation priority is from the last track to the first track, where the last track takes priority. You can reorder tracks to change their rendering or animation priority. For example, a Timeline instance has four Animation tracks, where the second and fourth Animation tracks animate the same GameObject. The fourth track overrides the animation on any of the preceding tracks. This animation priority is the reason why Animation Override tracks are added as child tracks, under Animation tracks. The second track (red arrow) and fourth track (selected, green arrow) animate the same GameObject (GreenCube). The fourth track has priority and overrides the second track.) To reorder tracks, select one or more tracks and drag until a white insert line appears between tracks in the Track list. The white insert line indicates the destination of the tracks you are dragging. The last selected track type displays beside the cursor. Release the mouse button to reorder tracks. For example, the white insert line indicates that the Control track (Storm) will be placed between the first track (Ground) and second track (Audio Src) An Animation Override track is bound to the same GameObject as its parent Animation track. Reordering an Animation Override track converts it to an Animation track and resets its binding to none."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_select.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_select.html",
    "title": "Selecting tracks | Cacher Game",
    "summary": "Selecting tracks To select a single track, click its Track header in the Track list. You can also click an empty area in the Clips view. When you select a track, Timeline highlights its Track header and Clips view. Selecting a track deselects all other tracks or clips. Selecting a track shows its properties in the Inspector window. The track properties change depending on the type of track and how many tracks you select. See Timeline Inspector for details. To select contiguous tracks, select the first track and then hold Shift and click the last track in the series. For example, to select three contiguous tracks, click the first track, then hold Shift and click the third track. All three tracks are selected. Click to select the first track Hold Shift and click to select contiguous tracks Hold Command/Control and click to select discontiguous tracks. Hold Command/Control and click to deselect a selected track. There are many other ways to select tracks: Hold down Shift and press the Up arrow or Down arrow keys to add and remove tracks from the selection. To deselect all tracks or clips, click on an empty area in the Track list. When a clip is selected on a track, press Tab to select the track. Use the arrow keys to change the selected track. The Up and Down arrow keys select the previous or next track. The Right arrow key selects the first clip on the track. If a Track group is already selected, the Left arrow and Right arrow keys collapse and expand the Track group."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/uss_styles.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/uss_styles.html",
    "title": "Defining custom USS styles | Cacher Game",
    "summary": "Defining custom USS styles The first step to define a USS style is to create a new stylesheet. Stylesheets can be used to extend the Editor’s visual appearance. This can be done by adding a file named common.uss in an Editor folder in a StyleSheets/Extensions folder hierarchy. For example, the following locations are valid: Assets/Editor/Stylesheets/Extensions/common.uss Assets/Editor/MyFolder/Stylesheets/Extensions/common.uss Assets/Editor/MyFolder1/MyFolder2/Stylesheets/Extensions/common.uss USS files (for Unity Style Sheet) use a CSS-like syntax to describe new styles. Here is an example: myStyle { width:18px; height:18px; background-image: resource(\"Assets/Editor/icon.png\"); } In this style, we specified that we wish to use a custom icon along with size properties. USS styles also support pseudo-states, which works like pseudo-classes in CSS. Timeline markers support the following pseudo-states: Collapsed: .myStyle Normal: .myStyle:checked Selected: .myStyle:hover:focus:checked USS stylesheets also support Unity's light and dark themes. Styles in files named dark.uss and light.uss will be used as an override of the style in common.uss. For example: common.uss myStyle { width:18px; height:18px; color: rgb(125, 125, 125); } dark.uss myStyle { color: rgb(0, 0, 0); background-image: resource(\"icon_dark.png\"); } light.uss myStyle { color: rgb(255, 255, 255); background-image: resource(\"icon_light.png\"); } In the dark theme, myStyle will be resolved to: myStyle { width:18px; height:18px; color: rgb(0, 0, 0); background-image: resource(\"icon_dark.png\"); } and in the light theme: myStyle { width:18px; height:18px; color: rgb(255, 255, 255); background-image: resource(\"icon_light.png\"); }"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_about.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_about.html",
    "title": "Using the Timeline window | Cacher Game",
    "summary": "Using the Timeline window Use the Timeline window to create Timeline Assets and Timeline instances, record animation, schedule animation, and create cinematic content. This section shows you how to do the following tasks: Create a Timeline Asset and Timeline instance Record basic animation with an Infinite clip Convert an Infinite clip to an Animation clip Animate a humanoid Use Animation Override tracks and Avatar Masking Nest Timeline Instances"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_char_anim.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_char_anim.html",
    "title": "Animating a humanoid | Cacher Game",
    "summary": "Animating a humanoid This task demonstrates how to use a Timeline instance to animate a humanoid with external motion clips. This workflow also demonstrates how to match clip offsets, manually adjust clip offsets, and create blends between clips to minimize jumping and sliding. Although this workflow uses a humanoid, you can use this animation method for any GameObject. This workflow assumes that you have already created a Timeline instance with an empty Animation track bound to a humanoid. For example, the DefaultMale humanoid is bound to an empty Animation track: DefaultMale humanoid bound to an empty Animation track. From your Project, drag a motion clip into the Animation track to create a new Animation clip. For example, drag an idle pose as the first clip to start the humanoid from an idle stance. To position, resize, or trim your Animation clip in the Clips view, select Mix mode as the Clip Edit mode. There are three different Clip Edit modes that change the editing behaviour of the Timeline window. When the Timeline window is in Mix mode, you can drag and trim clips to create blends. Animation track, bound to the DefaultMale humanoid, with an idle pose (Idle) as its Animation clip. The Mix mode (red circle) is the selected Clip Edit mode. Add a second Animation clip. This example adds a run and turn left clip (named Run_Left) to the Animation track, and then resizes the clip to include one loop, so the DefaultMale runs and turns 180 degrees. Animation track with an Idle clip and a Run_Left clip Play the Timeline instance. In this example, the DefaultMale humanoid jumps between each Animation clip because the position of the humanoid at the end of the first Animation clip (Idle) does not match the position of the humanoid at the start of the next Animation clip (RunLeft). The humanoid jumps between the first Animation clip, which ends at frame 29 (red arrow and box), and the second Animation clip, which starts at frame 30 (ghost with green arrow and box) Matching clips To fix the animation jump between clips, match the offset of each Animation clip. The Timeline window provides different methods for matching offsets. In this example, Timeline matches the second Animation clip with the previous clip. To do this, select the Run_Left clip, right-click and select Match Offsets to Previous Clip. Right-click and select Match Offsets to Previous Clip to match the offsets of the selected Animation clip with the preceding Animation clip After matching offsets, the position and rotation of the humanoid at the start of the second Animation clip (frame 30, ghost with green arrow) matches the position and rotation of the humanoid at the end of the first Animation clip (frame 29, red arrow) Play the Timeline instance again. Although the position and rotation of the humanoid matches, there is still a jump between the two Animation clips because the humanoid is in different poses. At the end of the first Animation clip, the humanoid is standing upright with its feet together. At the start of the second Animation clip, the humanoid is bent forward with its feet apart. Blending clips Create a blend to remove the jump and transition between the two poses. Adjust the size of the clips, the Blend Area, the Clip In, and the shape of each Blend Curve to create a transition between the two poses. For example, in the transition between the Idle clip and the Run_Left clip, the Idle clip was resized to 36 frames and the Run_Left clip was repositioned to start at frame 25. The rest of the clip properties are unchanged from their default values. With Mix mode selected, you can create a blend (red circle) between two clips to create a smooth transition between two animations. As the Idle clip transitions to the Run_Left clip, the blend removes the obvious jump between poses. The transition between most body parts appears natural, however in this example, the blend between the different positions of the foot results in an unnatural foot slide. Reducing foot slide To reduce foot sliding, manually adjust the offset of an Animation clip so that the position of the foot changes less drastically. To manually adjust the offset, select the Animation clip in the Timeline window. In the Inspector window, expand Animation Playable Asset. Select an Animation clip. In the Inspector window, expand Animation Playable Asset (red) to view the Clip Transform Offsets. The rotation and position Clip Transform Offsets are not zero because performing Match Offsets to Previous Clip already set these values to match the root (hips) of the humanoid at the end of the previous Animation clip. Under Clip Transform Offsets, enable the Move tool. The Move Gizmo appears in the Scene view, at the root of the Animation clip. Enable the Move tool (Inspector window, red arrow) to show the Move Gizmo (green arrow) in the Scene view Use one of the following methods to manually adjust the offset position of the Animation clip: In the Scene view, drag the Move Gizmo. In the Inspector window, under Clip Transform Offsets, change the value of the appropriate Position property."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_conv_infinite.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_conv_infinite.html",
    "title": "Converting an Infinite clip to an Animation clip | Cacher Game",
    "summary": "Converting an Infinite clip to an Animation clip An Infinite clip appears as a dope sheet. An Infinite clip cannot be positioned, trimmed, or split because it does not have a defined duration. To position, trim, split, or perform other clip manipulations on an Infinite clip, you must first convert it to an Animation clip. You cannot convert an Animation clip back to an Infinite clip. To convert an Infinite clip to an Animation clip, click the Track menu icon and select Convert to Clip Track: The Track menu (circled) converts an Infinite clip to an Animation clip. You can also right-click the track and select Convert to Clip Track from the context menu. The Track menu and context menu are the same. An infinite clip after it has been converted to an Animation clip"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_instance.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_instance.html",
    "title": "Creating a Timeline Asset and Timeline instance | Cacher Game",
    "summary": "Creating a Timeline Asset and Timeline instance To use a Timeline Asset in your Scene, associate the Timeline Asset with a GameObject using a Playable Director component. Associating a Timeline Asset with a Playable Director component creates a Timeline instance and allows you to specify which objects in the Scene are animated by the Timeline Asset. To animate a GameObject, it must also have an Animator component. The Timeline window automatically creates a Timeline instance while creating a new Timeline Asset. The Timeline window also creates the necessary components. To create a new Timeline Asset and Timeline instance, follow these steps: In your Scene, select the GameObject that you want to use as the focus of your cinematic or other gameplay-based sequence. Open the Timeline window (menu: Window > Sequencing > Timeline). If the GameObject does not yet have a Playable Director component attached to a Timeline Asset, a message in the Timeline window prompts you to click the Create button. Click Create. A dialog box prompts you for the name and location of the Timeline Asset you are creating. You can also specify tags to identify the Timeline Asset. Click Save. The Timeline window does the following: Saves a new Timeline Asset to the Assets directory of your Project. If you did not change the name and location of the Timeline Asset you are creating, the Timeline window creates a name based on the selected GameObject with the \"Timeline\" suffix. For example, selecting the GameObject called \"Enemy\" names the Asset \"EnemyTimeline\". Adds an empty Animation track to the Timeline Asset. Adds a Playable Director component to the selected GameObject, and sets the Playable property to the Timeline Asset. This creates a Timeline instance. Sets the binding on the Animation track in the Playable Director component to the selected GameObject. The Animation track does not have any clips, so the selected GameObject is not animated. Adds an Animator component to the selected GameObject. The Animator component animates the GameObject through the Timeline instance. The GameObject cannot be animated without an Animator component."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_mask.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_mask.html",
    "title": "Using an Animation Override track and an Avatar Mask | Cacher Game",
    "summary": "Using an Animation Override track and an Avatar Mask This task demonstrates how to use an Animation Override track and an Avatar Mask to replace the upper-body animation of an Animation track. Use this technique to animate a humanoid to, for example, run and carry an object. For information on creating an Avatar mask, see Avatar Mask window. This task assumes that you have already created a Timeline instance with a simple Animation clip on an Animation track bound to a humanoid: This example uses a humanoid bound to a simple run cycle animation (RunForward) that loops once Right-click the Animation track and select Add Override Track from the context menu. An Animation Override track, named Override 0, is linked to the selected Animation track. Notice that the Animation Override track is not bound to a GameObject. Because the Override track is linked to the Animation track above, the Override track is bound to the same GameObject, in this case, the DefaultMale humanoid. To add an Override track, right-click the Animation track and select Add Override Track from the context menu] From your Project, drag an Animation Clip with upper-body animation into the Override track. For example, drag an animation of a humanoid standing still and waving their arms. Position and resize the clip to match the Animation clip that you want to override. The Animation Override track contains an Animation clip of a humanoid standing still, waving their arms (WavingArms). This clip was resized to match the Animation clip (RunForward) of the parent Animation track. Play the Timeline instance. In this example, the WavingArms clip completely overrides the RunForward clip. To combine the lower-body animation from one Animation clip with upper-body animation from another Animation clip, specify an Avatar Mask for the Animation Override track. To specify an Avatar Mask, select the Override track to view its properties in the Inspector window From the Project, drag an Avatar Mask, that masks the lower body animation, into the Avatar Mask property in the Inspector window. Enable the Apply Avatar Mask checkbox. An Avatar Mask icon appears beside the track name. An Avatar Mask, that masks the lower body animation, is specified for the Animation Overview clip in the Inspector window. This allows the upper body animation to pass through. The Avatar Mask icon (red) indicates that the Animation Override track uses an Avatar Mask. Play the Timeline instance. In this example, the DefaultMale humanoid uses upper-body animation from the WavingArms clip and lower-body animation from the RunForward clip. To temporarily disable the Avatar Mask, click the Avatar Mask icon. The Avatar Mask icon (red) is gray when disabled. The WavingArms clip completely overrides the RunForward clip."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_nested.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_nested.html",
    "title": "Nesting Timeline instances | Cacher Game",
    "summary": "Nesting Timeline instances Timeline supports nesting Timeline instances. A nested Timeline instance refers to a Timeline instance that is added within another Timeline instance. The master Timeline instance refers to the main or parent Timeline instance that includes other Timeline instances. Nesting Timeline instances is useful if you have a large team working on different aspects of a Project and you want them to collaborate on the same cinematic or cut-scene. For example, you are developing a puzzle game that starts with a cinematic of the character walking into frame while the pieces on the game board move into position. You could create a master Timeline instance for the character walking into frame. You could create another Timeline instance for the game board animation. You could then nest the game board animation into the master Timeline instance of the character walking into frame. The master NestTL Timeline instance has a character walking and theme music. A Control track nests the BoardTL Timeline instance for the game board animation. By creating a master Timeline instance with nested Timeline instances, different teams can work on different animations and then combine the animations into one master Timeline. In the puzzle game example, one team could work on the character Timeline instance, and another team could work on the game board animation. When you have two Timeline instances, and you want to nest one instance into the other, open the Timeline instance that you want to be the master Timeline instance. To ensure that the Timeline window does not switch while you select GameObjects, click the lock icon (red arrow): The master NestTL Timeline instance has a character walking and theme music. Find the GameObject in your Scene that is associated with the Timeline instance that you want to nest inside the master Timeline instance. Drag the GameObject into the Clips view of the Timeline window. The Board GameObject is associated with the BoardTL Timeline instance. Drag the Board GameObject into the NestTL master Timeline to nest the BoardTL Timeline instance in the NestTL Timeline instance. The Timeline window creates a Control track and places the Control clip where you drop the GameObject. The Control clip is set to the same size as the Timeline instance. When a Control clip contains a nested Timeline instance, a downward arrow appears beside its name. To edit a nested Timeline instance from the master timeline, double-click its Control clip. Double-click the Control clip to edit the nested BoardTL Timeline instance from within the master A warning icon appears beside the name of the nested Timeline instance because the Timeline Playhead is outside the range of the nested Timeline. Timeline also disables the Timeline Playhead controls. When you edit a nested Timeline instance, you cannot change the duration of the nested Timeline instance. You must return to the master Timeline instance and change the duration of the Control clip to change the duration of the nested Timeline instance. To return to the master, click the name of the master Timeline instance (red arrow): Warning icon (red circle) means the Timeline Playhead Controls are disabled. The Timeline window is in this state because, by default, the size of the Control clip in the master Timeline instance determines when the nested Timeline instance is active. Use one of the following methods to change this state and edit the nested Timeline instance: Click the Timeline ruler to move the Timeline Playhead into the nested Timeline. This enables editing and the Timeline Playback Controls. In the master Timeline instance, move the Timeline Playhead to within the Control clip before you double-click the Control clip. In the master Timeline instance, select the Control clip, and disable the Control Activation property in the Inspector window. Disable the Control Activation property (red outline) to have the nested Timeline instance active throughout the duration of the master Timeline instance."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_rec_anim.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_rec_anim.html",
    "title": "Recording basic animation with an Infinite clip | Cacher Game",
    "summary": "Recording basic animation with an Infinite clip You can record animation directly to an Animation track. When you record directly to an empty Animation track, you create an Infinite clip. An Infinite clip is a clip that contains basic key animation recorded through the Timeline window. An Infinite clip cannot be positioned, trimmed, or split because it does not have a defined size: it spans the entirety of an Animation track. Before creating an Infinite clip, you must add an empty Animation track for the GameObject that you want to animate. In the Track list, click the red circular Record button for the empty Animation track to enable Record mode. Click the Record button on an empty track to enable Record mode When a track is in Record mode, the clip area of the track is drawn in red with the \"Recording...\" message, and the Record button blinks on and off. Timeline window in Record mode When in Record mode, any modification to an animatable property of the GameObject sets a key at the location of the Timeline Playhead. To start creating an animation, move the Timeline Playhead to the location of the first key, and do one of the following: In the Inspector window, right-click the name of the property and choose Add Key. This adds an animation key for the property without changing its value. A diamond appears in the Infinite clip to show the position of the key. In the Inspector window, change the value of the animatable property of the GameObject. This adds an animation key for the property with its changed value. A diamond appears in the Infinite clip. In the Scene view, either move, rotate, or scale the GameObject. This automatically adds a key for the properties you change. A diamond appears in the Infinite clip. Red background indicates that you’ve added an animation curve for the property to the clip Setting a key adds a diamond to the Infinite clip Move the playhead to a different position on the Timeline and change the animatable properties of the GameObject. At each position, the Timeline window adds a diamond to the Infinite clip for any changed properties and adds a key to its associated animation curves. While in Record mode, you can right-click the name of an animatable property name to perform keying operations such as setting a key without changing its value, jumping to the next or previous keys, and removing keys. For example, to set a key for the position of a GameObject without changing its value, right-click Position and select Add Key from the context menu. Right-click the name of an animatable property to perform keying operations When you finish the animation, click the blinking Record button to disable Record mode. An Infinite clip appears as a dope sheet in the Timeline window, but you cannot edit the keys in this view. Use the Curves view to edit keys. You can also double-click the Infinite clip and edit the keys with the Animation window. An Infinite clip appears as a dope sheet Save the Scene or Project to save the Timeline Asset and the Infinite clip. The Timeline window saves the key animation from the Infinite clip as a source asset. The source asset is named \"Recorded\" and saved as a child of the Timeline Asset in the Project. Recorded clips are saved under the Timeline Asset in the Project For every additional recorded Infinite clip, the Timeline window numbers each clip sequentially, starting at \"(1)\". For example, a Timeline Asset with three recorded Infinite clips are named \"Recorded\", \"Recorded (1)\", and \"Recorded (2)\". If you delete a Timeline Asset, its recorded clips are also removed."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/LICENSE.html",
    "title": "| Cacher Game",
    "summary": "Timeline copyright © 2022 Unity Technologies Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/README.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/README.html",
    "title": "About Timeline | Cacher Game",
    "summary": "About Timeline Use Unity’s Timeline to create cinematic content, game-play sequences, audio sequences, and complex particle effects. Installing Timeline To install this package, follow the instructions in the Package Manager documentation. Using Timeline The Timeline Manual can be found here Technical details Requirements This version of Timeline is compatible with the following versions of the Unity Editor: 2019.3 and later (recommended)"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/CHANGELOG.html",
    "title": "Changelog | Cacher Game",
    "summary": "Changelog [1.0.0] - 2019-01-08 This is the first release of Unity UI as a built in package."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/EventSystem.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/EventSystem.html",
    "title": "Event System | Cacher Game",
    "summary": "Event System The Event System is a way of sending events to objects in the application based on input, be it keyboard, mouse, touch, or custom input. The Event System consists of a few components that work together to send events. When you add an Event System component to a GameObject you will notice that it does not have much functionality exposed, this is because the Event System itself is designed as a manager and facilitator of communication between Event System modules. The primary roles of the Event System are as follows: Manage which GameObject is considered selected Manage which Input Module is in use Manage Raycasting (if required) Updating all Input Modules as required Input Modules An Input Module is where the main logic of how you want the Event System to behave lives, they are used for: Handling Input Managing event state Sending events to scene objects. Only one Input Module can be active in the Event System at a time, and they must be components on the same GameObject as the Event System component. If you want to write a custom Input Module, send events supported by existing UI components in Unity. To extend and write your own events, see the Messaging System documentation. Raycasters Raycasters are used for figuring out what the pointer is over. It is common for Input Modules to use the Raycasters configured in the Scene to calculate what the pointing device is over. There are 3 provided Raycasters that exist by default: Graphic Raycaster - Used for UI elements Physics 2D Raycaster - Used for 2D physics elements Physics Raycaster - Used for 3D physics elements If you have a 2d / 3d Raycaster configured in your Scene, it is easy to make non-UI elements receive messages from the Input Module. Simply attach a script that implements one of the event interfaces. For examples of this, see the IPointerEnterHandler and IPointerClickHandler Scripting Reference pages."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/EventSystemReference.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/EventSystemReference.html",
    "title": "Event System Reference | Cacher Game",
    "summary": "Event System Reference This section provides details about the following parts of the event system: Event System Manager Graphic Raycaster Physics Raycaster Physics2D Raycaster Standalone Input Module Touch Input Module Event Trigger"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UICreateFromScripting.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UICreateFromScripting.html",
    "title": "Creating UI elements from scripting | Cacher Game",
    "summary": "Creating UI elements from scripting If you are creating a dynamic UI where UI elements appear, disappear, or change based on user actions or other actions in the game, you may need to make a script that instantiates new UI elements based on custom logic. Creating a prefab of the UI element In order to be able to easily instantiate UI elements dynamically, the first step is to create a prefab for the type of UI element that you want to be able to instantiate. Set up the UI element the way you want it to look in the Scene, and then drag the element into the Project View to make it into a prefab. For example, a prefab for a button could be a Game Object with a Image component and a Button component, and a child Game Object with a Text component. Your setup might be different depending on your needs. You might wonder why we don't have a API methods to create the various types of controls, including visuals and everything. The reason is that there are an infinite number of way e.g. a button could be setup. Does it use an image, text, or both? Maybe even multiple images? What is the text font, color, font size, and alignment? What sprite or sprites should the image use? By letting you make a prefab and instantiate that, you can set it up exactly the way you want. And if you later want to change the look and feel of your UI you can just change the prefab and then it will be reflected in your UI, including the dynamically created UI. Instantiating the UI element Prefabs of UI elements are instantiated as normal using the Instantiate method. When setting the parent of the instantiated UI element, it's recommended to do it using the Transform.SetParent method with the worldPositionStays parameter set to false. Positioning the UI element A UI Element is normally positioned using its Rect Transform. If the UI Element is a child of a Layout Group it will be automatically positioned and the positioning step can be skipped. When positioning a Rect Transform it's useful to first determine it has or should have any stretching behavior or not. Stretching behavior happens when the anchorMin and anchorMax properties are not identical. For a non-stretching Rect Transform, the position is set most easily by setting the anchoredPosition and the sizeDelta properties. The anchoredPosition specifies the position of the pivot relative to the anchors. The sizeDelta is just the same as the size when there's no stretching. For a stretching Rect Transform, it can be simpler to set the position using the offsetMin and offsetMax properties. The offsetMin property specifies the corner of the lower left corner of the rect relative to the lower left anchor. The offsetMax property specifies the corner of the upper right corner of the rect relative to the upper right anchor. Customizing the UI Element If you are instantiating multiple UI elements dynamically, it's unlikely that you'll want them all to look the same and do the same. Whether it's buttons in a menu, items in an inventory, or something else, you'll likely want the individual items to have different text or images and to do different things when interacted with. This is done by getting the various components and changing their properties. See the scripting reference for the Image and Text components, and for how to work with UnityEvents from scripting."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIFitContentSize.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIFitContentSize.html",
    "title": "Making UI elements fit the size of their content | Cacher Game",
    "summary": "Making UI elements fit the size of their content Normally when positioning a UI element with its Rect Transform, its position and size is specified manually (optionally including behavior to stretch with the parent Rect Transform). However, sometimes you may want the rectangle to be automatically sized to fit the content of the UI element. This can be done by adding a component called Content Size Fitter. Fit to size of Text In order to make a Rect Transform with a Text component on it fit the text content, add a Content Size Fitter component to the same Game Object which has the Text component. Then set both the Horizontal Fit and Vertical Fit dropdowns to the Preferred setting. How does it work? What happens here is that the Text component functions as a Layout Element that can provide information about how big its minimum and preferred size is. In a manual layout this information is not used. A Content Size Fitter is a type of Layout Controller, which listens to layout information provided by Layout Elements and control the size of the Rect Transform according to this. Remember the pivot When UI elements are automatically resized to fit their content, you should pay extra attention to the pivot of the Rect Transform. The pivot will stay in place when the element is resized, so by setting the pivot position you can control in which direction the element will expand or shrink. For example, if the pivot is in the center, then the element will expand equally in all directions, and if the pivot is in the upper left corner, then the element will expand to the right and down. Fit to size of UI element with child Text If you have a UI element, such as a Button, that has a background image and a child Game Object with a Text component on it, you probably want the whole UI element to fit the size of the text - maybe with some padding. In order to do this, first add a Horizontal Layout Group to the UI element, then add a Content Size Fitter too. Set the Horizontal Fit, the Vertical Fit, or both to the Preferred setting. You can add and tweak padding using the padding property in the Horizontal Layout Group. Why use a Horizontal Layout Group? Well, it could have been a Vertical Layout Group as well - as long as there is only a single child, they produce the same result. How does it work? The Horizontal (or Vertical) Layout Group functions both as a Layout Controller and as a Layout Element. First it listens to the layout information provided by the children in the group - in this case the child Text. Then it determines how large the group must be (at minimum, and preferably) in order to be able to contain all the children, and it functions as a Layout Element that provides this information about its minimum and preferred size. The Content Size Fitter listens to layout information provided by any Layout Element on the same Game Object - in this case provided by the Horizontal (or Vertical) Layout Group. Depending on its settings, it then controls the size of the Rect Transform based on this information. Once the size of the Rect Transform has been set, the Horizontal (or Vertical) Layout Group makes sure to position and size its children according to the available space. See the page about the Horizontal Layout Group for more information about how it controls the positions and sizes of its children. Make children of a Layout Group fit their respective sizes If you have a Layout Group (horizontal or vertical) and want each of the UI elements in the group to fit their respective content, what do you do? You can't put a Content Size Fitter on each child. The reason is that the Content Size Fitter wants control over its own Rect Transform, but the parent Layout Group also wants control over the child Rect Transform. This creates a conflict and the result is undefined behavior. However, it isn't necessary either. The parent Layout Group can already make each child fit the size of the content. What you need to do is to disable the Child Force Expand toggles on the Layout Group. If the children are themselves Layout Groups too, you may need to disable the Child Force Expand toggles on those too. Once the children no longer expand with flexible width, their alignment can be specified in the Layout Group using the Child Alignment setting. What if you want some of the children to expand to fill additional available space, but not the other children? You can easily control this by adding a Layout Element component to the children you want to expand and enabling the Flexible Width or Flexible Height properties on those Layout Elements. The parent Layout Group should still have the Child Force Expand toggles disabled, otherwise all the children will expand flexibly. How does it work? A Game Object can have multiple components that each provide layout information about minimum, preferred and flexible sizes. A priority system determines which values take effect over others. The Layout Element component has a higher priority than the Text, Image, and Layout Group components, so it can be used to override any layout information values they provide. When the Layout Group listens to the layout information provided by the children, it will take the overridden flexible sizes into account. Then, when controlling the sizes of the children, it will not make them any bigger than their preferred sizes. However, if the Layout Group has the Child Force Expand option enabled, it will always make the flexible sizes of all the children be at least 1. More information This page has explained solutions to a few common use cases. For a more in depth explanation of the auto layout system, see the UI Auto Layout page."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIMultiResolution.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIMultiResolution.html",
    "title": "Designing UI for Multiple Resolutions | Cacher Game",
    "summary": "Designing UI for Multiple Resolutions Modern games and applications often need to support a wide variety of different screen resolutions and particularly UI layouts need to be able to adapt to that. The UI System in Unity includes a variety of tools for this purpose that can be combined in various ways. In this how-to we're going to use a simple case study and look at and compare the different tools in the context of that. In our case study we have three buttons in the corners of the screen as shown below, and the goal is to adapt this layout to various resolutions. For this how-to we're going to consider four screen resolutions: Phone HD in portrait (640 x 960) and landscape (960 x 640) and Phone SD in portrait (320 x 480) and landscape (480 x 320). The layout is initially setup in the Phone HD Portrait resolution. Using anchors to adapt to different aspect ratios UI elements are by default anchored to the center of the parent rectangle. This means that they keep a constant offset from the center. If the resolution is changed to a landscape aspect ratio with this setup, the buttons may not even be inside the rectangle of the screen anymore. One way to keep the buttons inside the screen is to change the layout such that the locations of the buttons are tied to their respective corners of the screen. The anchors of the top left button can be set to the upper left corner using the Anchors Preset drop down in the Inspector, or by dragging the triangular anchor handles in the Scene View. It's best to do this while the current screen resolution set in the Game View is the one the layout is initially designed for, where the button placement looks correct. (See the UI Basic Layout page for more information on anchors.) Similarly, the anchors for the lower left and lower right buttons can be set to the lower left corner and lower right corner, respectively. Once the buttons have been anchored to their respective corners, they stick to them when changing the resolution to a different aspect ratio. When the screen size is changed to a larger or smaller resolution, the buttons will also remain anchored to their respective corners. However, since they keep their original size as specified in pixels, they may take up a larger or smaller proportion of the screen. This may or may not be desirable, depending on how you would like your layout to behave on screens of different resolutions. In this how-to, we know that the smaller resolutions of Phone SD Portrait and Landscape don't correspond to screens that are physically smaller, but rather just screens with a lower pixel density. On these lower-density screens the buttons shouldn't appear larger than on the high-density screens - they should instead appear with the same size. This means that the buttons should become smaller by the same percentage as the screen is smaller. In other words, the scale of the buttons should follow the screen size. This is where the Canvas Scaler component can help. Scaling with Screen Size The Canvas Scaler component can be added to a root Canvas - a Game Object with a Canvas component on it, which all the UI elements are children of. It is also added by default when creating a new Canvas through the GameObject menu. In the Canvas Scaler component, you can set its UI Scale Mode to Scale With Screen Size. With this scale mode you can specify a resolution to use as reference. If the current screen resolution is smaller or larger than this reference resolution, the scale factor of the Canvas is set accordingly, so all the UI elements are scaled up or down together with the screen resolution. In our case, we set the Canvas Scaler to be the Phone HD portrait resolution of 640 x 960. Now, when setting the screen resolution to the Phone SD portrait resolution of 320 x 480, the entire layout is scaled down so it appears proportionally the same as in full resolution. Everything is scaled down: The button sizes, their distances to the edges of the screen, the button graphics, and the text elements. This means that the layout will appear the same in the Phone SD portrait resolution as in Phone HD portrait; only with a lower pixel density. One thing to be aware of: After adding a Canvas Scaler component, it's important to also check how the layout looks at other aspect ratios. By setting the resolution back to Phone HD landscape, we can see that the buttons now appear bigger than they should (and used to). The reason for the larger buttons in landscape aspect ratio comes down to how the Canvas Scaler setting works. By default it compares the width or the current resolution with the width of the Canvas Scaler and the result is used as the scale factor to scale everything with. Since the current landscape resolution of 960 x 640 has a 1.5 times larger width than the portrait Canvas Scaler of 640 x 960, the layout is scaled up by 1.5. The component has a property called Match which can be 0 (Width), 1 (Height) or a value in between. By default it's set to 0, which compares the current screen width with the Canvas Scaler width as described. If the Match property is set to 0.5 instead, it will compare both the current width to the reference width and the current height to the reference height, and choose a scale factor that's in between the two. Since in this case the landscape resolution is 1.5 times wider but also 1.5 times shorter, those two factor even out and produce a final scale factor of 1, which means the buttons keep their original size. At this point the layout supports all the four screen resolutions using a combination of appropriate anchoring and the Canvas Scaler component on the Canvas. See the Canvas Scaler reference page for more information on different ways to scale UI elements in relation to different screen sizes."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIScreenTransition.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIScreenTransition.html",
    "title": "Creating Screen Transitions | Cacher Game",
    "summary": "Creating Screen Transitions The need to transition between multiple UI screens is fairly common. In this page we will explore a simple way to create and manage those transitions using animation and State Machines to drive and control each screen. Overview The high-level idea is that each of our screens will have an Animator Controller with two states (Open and Closed) and a boolean Parameter (Open). To transition between screens you will only need to close the currently open Screen and open the desired one. To make this process easier we will create a small Class ScreenManager that will keep track and take care of closing any already open Screen for us. The button that triggers the transition will only have to ask the ScreenManager to open the desired screen. Thinking about Navigation If you plan to support controller/keyboard navigation of UI elements, then it's important to have a few things in mind. It's important to avoid having Selectable elements outside the screen since that would enable players to select offscreen elements, we can do that by deactivating any off-screen hierarchy. We also need to make sure when a new screen is shown we set a element from it as selected, otherwise the player would not be able to navigate to the new screen. We will take care of all that in the ScreenManager class below. Setting up the Animator Controller Let's take a look at the most common and minimal setup for the Animation Controller to do a Screen transition. The controller will need a boolean parameter (Open) and two states (Open and Closed), each state should have an animation with only one keyframe, this way we let the State Machine do the transition blending for us. Now we need to create the transition between both states, let's start with the transition from Open to Closed and let's set the condition properly, we want to go from Open to Closed when the parameter Open is set to false. Now we create the transition from Closed to Open and set the condition to go from Closed to Open when the parameter Open is true. Managing the screens With all the above set up, the only thing missing is for us to set the parameter Open to true on the screens Animator we want to transition to and Open to false on the currently open screens Animator. To do that, we will create a small script: using UnityEngine; using UnityEngine.UI; using UnityEngine.EventSystems; using System.Collections; using System.Collections.Generic; public class ScreenManager : MonoBehaviour { //Screen to open automatically at the start of the Scene public Animator initiallyOpen; //Currently Open Screen private Animator m_Open; //Hash of the parameter we use to control the transitions. private int m_OpenParameterId; //The GameObject Selected before we opened the current Screen. //Used when closing a Screen, so we can go back to the button that opened it. private GameObject m_PreviouslySelected; //Animator State and Transition names we need to check against. const string k_OpenTransitionName = \"Open\"; const string k_ClosedStateName = \"Closed\"; public void OnEnable() { //We cache the Hash to the \"Open\" Parameter, so we can feed to Animator.SetBool. m_OpenParameterId = Animator.StringToHash (k_OpenTransitionName); //If set, open the initial Screen now. if (initiallyOpen == null) return; OpenPanel(initiallyOpen); } //Closes the currently open panel and opens the provided one. //It also takes care of handling the navigation, setting the new Selected element. public void OpenPanel (Animator anim) { if (m_Open == anim) return; //Activate the new Screen hierarchy so we can animate it. anim.gameObject.SetActive(true); //Save the currently selected button that was used to open this Screen. (CloseCurrent will modify it) var newPreviouslySelected = EventSystem.current.currentSelectedGameObject; //Move the Screen to front. anim.transform.SetAsLastSibling(); CloseCurrent(); m_PreviouslySelected = newPreviouslySelected; //Set the new Screen as then open one. m_Open = anim; //Start the open animation m_Open.SetBool(m_OpenParameterId, true); //Set an element in the new screen as the new Selected one. GameObject go = FindFirstEnabledSelectable(anim.gameObject); SetSelected(go); } //Finds the first Selectable element in the providade hierarchy. static GameObject FindFirstEnabledSelectable (GameObject gameObject) { GameObject go = null; var selectables = gameObject.GetComponentsInChildren<Selectable> (true); foreach (var selectable in selectables) { if (selectable.IsActive () && selectable.IsInteractable ()) { go = selectable.gameObject; break; } } return go; } //Closes the currently open Screen //It also takes care of navigation. //Reverting selection to the Selectable used before opening the current screen. public void CloseCurrent() { if (m_Open == null) return; //Start the close animation. m_Open.SetBool(m_OpenParameterId, false); //Reverting selection to the Selectable used before opening the current screen. SetSelected(m_PreviouslySelected); //Start Coroutine to disable the hierarchy when closing animation finishes. StartCoroutine(DisablePanelDeleyed(m_Open)); //No screen open. m_Open = null; } //Coroutine that will detect when the Closing animation is finished and it will deactivate the //hierarchy. IEnumerator DisablePanelDeleyed(Animator anim) { bool closedStateReached = false; bool wantToClose = true; while (!closedStateReached && wantToClose) { if (!anim.IsInTransition(0)) closedStateReached = anim.GetCurrentAnimatorStateInfo(0).IsName(k_ClosedStateName); wantToClose = !anim.GetBool(m_OpenParameterId); yield return new WaitForEndOfFrame(); } if (wantToClose) anim.gameObject.SetActive(false); } //Make the provided GameObject selected //When using the mouse/touch we actually want to set it as the previously selected and //set nothing as selected for now. private void SetSelected(GameObject go) { //Select the GameObject. EventSystem.current.SetSelectedGameObject(go); //If we are using the keyboard right now, that's all we need to do. var standaloneInputModule = EventSystem.current.currentInputModule as StandaloneInputModule; if (standaloneInputModule != null) return; //Since we are using a pointer device, we don't want anything selected. //But if the user switches to the keyboard, we want to start the navigation from the provided game object. //So here we set the current Selected to null, so the provided gameObject becomes the Last Selected in the EventSystem. EventSystem.current.SetSelectedGameObject(null); } } Let's hook up this script, we do this by creating a new GameObject, we can rename it \"ScreenManager\" for instance, and add the component above to it. You can assign an initial screen to it, this screen will be open at the start of your scene. Now for the final part, let's make the UI buttons work. Select the button that should trigger the screen transition and add a new action under the On Click () list in the Inspector. Drag the ScreenManager GameObject we just created to the ObjectField, on the dropdown select ScreenManager->OpenPanel (Animator) and drag and drop the panel you want to open when the user clicks the button to the las ObjectField. Notes This technique only requires each screen to have an AnimatorController with an Open parameter and a Closed state to work - it doesn't matter how your screen or State Machine are constructed. This technique also works well with nested screens, meaning you only need one ScreenManager for each nested level. The State Machine we set up above has the default state of Closed, so all of the screens that use this controller start as closed. The ScreenManager provides an initiallyOpen property so you can specify which screen is shown first."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIWorldSpace.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIWorldSpace.html",
    "title": "Creating a World Space UI | Cacher Game",
    "summary": "Creating a World Space UI The UI system makes it easy to create UI that is positioned in the world among other 2D or 3D objects in the Scene. Start by creating a UI element (such as an Image) if you don't already have one in your scene by using GameObject > UI > Image. This will also create a Canvas for you. Set the Canvas to World Space Select your Canvas and change the Render Mode to World Space. Now your Canvas is already positioned in the World and can be seen by all cameras if they are pointed at it, but it is probably huge compared to other objects in your Scene. We'll get back to that. Decide on a resolution First you need to decide what the resolution of the Canvas should be. If it was an image, what should the pixel resolution of the image be? Something like 800x600 might be a good starting point. You enter the resolution in the Width and Height values of the Rect Transform of the Canvas. It's probably a good idea to set the position to 0,0 at the same time. Specify the size of the Canvas in the world Now you should consider how big the Canvas should be in the world. You can use the Scale tool to simply scale it down until it has a size that looks good, or you can decide how big it should be in meters. If you want it to have a specific width in meters, you can can calculate the needed scale by using meter_size / canvas_width. For example, if you want it to be 2 meters wide and the Canvas width is 800, you would have 2 / 800 = 0.0025. You then set the Scale property of the Rect Transform on the Canvas to 0.0025 for both X, Y, and Z in order to ensure that it's uniformly scaled. Another way to think of it is that you are controlling the size of one pixel in the Canvas. If the Canvas is scaled by 0.0025, then that is also the size in the world of each pixel in the Canvas. Position the Canvas Unlike a Canvas set to Screen Space, a World Space Canvas can be freely positioned and rotated in the Scene. You can put a Canvas on any wall, floor, ceiling, or slanted surface (or hanging freely in the air of course). Just use the normal Translate and Rotate tools in the toolbar. Create the UI Now you can begin setting up your UI elements and layouts the same way you would with a Screen Space Canvas."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/InputModules.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/InputModules.html",
    "title": "Input Modules | Cacher Game",
    "summary": "Input Modules An Input Module is where the main logic of an event system can be configured and customized. Out of the box there are two provided Input Modules, one designed for Standalone, and one designed for Touch input. Each module receives and dispatches events as you would expect on the given configuration. Input modules are where the 'business logic' of the Event System take place. When the Event System is enabled it looks at what Input Modules are attached and passes update handling to the specific module. Input modules are designed to be extended or modified based on the input systems that you wish to support. Their purpose is to map hardware specific input (such as touch, joystick, mouse, motion controller) into events that are sent via the messaging system. The built in Input Modules are designed to support common game configurations such as touch input, controller input, keyboard input, and mouse input. They send a variety of events to controls in the application, if you implement the specific interfaces on your MonoBehaviours. All of the UI components implement the interfaces that make sense for the given component."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/MessagingSystem.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/MessagingSystem.html",
    "title": "Messaging System | Cacher Game",
    "summary": "Messaging System The new UI system uses a messaging system designed to replace SendMessage. The system is pure C# and aims to address some of the issues present with SendMessage. The system works using custom interfaces that can be implemented on a MonoBehaviour to indicate that the component is capable of receiving a callback from the messaging system. When the call is made a target GameObject is specified; the call will be issued on all components of the GameObject that implement the specified interface that the call is to be issued against. The messaging system allows for custom user data to be passed, as well as how far through the GameObject hierarchy the event should propagate; that is should it just execute for the specified GameObject, or should it also execute on children and parents. In addition to this the messaging framework provides helper functions to search for and find GameObjects that implement a given messaging interface. The messaging system is generic and designed for use not just by the UI system but also by general game code. It is relatively trivial to add custom messaging events and they will work using the same framework that the UI system uses for all event handling. Defining A Custom Message If you wish to define a custom message it is relatively simple. In the UnityEngine.EventSystems namespace there is a base interface called 'IEventSystemHandler'. Anything that extends from this can be considered as a target for receiving events via the messaging system. public interface ICustomMessageTarget : IEventSystemHandler { // functions that can be called via the messaging system void Message1(); void Message2(); } Once this interface is defined then it can be implemented by a MonoBehaviour. When implemented it defines the functions that will be executed if the given message is issued against this MonoBehaviours GameObject. public class CustomMessageTarget : MonoBehaviour, ICustomMessageTarget { public void Message1() { Debug.Log (\"Message 1 received\"); } public void Message2() { Debug.Log (\"Message 2 received\"); } } Now that a script exists that can receive the message we need to issue the message. Normally this would be in response to some loosely coupled event that occurs. For example, in the UI system we issue events for such things as PointerEnter and PointerExit, as well as a variety of other things that can happen in response to user input into the application. To send a message a static helper class exists to do this. As arguments it requires a target object for the message, some user specific data, and a functor that maps to the specific function in the message interface you wish to target. ExecuteEvents.Execute<ICustomMessageTarget>(target, null, (x,y)=>x.Message1()); This code will execute the function Message1 on any components on the GameObject target that implement the ICustomMessageTarget interface. The scripting documentation for the ExecuteEvents class covers other forms of the Execute functions, such as Executing in children or in parents."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/Raycasters.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/Raycasters.html",
    "title": "Raycasters | Cacher Game",
    "summary": "Raycasters The Event System needs a method for detecting where current input events need to be sent to, and this is provided by the Raycasters. Given a screen space position they will collect all potential targets, figure out if they are under the given position, and then return the object that is closest to the screen. There are a few types of Raycasters that are provided: Graphic Raycaster - Used for UI elements, lives on a Canvas and searches within the canvas Physics 2D Raycaster - Used for 2D physics elements Physics Raycaster - Used for 3D physics elements When a Raycaster is present and enabled in the scene it will be used by the Event System whenever a query is issued from an Input Module. If multiple Raycasters are used then they will all have casting happen against them and the results will be sorted based on distance to the elements."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/StyledText.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/StyledText.html",
    "title": "Rich Text | Cacher Game",
    "summary": "Rich Text The text for UI elements and text meshes can incorporate multiple font styles and sizes. Rich text is supported both for the UI System and the legacy GUI system. The Text, GUIStyle, GUIText and TextMesh classes have a Rich Text setting which instructs Unity to look for markup tags within the text. The Debug.Log function can also use these markup tags to enhance error reports from code. The tags are not displayed but indicate style changes to be applied to the text. Markup format The markup system is inspired by HTML but isn't intended to be strictly compatible with standard HTML. The basic idea is that a section of text can be enclosed inside a pair of matching tags:- We are <b>not</b> amused. As the example shows, the tags are just pieces of text inside the \"angle bracket\" characters, < and >. You place the opening tag at the beginning of the section. The text inside the tag denotes its name (which in this case is just b). You place another tag at the end of the section. This is the closing tag. It has the same name as the opening tag, but the name is prefixed with a slash / character. Every opening tag must have a corresponding closing tag. If you don't close an opening tag, it is rendered as regular text. The tags are not displayed to the user directly but are interpreted as instructions for styling the text they enclose. The b tag used in the example above applies boldface to the word \"not\", so the text appears ons creen as:- We are not amused A marked up section of text (including the tags that enclose it) is referred to as an element. Nested elements It is possible to apply more than one style to a section of text by \"nesting\" one element inside another We are <b><i>definitely not</i></b> amused The <i> tag applies italic style, so this would be presented onscreen as We are definitely not amused Note the ordering of the closing tags, which is in reverse to that of the opening tags. The reason for this is perhaps clearer when you consider that the inner tags need not span the whole text of the outermost element We are <b>absolutely <i>definitely</i> not</b> amused which gives We are absolutely definitely not amused Tag parameters Some tags have a simple all-or-nothing effect on the text but others might allow for variations. For example, the color tag needs to know which color to apply. Information like this is added to tags by the use of parameters:- We are <color=green>green</color> with envy Which produces this result: Note that the ending tag doesn't include the parameter value. Optionally, the value can be surrounded by quotation marks but this isn't required. Tag parameters cannot include blank spaces. For example: We are <color = green>green</color> with envy does not work because of the spaces to either side of the = character. Supported tags The following list describes all the styling tags supported by Unity. Tag Description Example Notes b Renders the text in boldface. We are <b>not</b> amused. i Renders the text in italics. We are <i>usually</i> not amused. size Sets the size of the text according to the parameter value, given in pixels. We are <size=50>largely</size> unaffected. Although this tag is available for Debug.Log, you will find that the line spacing in the window bar and Console looks strange if the size is set too large. color Sets the color of the text according to the parameter value. The color can be specified in the traditional HTML format. #rrggbbaa ...where the letters correspond to pairs of hexadecimal digits denoting the red, green, blue and alpha (transparency) values for the color. For example, cyan at full opacity would be specified by color=#00ffffff... You can specify hexadecimal values in uppercase or lowercase; #FF0000 is equivalent to #ff0000. We are <color=#ff0000ff>colorfully</color> amused Another option is to use the name of the color. This is easier to understand but naturally, the range of colors is limited and full opacity is always assumed. <color=cyan>some text</color> The available color names are given in the table below. material This is only useful for text meshes and renders a section of text with a material specified by the parameter. The value is an index into the text mesh's array of materials as shown by the inspector. We are <material=2>texturally</material> amused quad This is only useful for text meshes and renders an image inline with the text. It takes parameters that specify the material to use for the image, the image height in pixels, and a further four that denote a rectangular area of the image to display. Unlike the other tags, quad does not surround a piece of text and so there is no ending tag - the slash character is placed at the end of the initial tag to indicate that it is \"self-closing\". <quad material=1 size=20 x=0.1 y=0.1 width=0.5 height=0.5> This selects the material at position in the renderer's material array and sets the height of the image to 20 pixels. The rectangular area of image starts at given by the x, y, width and height values, which are all given as a fraction of the unscaled width and height of the texture. Supported colors The following table lists colors for which you can use a name instead of a hexadecimal tag in the <color> rich text tag. Color name Hex value Swatch aqua (same as cyan) #00ffffff black #000000ff blue #0000ffff brown #a52a2aff cyan (same as aqua) #00ffffff darkblue #0000a0ff fuchsia (same as magenta) #ff00ffff green #008000ff grey #808080ff lightblue #add8e6ff lime #00ff00ff magenta (same as fuchsia) #ff00ffff maroon #800000ff navy #000080ff olive #808000ff orange #ffa500ff purple #800080ff red #ff0000ff silver #c0c0c0ff teal #008080ff white #ffffffff yellow #ffff00ff Editor GUI Rich text is disabled by default in the editor GUI system but it can be enabled explicitly using a custom GUIStyle. The richText property should be set to true and the style passed to the GUI function in question: GUIStyle style = new GUIStyle (); style.richText = true; GUILayout.Label(\"<size=30>Some <color=yellow>RICH</color> text</size>\",style);"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/SupportedEvents.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/SupportedEvents.html",
    "title": "Supported Events | Cacher Game",
    "summary": "Supported Events The Event System supports a number of events, and they can be customized further in user custom user written Input Modules. The events that are supported by the Standalone Input Module and Touch Input Module are provided by interface and can be implemented on a MonoBehaviour by implementing the interface. If you have a valid Event System configured the events will be called at the correct time. IPointerEnterHandler - OnPointerEnter - Called when a pointer enters the object IPointerExitHandler - OnPointerExit - Called when a pointer exits the object IPointerDownHandler - OnPointerDown - Called when a pointer is pressed on the object IPointerUpHandler- OnPointerUp - Called when a pointer is released (called on the GameObject that the pointer is clicking) IPointerClickHandler - OnPointerClick - Called when a pointer is pressed and released on the same object IInitializePotentialDragHandler - OnInitializePotentialDrag - Called when a drag target is found, can be used to initialize values IBeginDragHandler - OnBeginDrag - Called on the drag object when dragging is about to begin IDragHandler - OnDrag - Called on the drag object when a drag is happening IEndDragHandler - OnEndDrag - Called on the drag object when a drag finishes IDropHandler - OnDrop - Called on the object where a drag finishes IScrollHandler - OnScroll - Called when a mouse wheel scrolls IUpdateSelectedHandler - OnUpdateSelected - Called on the selected object each tick ISelectHandler - OnSelect - Called when the object becomes the selected object IDeselectHandler - OnDeselect - Called on the selected object becomes deselected IMoveHandler - OnMove - Called when a move event occurs (left, right, up, down) ISubmitHandler - OnSubmit - Called when the submit button is pressed ICancelHandler - OnCancel - Called when the cancel button is pressed"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/TableOfContents.html",
    "title": "| Cacher Game",
    "summary": "Unity UI: Unity User Interface Canvas Basic Layout Visual Components Interaction Components Animation Integration Auto Layout Rich Text Events MessagingSystem InputModules SupportedEvents Raycasters Reference Rect Transform Canvas Components Canvas Canvas Scaler Canvas Group Canvas Renderer Visual UIInteractionComponents Text Image Raw Image Mask RectMask2D UI Effect Components Shadow Outline Position as UV1 Interaction Components Selectable Base Class Transition Options Navigation Options Button Toggle Toggle Group Slider Scrollbar Dropdown Input Field Scroll Rect Auto Layout Layout Element Content Size Fitter Aspect Ratio Fitter Horizontal Layout Group Vertical Layout Group Grid Layout Group Events script-EventSystem script-GraphicRaycaster script-PhysicsRaycaster script-Physics2DRaycaster script-StandaloneInputModule script-TouchInputModule script-EventTrigger UI How Tos Designing UI for Multiple Resolutions Making UI elements fit the size of their content Creating a World Space UI Creating UI elements from scripting Creating Screen Transitions"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIAnimationIntegration.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIAnimationIntegration.html",
    "title": "Animation Integration | Cacher Game",
    "summary": "Animation Integration Animation allows for each transition between control states to be fully animated using Unity's animation system. This is the most powerful of the transition modes due to the number of properties that can be animated simultaneously. To use the Animation transition mode, an Animator Component needs to be attached to the controller element. This can be done automatically by clicking \"Auto Generate Animation\". This also generates an Animator Controller with states already set up, which will need to be saved. The new Animator controller is ready to use straight away. Unlike most Animator Controllers, this controller also stores the animations for the controller's transitions and these can be customised, if desired. For example, if a Button element with an Animator controller attached is selected, the animations for each of the button's states can be edited by opening the Animation window (Window>Animation). There is an Animation Clip pop-up menu to select the desired clip. Choose from \"Normal\", \"Highlighted\", \"Pressed\" and \"Disabled\". The Normal State is set by the values on button element itself and can be left empty. On all other states, the most common configuration is a single keyframe at the start of the timeline. The transition animation between states will be handled by the Animator. As an example, the width of the button in the Highlighted State could be changed by selecting the Highlighted state from the Animation Clip pop up menu and with the playhead at the start of the time line: Select the record Button Change the width of the Button in the inspector Exit the record mode. Change to play mode to see how the button grows when highlighted. Any number of properties can have their parameters set in this one keyframe. Several buttons can share the same behaviour by sharing Animator Controllers. The UI Animation transition mode is not compatible with Unity's legacy animation system. You should only use the Animator Component."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIAutoLayout.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIAutoLayout.html",
    "title": "Auto Layout | Cacher Game",
    "summary": "Auto Layout The Rect Transform layout system is flexible enough to handle a lot of different types of layouts and it also allows placing elements in a complete freeform fashion. However, sometimes something a bit more structured can be needed. The auto layout system provides ways to place elements in nested layout groups such as horizontal groups, vertical groups, or grids. It also allows elements to automatically be sized according to the contained content. For example a button can be dynamically resized to exactly fit its text content plus some padding. The auto layout system is a system built on top of the basic Rect Transform layout system. It can optionally be used on some or all elements. Understanding Layout Elements The auto layout system is based on a concept of layout elements and layout controllers. A layout element is an Game Object with a Rect Transform and optionally other components as well. The layout element has certain knowledge about which size it should have. Layout elements don't directly set their own size, but other components that function as layout controllers can use the information they provide in order to calculate a size to use for them. A layout element has properties that defines its own: Minimum width Minimum height Preferred width Preferred height Flexible width Flexible height Examples of layout controller components that use the information provided by layout elements are Content Size Fitter and the various Layout Group components. The basic principles for how layout elements in a layout group are sized is as follows: First minimum sizes are allocated. If there is sufficient available space, preferred sizes are allocated. If there is additional available space, flexible size is allocated. Any Game Object with a Rect Transform on it can function as a layout element. They will by default have minimum, preferred, and flexible sizes of 0. Certain components will change these layout properties when added to the Game Object. The Image and Text components are two examples of components that provide layout element properties. They change the preferred width and height to match the sprite or text content. Layout Element Component If you want to override the minimum, preferred, or flexible size, you can do that by adding a Layout Element component to the Game Object. The Layout Element component lets you override the values for one or more of the layout properties. Enable the checkbox for a property you want to override and then specify the value you want to override with. See the reference page for Layout Element for more information. Understanding Layout Controllers Layout controllers are components that control the sizes and possibly positions of one or more layout elements, meaning Game Objects with Rect Transforms on. A layout controller may control its own layout element (the same Game Object it is on itself) or it may control child layout elements. A component that functions as a layout controller may also itself function as a layout element at the same time. Content Size Fitter The Content Size Fitter functions as a layout controller that controls the size of its own layout element. The simplest way to see the auto layout system in action is to add a Content Size Fitter component to a Game Object with a Text component. If you set either the Horizontal Fit or Vertical Fit to Preferred, the Rect Transform will adjust its width and/or height to fit the Text content. See the reference page for Content Size Fitter for more information. Aspect Ratio Fitter The Aspect Ratio Fitter functions as a layout controller that controls the size of its own layout element. It can adjust the height to fit the width or vice versa, or it can make the element fit inside its parent or envelope its parent. The Aspect Ratio Fitter does not take layout information into account such as minimum size and preferred size. See the reference page for Aspect Ratio Fitter for more information. Layout Groups A layout group functions as a layout controller that controls the sizes and positions of its child layout elements. For example, a Horizontal Layout Group places its children next to each other, and a Grid Layout Group places its children in a grid. A layout group doesn't control its own size. Instead it functions as a layout element itself which may be controlled by other layout controllers or be set manually. Whatever size a layout group is allocated, it will in most cases try to allocate an appropriate amount of space for each of its child layout elements based on the minimum, preferred, and flexible sizes they reported. Layout groups can also be nested arbitrarily this way. See the reference pages for Horizontal Layout Group, Vertical Layout Group and Grid Layout Group for more information. Driven Rect Transform properties Since a layout controller in the auto layout system can automatically control the sizes and placement of certain UI elements, those sizes and positions should not be manually edited at the same time through the Inspector or Scene View. Such changed values would just get reset by the layout controller on the next layout calculation anyway. The Rect Transform has a concept of driven properties to address this. For example, a Content Size Fitter which has the Horizontal Fit property set to Minimum or Preferred will drive the width of the Rect Transform on the same Game Object. The width will appear as read-only and a small info box at the top of the Rect Transform will inform that one or more properties are driven by Conten Size Fitter. The driven Rect Transforms properties have other reasons beside preventing manual editing. A layout can be changed just by changing the resolution or size of the Game View. This in turn can change the size or placement of layout elements, which changes the values of driven properties. But it wouldn't be desirable that the Scene is marked as having unsaved changes just because the Game View was resized. To prevent this, the values of driven properties are not saved as part of the Scene and changes to them do not mark the scene as changed. Technical Details The auto layout system comes with certain components built-in, but it is also possible to create new components that controls layouts in custom ways. This is done by having a component implement specific interfaces which are recognized by the auto layout system. Layout Interfaces A component is treated as a layout element by the auto layout system if it implements the interface ILayoutElement. A component is expected to drive the Rect Transforms of its children if it implements the interface ILayoutGroup. A component is expected to drive its own RectTransform if it implements the interface ILayoutSelfController. Layout Calculations The auto layout system evaluates and executes layouts in the following order: The minimum, preferred, and flexible widths of layout elements are calculated by calling CalculateLayoutInputHorizontal on ILayoutElement components. This is performed in bottom-up order, where children are calculated before their parents, such that the parents may take the information in their children into account in their own calculations. The effective widths of layout elements are calculated and set by calling SetLayoutHorizontal on ILayoutController components. This is performed in top-down order, where children are calculated after their parents, since allocation of child widths needs to be based on the full width available in the parent. After this step the Rect Transforms of the layout elements have their new widths. The minimum, preferred, and flexible heights of layout elements are calculated by calling CalculateLayoutInputVertical on ILayoutElement components. This is performed in bottom-up order, where children are calculated before their parents, such that the parents may take the information in their children into account in their own calculations. The effective heights of layout elements are calculated and set by calling SetLayoutVertical on ILayoutController components. This is performed in top-down order, where children are calculated after their parents, since allocation of child heights needs to be based on the full height available in the parent. After this step the Rect Transforms of the layout elements have their new heights. As can be seen from the above, the auto layout system evaluates widths first and then evaluates heights afterwards. Thus, calculated heights may depend on widths, but calculated widths can never depend on heights. Triggering Layout Rebuild When a property on a component changes which can cause the current layout to no longer be valid, a layout recalculation is needed. This can be triggered using the call: LayoutRebuilder.MarkLayoutForRebuild (transform as RectTransform); The rebuild will not happen immediately, but at the end of the current frame, just before rendering happens. The reason it is not immediate is that this would cause layouts to be potentially rebuild many times during the same frame, which would be bad for performance. Guidelines for when a rebuild should be triggered: In setters for properties that can change the layout. In these callbacks: OnEnable OnDisable OnRectTransformDimensionsChange OnValidate (only needed in the editor, not at runtime) OnDidApplyAnimationProperties"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIBasicLayout.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIBasicLayout.html",
    "title": "Basic Layout | Cacher Game",
    "summary": "Basic Layout In this section we'll look at how you can position UI elements relative to the Canvas and each other. If you want to test yourself while reading, you can create an Image using the menu GameObject -> UI -> Image. The Rect Tool Every UI element is represented as a rectangle for layout purposes. This rectangle can be manipulated in the Scene View using the Rect Tool in the toolbar. The Rect Tool is used both for Unity's 2D features and for UI, and in fact can be used even for 3D objects as well. The Rect Tool can be used to move, resize and rotate UI elements. Once you have selected a UI element, you can move it by clicking anywhere inside the rectangle and dragging. You can resize it by clicking on the edges or corners and dragging. The element can be rotated by hovering the cursor slightly away from the corners until the mouse cursor looks like a rotation symbol. You can then click and drag in either direction to rotate. Just like the other tools, the Rect Tool uses the current pivot mode and space, set in the toolbar. When working with UI it's usually a good idea to keep those set to Pivot and Local. Rect Transform The Rect Transform is a new transform component that is used for all UI elements instead of the regular Transform component. Rect Transforms have position, rotation, and scale just like regular Transforms, but it also has a width and height, used to specify the dimensions of the rectangle. Resizing Versus Scaling When the Rect Tool is used to change the size of an object, normally for Sprites in the 2D system and for 3D objects it will change the local scale of the object. However, when it's used on an object with a Rect Transform on it, it will instead change the width and the height, keeping the local scale unchanged. This resizing will not affect font sizes, border on sliced images, and so on. Pivot Rotations, size, and scale modifications occur around the pivot so the position of the pivot affects the outcome of a rotation, resizing, or scaling. When the toolbar Pivot button is set to Pivot mode, the pivot of a Rect Transform can be moved in the Scene View. Anchors Rect Transforms include a layout concept called anchors. Anchors are shown as four small triangular handles in the Scene View and anchor information is also shown in the Inspector. If the parent of a Rect Transform is also a Rect Transform, the child Rect Transform can be anchored to the parent Rect Transform in various ways. For example, the child can be anchored to the center of the parent, or to one of the corners. The anchoring also allows the child to stretch together with the width or height of the parent. Each corner of the rectangle has a fixed offset to its corresponding anchor, i.e. the top left corner of the rectangle has a fixed offset to the top left anchor, etc. This way the different corners of the rectangle can be anchored to different points in the parent rectangle. The positions of the anchors are defined in fractions (or percentages) of the parent rectangle width and height. 0.0 (0%) corresponds to the left or bottom side, 0.5 (50%) to the middle, and 1.0 (100%) to the right or top side. But anchors are not limited to the sides and middle; they can be anchored to any point within the parent rectangle. You can drag each of the anchors individually, or if they are together, you can drag them together by clicking in the middle in between them and dragging. If you hold down Shift key while dragging an anchor, the corresponding corner of the rectangle will move together with the anchor. A useful feature of the anchor handles is that they automatically snap to the anchors of sibling rectangles to allow for precise positioning. Anchor presets In the Inspector, the Anchor Preset button can be found in the upper left corner of the Rect Transform component. Clicking the button brings up the Anchor Presets dropdown. From here you can quickly select from some of the most common anchoring options. You can anchor the UI element to the sides or middle of the parent, or stretch together with the parent size. The horizontal and vertical anchoring is independent. The Anchor Presets buttons displays the currently selected preset option if there is one. If the anchors on either the horizontal or vertical axis are set to different positions than any of the presets, the custom options is shown. Anchor and position fields in the Inspector You can click the Anchors expansion arrow to reveal the anchor number fields if they are not already visible. Anchor Min corresponds to the lower left anchor handle in the Scene View, and Anchor Max corresponds to the upper right handle. The position fields of rectangle are shown differently depending on whether the anchors are together (which produces a fixed width and height) or separated (which causes the rectangle to stretch together with the parent rectangle). When all the anchor handles are together the fields displayed are Pos X, Pos Y, Width and Height. The Pos X and Pos Y values indicate the position of the pivot relative to the anchors. When the anchors are separated the fields can change partially or completely to Left, Right, Top and Bottom. These fields define the padding inside the rectangle defined by the anchors. The Left and Right fields are used if the anchors are separated horizontally and the Top and Bottom fields are used if they are separated vertically. Note that changing the values in the anchor or pivot fields will normally counter-adjust the positioning values in order to make the rectangle stay in place. In cases where this is not desired, enable Raw edit mode by clicking the R button in the Inspector. This causes the anchor and pivot value to be able to be changed without any other values changing as a result. This will likely cause the rectangle to be visually moved or resized, since its position and size is dependent on the anchor and pivot values."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UICanvas.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UICanvas.html",
    "title": "Canvas | Cacher Game",
    "summary": "Canvas The Canvas is the area that all UI elements should be inside. The Canvas is a Game Object with a Canvas component on it, and all UI elements must be children of such a Canvas. Creating a new UI element, such as an Image using the menu GameObject > UI > Image, automatically creates a Canvas, if there isn't already a Canvas in the scene. The UI element is created as a child to this Canvas. The Canvas area is shown as a rectangle in the Scene View. This makes it easy to position UI elements without needing to have the Game View visible at all times. Canvas uses the EventSystem object to help the Messaging System. Draw order of elements UI elements in the Canvas are drawn in the same order they appear in the Hierarchy. The first child is drawn first, the second child next, and so on. If two UI elements overlap, the later one will appear on top of the earlier one. To change which element appear on top of other elements, simply reorder the elements in the Hierarchy by dragging them. The order can also be controlled from scripting by using these methods on the Transform component: SetAsFirstSibling, SetAsLastSibling, and SetSiblingIndex. Render Modes The Canvas has a Render Mode setting which can be used to make it render in screen space or world space. Screen Space - Overlay This render mode places UI elements on the screen rendered on top of the scene. If the screen is resized or changes resolution, the Canvas will automatically change size to match this. Screen Space - Camera This is similar to Screen Space - Overlay, but in this render mode the Canvas is placed a given distance in front of a specified Camera. The UI elements are rendered by this camera, which means that the Camera settings affect the appearance of the UI. If the Camera is set to Perspective, the UI elements will be rendered with perspective, and the amount of perspective distortion can be controlled by the Camera Field of View. If the screen is resized, changes resolution, or the camera frustum changes, the Canvas will automatically change size to match as well. World Space In this render mode, the Canvas will behave as any other object in the scene. The size of the Canvas can be set manually using its Rect Transform, and UI elements will render in front of or behind other objects in the scene based on 3D placement. This is useful for UIs that are meant to be a part of the world. This is also known as a \"diegetic interface\"."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIHowTos.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIHowTos.html",
    "title": "UI How Tos | Cacher Game",
    "summary": "UI How Tos In this section you can learn about solutions to common UI tasks."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIInteractionComponents.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIInteractionComponents.html",
    "title": "Interaction Components | Cacher Game",
    "summary": "Interaction Components This section covers components in the UI system that handles interaction, such as mouse or touch events and interaction using a keyboard or controller. The interaction components are not visible on their own, and must be combined with one or more visual components in order to work correctly. Common Functionality Most of the interaction components have some things in common. They are selectables, which means they have shared built-in functionality for visualising transitions between states (normal, highlighted, pressed, disabled), and for navigation to other selectables using keyboard or controller. This shared functionality is described on the Selectable page. The interaction components have at least one UnityEvent that is invoked when user interacts with the component in specific way. The UI system catches and logs any exceptions that propagate out of code attached to UnityEvent. Button A Button has an OnClick UnityEvent to define what it will do when clicked. See the Button page for details on using the Button component. Toggle A Toggle has an Is On checkbox that determines whether the Toggle is currently on or off. This value is flipped when the user clicks the Toggle, and a visual checkmark can be turned on or off accordingly. It also has an OnValueChanged UnityEvent to define what it will do when the value is changed. See the Toggle page for details on using the Toggle component. Toggle Group A Toggle Group can be used to group a set of Toggles that are mutually exclusive. Toggles that belong to the same group are constrained so that only one of them can be selected at a time - selecting one of them automatically deselects all the others. See the Toggle Group page for details on using the Toggle Group component. Slider A Slider has a decimal number Value that the user can drag between a minimum and maximum value. It can be either horizontal or vertical. It also has a OnValueChanged UnityEvent to define what it will do when the value is changed. See the Slider page for details on using the Slider component. Scrollbar A Scrollbar has a decimal number Value between 0 and 1. When the user drags the scrollbar, the value changes accordingly. Scrollbars are often used together with a Scroll Rect and a Mask to create a scroll view. The Scrollbar has a Size value between 0 and 1 that determines how big the handle is as a fraction of the entire scrollbar length. This is often controlled from another component to indicate how big a proportion of the content in a scroll view is visible. The Scroll Rect component can automatically do this. The Scrollbar can be either horizontal or vertical. It also has a OnValueChanged UnityEvent to define what it will do when the value is changed. See the Scrollbar page for details on using the Scrollbar component. Dropdown A Dropdown has a list of options to choose from. A text string and optionally an image can be specified for each option, and can be set either in the Inspector or dynamically from code. It has a OnValueChanged UnityEvent to define what it will do when the currently chosen option is changed. See the Dropdown page for details on using the Dropdown component. Input Field An Input Field is used to make the text of a Text Element editable by the user. It has a UnityEvent to define what it will do when the text content is changed, and an another to define what it will do when the user has finished editing it. See the Input Field page for details on using the Input Field component. Scroll Rect (Scroll View) A Scroll Rect can be used when content that takes up a lot of space needs to be displayed in a small area. The Scroll Rect provides functionality to scroll over this content. Usually a Scroll Rect is combined with a Mask in order to create a scroll view, where only the scrollable content inside the Scroll Rect is visible. It can also additionally be combined with one or two Scrollbars that can be dragged to scroll horizontally or vertically. See the Scroll Rect page for details on using the Scroll Rect component."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIReference.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIReference.html",
    "title": "UI Reference | Cacher Game",
    "summary": "UI Reference This section goes into more depth about Unity’s UI features."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIVisualComponents.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIVisualComponents.html",
    "title": "Visual Components | Cacher Game",
    "summary": "Visual Components With the introduction of the UI system, new Components have been added that will help you create GUI specific functionality. This section will cover the basics of the new Components that can be created. Text The Text component, which is also known as a Label, has a Text area for entering the text that will be displayed. It is possible to set the font, font style, font size and whether or not the text has rich text capability. There are options to set the alignment of the text, settings for horizontal and vertical overflow which control what happens if the text is larger than the width or height of the rectangle, and a Best Fit option that makes the text resize to fit the available space. Image An Image has a Rect Transform component and an Image component. A sprite can be applied to the Image component under the Target Graphic field, and its colour can be set in the Color field. A material can also be applied to the Image component. The Image Type field defines how the applied sprite will appear, the options are: Simple - Scales the whole sprite equally. Sliced - Utilises the 3x3 sprite division so that resizing does not distort corners and only the center part is stretched. Tiled - Similar to Sliced, but tiles (repeats) the center part rather than stretching it. For sprites with no borders at all, the entire sprite is tiled. Filled - Shows the sprite in the same way as Simple does except that it fills in the sprite from an origin in a defined direction, method and amount. The option to Set Native Size, which is shown when Simple or Filled is selected, resets the image to the original sprite size. Images can be imported as UI sprites by selecting Sprite( 2D / UI) from the 'Texture Type' settings. Sprites have extra import settings compared to the old GUI sprites, the biggest difference is the addition of the sprite editor. The sprite editor provides the option of 9-slicing the image, this splits the image into 9 areas so that if the sprite is resized the corners are not stretched or distorted. Raw Image The Image component takes a sprite but Raw Image takes a texture (no borders etc). Raw Image should only be used if necessary otherwise Image will be suitable in the majority of cases. Mask A Mask is not a visible UI control but rather a way to modify the appearance of a control’s child elements. The mask restricts (ie, “masks”) the child elements to the shape of the parent. So, if the child is larger than the parent then only the part of the child that fits within the parent will be visible. Effects Visual components can also have various simple effects applied, such as a simple drop shadow or outline. See the UI Effects reference page for more information."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-Canvas.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-Canvas.html",
    "title": "Canvas | Cacher Game",
    "summary": "Canvas The Canvas component represents the abstract space in which the UI is laid out and rendered. All UI elements must be children of a GameObject that has a Canvas component attached. When you create a UI element object from the menu (GameObject > Create UI), a Canvas object will be created automatically if there isn't one in the scene already. Properties Property: Function: Render Mode The way the UI is rendered to the screen or as an object in 3D space (see below). The options are Screen Space - Overlay, Screen Space - Camera and World Space. Pixel Perfect (Screen Space modes only) Should the UI be rendered without antialiasing for precision? Render Camera (Screen Space - Camera mode only) The camera to which the UI should be rendered (see below). Plane Distance (Screen Space - Camera mode only) The distance at which the UI plane should be placed in front of the camera. Event Camera (World Space mode only) The camera that will be used to process UI events. Receives Events Are UI events processed by this Canvas? Details A single Canvas for all UI elements is sufficient but multiple Canvases in the scene is possible. It is also possible use nested Canvases, where one Canvas is placed as a child of another for optimization purposes. A nested Canvas uses the same Render Mode as its parent. Traditionally, UIs are rendered as if they were simple graphic designs drawn directly on the screen. That is to say, they have no concept of a 3D space being viewed by a camera. Unity supports this kind of screen space rendering but also allows UIs to rendered as objects in the scene, depending on the value of the Render Mode property. The modes available are Screen Space - Overlay, Screen Space - Camera and World Space. Screen Space - Overlay In this mode, the Canvas is scaled to fit the screen and then rendered directly without reference to the scene or a camera (the UI will be rendered even if there is no camera in the scene at all). If the screen's size or resolution are changed then the UI will automatically rescale to fit. The UI will be drawn over any other graphics such as the camera view. Note: The Screen Space - Overlay canvas needs to be stored at the top level of the hierarchy. If this is not used then the UI may disappear from the view. This is a built-in limitation. Keep the Screen Space - Overlay canvas at the top level of the hierarchy to get expected results. Screen Space - Camera In this mode, the Canvas is rendered as if it were drawn on a plane object some distance in front of a given camera. The onscreen size of the UI does not vary with the distance since it is always rescaled to fit exactly within the camera frustum. If the screen's size or resolution or the camera frustum are changed then the UI will automatically rescale to fit. Any 3D objects in the scene that are closer to the camera than the UI plane will be rendered in front of the UI, while objects behind the plane will be obscured. World Space This mode renders the UI as if it were a plane object in the scene. Unlike Screen Space - Camera mode, however, the plane need not face the camera and can be oriented however you like. The size of the Canvas can be set using its Rect Transform but its onscreen size will depend on the viewing angle and distance of the camera. Other scene objects can pass behind, through or in front of the Canvas. Hints Read more about setting up a World Space Canvas on the Creating a World Space UI page. For information about making your Canvas and UI scale to different resolutions or aspect ratios, see the Designing UI for Multiple Resolutions page as well as the Canvas Scaler page."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-CanvasGroup.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-CanvasGroup.html",
    "title": "Canvas Group | Cacher Game",
    "summary": "Canvas Group The Canvas Group can be used to control certain aspects of a whole group of UI elements from one place without needing to handle them each individually. The properties of the Canvas Group affect the GameObject it is on as well as all children. Properties Property: Function: Alpha The opacity of the UI elements in this group. The value is between 0 and 1 where 0 is fully transparent and 1 is fully opaque. Note that elements retain their own transparency as well, so the Canvas Group alpha and the alpha values of the individual UI elements are multiplied with each other. Interactable Determines if this component will accept input. When it is set to false interaction is disabled. Block Raycasts Will this component act as a collider for Raycasts? You will need to call the RayCast function on the graphic raycaster attached to the Canvas. This does not apply to Physics.Raycast. Ignore Parent Groups Will this group also be affected by the settings in Canvas Group components further up in the Game Object hierarchy, or will it ignore those and hence override them? Details Typical uses of Canvas Group are: Fading in or out a whole window by adding a Canvas Group on the GameObject of the Window and control its Alpha property. Making a whole set of controls non-interactable (\"grayed out\") by adding a Canvas Group to a parent GameObject and setting its Interactable property to false. Making one or more UI elements not block mouse events by placing a Canvas Group component on the element or one of its parents and setting its Block Raycasts property to false."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-CanvasRenderer.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-CanvasRenderer.html",
    "title": "Canvas Renderer | Cacher Game",
    "summary": "Canvas Renderer The Canvas Renderer component renders a graphical UI object contained within a Canvas. Properties The Canvas Renderer has no properties exposed in the inspector. Details The standard UI objects available from the menu (GameObject > Create UI) all have Canvas Renderers attached wherever they are required but you may need to add this component manually for custom UI objects. Although there are no properties exposed in the inspector, a few properties and function can be accessed from scripts - see the CanvasRenderer page in the Script Reference for full details."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-RectTransform.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-RectTransform.html",
    "title": "Rect Transform | Cacher Game",
    "summary": "Rect Transform The Rect Transform component is the 2D layout counterpart of the Transform component. Where Transform represents a single point, Rect Transform represent a rectangle that a UI element can be placed inside. If the parent of a Rect Transform is also a Rect Transform, the child Rect Transform can also specify how it should be positioned and sized relative to the parent rectangle. Properties Property: Function: Pos (X, Y, Z) Position of the rectangle's pivot point relative to the anchors. The pivot point is the location around which the rectangle rotates. Width/Height Width and height of the rectangle. Left, Top, Right, Bottom Positions of the rectangle's edges relative to their anchors. This can be thought of as padding inside the rectangle defined by the anchors. Shown in place of Pos and Width/Height when the anchors are separated (see below). To access these options click the square Anchor Presets box at the top left of the RectTransform component. Anchors The anchor points for the lower left corner and the upper right corner of the rectangle. Min The anchor point for the lower left corner of the rectangle defined as a fraction of the size of the parent rectangle. 0,0 corresponds to anchoring to the lower left corner of the parent, while 1,1 corresponds to anchoring to the upper right corner of the parent. Max The anchor point for the upper right corner of the rectangle defined as a fraction of the size of the parent rectangle. 0,0 corresponds to anchoring to the lower left corner of the parent, while 1,1 corresponds to anchoring to the upper right corner of the parent. Pivot Location of the pivot point around which the rectangle rotates, defined as a fraction of the size of the rectangle itself. 0,0 corresponds to the lower left corner while 1,1 corresponds to the upper right corner. Rotation Angle of rotation (in degrees) of the object around its pivot point along the X, Y and Z axis. Scale Scale factor applied to the object in the X, Y and Z dimensions. Blueprint Mode Edit RectTransforms as if they were not rotated and scaled. This enabled snapping too. Raw Edit Mode When enabled, editing pivot and anchor values will not counter adjust the position and size of the rectangle in order to make it stay in one place. Details Note that some RectTransform calculations are performed at the end of a frame, just before calculating UI vertices, in order to ensure that they are up to date with all the latest changes performed throughout the frame. This means that they haven't yet been calculated for the first time in the Start callback and first Update callback. You can work around this by creating a Start() callback and adding Canvas.ForceUpdateCanvases() method to it. This will force Canvas to be updated not at the end of the frame, but when that method is called. See the Basic Layout page for a full introduction and overview of how to use the Rect Transform."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-CanvasComponents.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-CanvasComponents.html",
    "title": "Canvas Components | Cacher Game",
    "summary": "Canvas Components All UI Components are placed within a Canvas. Canvas Canvas Scaler Canvas Group Canvas Renderer"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIAutoLayout.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIAutoLayout.html",
    "title": "Auto Layout | Cacher Game",
    "summary": "Auto Layout The auto layout system provides ways to place elements in nested layout groups such as horizontal groups, vertical groups, or grids. It also allows elements to automatically be sized according to the contained content. Content Size Fitter Layout Element Horizontal Layout Group Vertical Layout Group Grid Layout Group"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIEffects.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIEffects.html",
    "title": "UI Effect Components | Cacher Game",
    "summary": "UI Effect Components The effects components allow adding simple effects to Text and Image graphics, such as shadow and outline. Shadow Outline Position as UV1"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIInteraction.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIInteraction.html",
    "title": "Interaction Components | Cacher Game",
    "summary": "Interaction Components The interaction components in the UI system handle interaction, such as mouse or touch events and interaction using a keyboard or controller. Selectable Base Class Button Toggle Toggle Group Slider Scrollbar Scroll Rect InputField"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIVisual.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIVisual.html",
    "title": "Visual Components | Cacher Game",
    "summary": "Visual Components The visual components allow for ease of creation and GUI specific functionality. Text Image Raw Image Mask"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/index.html",
    "title": "Unity UI: Unity User Interface | Cacher Game",
    "summary": "Unity UI: Unity User Interface Unity UI is a UI toolkit for developing user interfaces for games and applications. It is a GameObject-based UI system that uses Components and the Game View to arrange, position, and style user interfaces. ​ You cannot use Unity UI to create or change user interfaces in the Unity Editor. This documentation describes Unity UI features such as creating a Canvas, positioning and animating elements, defining user interactions, and sizing layouts automatically."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-AspectRatioFitter.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-AspectRatioFitter.html",
    "title": "Aspect Ratio Fitter | Cacher Game",
    "summary": "Aspect Ratio Fitter Properties Property: Function: Aspect Mode How the rectangle is resized to enforce the aspect ratio. None Do not make the rect fit the aspect ratio. Width Controls Height The height is automatically adjusted based on the width. Height Controls Width The width is automatically adjusted based on the height. Fit In Parent The width, height, position, and anchors are automatically adjusted to make the rect fit inside the rect of the parent while keeping the aspect ratio. The may be some space inside the parent rect which is not covered by this rect. Envelope Parent The width, height, position, and anchors are automatically adjusted to make the rect cover the entire area of the parent while keeping the aspect ratio. This rect may extend further out than the parent rect. Aspect Ratio The aspect ratio to enforce. This is the width divided by the height. Description The Aspect Ratio Fitter functions as a layout controller that controls the size of its own layout element. It can adjust the height to fit the width or vice versa, or it can make the element fit inside its parent or envelope its parent. The Aspect Ratio Fitter does not take layout information into account such as minimum size and preferred size. It's worth keeping in mind that when a Rect Transform is resized - whether by an Aspect Ratio Fitter or something else - the resizing is around the pivot. This means that the pivot can be used to control the alignment of the rectangle. For example, a pivot placed at the top center will make the rectangle grow evenly to both sides, and only grow downwards while the top edge remain at its position."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Button.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Button.html",
    "title": "Button | Cacher Game",
    "summary": "Button The Button control responds to a click from the user and is used to initiate or confirm an action. Familiar examples include the Submit and Cancel buttons used on web forms. Properties Property: Function: Interactable Enable Interactable if you want this button to accept input. See API documentation on Interactable for more details. Transition Properties that determine the way the control responds visually to user actions. See Transition Options. Navigation Properties that determine the sequence of controls. See Navigation Options. Events Property: Function: On Click A UnityEvent that Unity invokes when a user clicks the button and releases it. Details The button is designed to initiate an action when the user clicks and releases it. If the mouse is moved off the button control before the click is released, the action does not take place. The button has a single event called On Click that responds when the user completes a click. Typical use cases include: Confirming a decision (eg, starting gameplay or saving a game) Moving to a sub-menu in a GUI Cancelling an action in progress (eg, downloading a new scene)"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-CanvasScaler.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-CanvasScaler.html",
    "title": "Canvas Scaler | Cacher Game",
    "summary": "Canvas Scaler The Canvas Scaler component is used for controlling the overall scale and pixel density of UI elements in the Canvas. This scaling affects everything under the Canvas, including font sizes and image borders. Properties Property: Function: UI Scale Mode Determines how UI elements in the Canvas are scaled. Constant Pixel Size Makes UI elements retain the same size in pixels regardless of screen size. Scale With Screen Size Makes UI elements bigger the bigger the screen is. Constant Physical Size Makes UI elements retain the same physical size regardless of screen size and resolution. Settings for Constant Pixel Size: Property: Function: Scale Factor Scales all UI elements in the Canvas by this factor. Reference Pixels Per Unit If a sprite has this 'Pixels Per Unit' setting, then one pixel in the sprite will cover one unit in the UI. Settings for Scale With Screen Size: Property: Function: Reference Resolution The resolution the UI layout is designed for. If the screen resolution is larger, the UI will be scaled up, and if it's smaller, the UI will be scaled down. Screen Match Mode A mode used to scale the canvas area if the aspect ratio of the current resolution doesn't fit the reference resolution. Match Width or Height Scale the canvas area with the width as reference, the height as reference, or something in between. Expand Expand the canvas area either horizontally or vertically, so the size of the canvas will never be smaller than the reference. Shrink Crop the canvas area either horizontally or vertically, so the size of the canvas will never be larger than the reference. Match Determines if the scaling is using the width or height as reference, or a mix in between. Reference Pixels Per Unit If a sprite has this 'Pixels Per Unit' setting, then one pixel in the sprite will cover one unit in the UI. Settings for Constant Physical Size: Property: Function: Physical Unit The physical unit to specify positions and sizes in. Fallback Screen DPI The DPI to assume if the screen DPI is not known. Default Sprite DPI The pixels per inch to use for sprites that have a 'Pixels Per Unit' setting that matches the 'Reference Pixels Per Unit' setting. Reference Pixels Per Unit If a sprite has this 'Pixels Per Unit' setting, then its DPI will match the 'Default Sprite DPI' setting. Settings for World Space Canvas (shown when Canvas component is set to World Space): Property: Function: Dynamic Pixels Per Unit The amount of pixels per unit to use for dynamically created bitmaps in the UI, such as Text. Reference Pixels Per Unit If a sprite has this 'Pixels Per Unit' setting, then one pixel in the sprite will cover one unit in the world. If the 'Reference Pixels Per Unit' is set to 1, then the 'Pixels Per Unit' setting in the sprite will be used as-is. Details For a Canvas set to 'Screen Space - Overlay' or 'Screen Space - Camera', the Canvas Scaler UI Scale Mode can be set to Constant Pixel Size, Scale With Screen Size, or Constant Physical Size. Constant Pixel Size Using the Constant Pixel Size mode, positions and sizes of UI elements are specified in pixels on the screen. This is also the default functionality of the Canvas when no Canvas Scaler is attached. However, With the Scale Factor setting in the Canvas Scaler, a constant scaling can be applied to all UI elements in the Canvas. Scale With Screen Size Using the Scale With Screen Size mode, positions and sizes can be specified according to the pixels of a specified reference resolution. If the current screen resolution is larger than the reference resolution, the Canvas will keep having only the resolution of the reference resolution, but will scale up in order to fit the screen. If the current screen resolution is smaller than the reference resolution, the Canvas will similarly be scaled down to fit. If the current screen resolution has a different aspect ratio than the reference resolution, scaling each axis individually to fit the screen would result in non-uniform scaling, which is generally undesirable. Instead of this, the ReferenceResolution component will make the Canvas resolution deviate from the reference resolution in order to respect the aspect ratio of the screen. It is possible to control how this deviation should behave using the Screen Match Mode setting. Constant Physical Size Using the Constant Physical Size mode, positions and sizes of UI elements are specified in physical units, such as millimeters, points, or picas. This mode relies on the device reporting its screen DPI correctly. You can specify a fallback DPI to use for devices that do not report a DPI. World Space For a Canvas set to 'World Space' the Canvas Scaler can be used to control the pixel density of UI elements in the Canvas. Hints See the page Designing UI for Multiple Resolutions for a step by step explanation of how Rect Transform anchoring and Canvas Scaler can be used in conjunction to make UI layouts that adapt to different resolutions and aspect ratios."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-ContentSizeFitter.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-ContentSizeFitter.html",
    "title": "Content Size Fitter | Cacher Game",
    "summary": "Content Size Fitter Properties Property: Function: Horizontal Fit How the width is controlled. Unconstrained Do not drive the width based on the layout element. Min Size Drive the width based on the minimum width of the layout element. Preferred Size Drive the width based on the preferred width of the layout element. Vertical Fit How the height is controlled. Unconstrained Do not drive the height based on the layout element. Min Size Drive the height based on the minimum height of the layout element. Preferred Size Drive the height based on the preferred height of the layout element. Description The Content Size Fitter functions as a layout controller that controls the size of its own layout element. The size is determined by the minimum or preferred sizes provided by layout element components on the Game Object. Such layout elements can be Image or Text components, layout groups, or a Layout Element component. It's worth keeping in mind that when a Rect Transform is resized - whether by a Content Size Fitter or something else - the resizing is around the pivot. This means that the direction of the resizing can be controlled using the pivot. For example, when the pivot is in the center, the Content Size Fitter will expand the Rect Transform out equally in all directions. And when the pivot is in the upper left corner, the Content Size Fitter will expand the Rect Transform down and to the right."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Dropdown.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Dropdown.html",
    "title": "Dropdown | Cacher Game",
    "summary": "Dropdown The Dropdown can be used to let the user choose a single option from a list of options. The control shows the currently chosen option. Once clicked, it opens up the list of options so a new option can be chosen. Upon choosing a new option, the list of closed again, and the control shows the new selected option. The list is also closed if the user clicks on the control itself, or anywhere else inside the Canvas. Properties Property: Function: Interactable Will this component will accept input? See Interactable. Transition Properties that determine the way the control responds visually to user actions. See Transition Options. Navigation Properties that determine the sequence of controls. See Navigation Options. Template The Rect Transform of the template for the dropdown list. See instructions below. Caption Text The Text component to hold the text of the currently selected option. (Optional) Caption Image The Image component to hold the image of the currently selected option. (Optional) Item Text The Text component to hold the text of the item. (Optional) Item Image The Image component to hold the image of the item. (Optional) Value The index of the currently selected option. 0 is the first option, 1 is the second, and so on. Options The list of possible options. A text string and an image can be specified for each option. Events Property: Function: On Value Changed A UnityEvent that is invoked when a user has clicked one of the options in the dropdown list. Details The list of options is specified in the Inspector or can be assigned from code. For each option a text string can be specified, and optionally an image as well, if the Dropdown is setup to support it. The button has a single event called On Value Changed that responds when the user completes a click on one of the options in the list. It supports sending an integer number value that is the index of the selected option. 0 is the first option, 1 is the second, and so on. The template system The Dropdown control is designed to have a child GameObject which serves as a template for the dropdown list that is shown when clicking the dropdown control. The template GameObject is inactive by default, but can be made active while editing the template to better see what's going on. A reference to the template object must be specified in the Template property of the Dropdown component. The template must have a single item in it with a Toggle component on. When the actual dropdown list is created upon clicking the dropdown control, this item is duplicated multiple times, with one copy used for each option in the list. The parent of the item is automatically resized so it can fit all the items inside. The template can be setup in many different ways. The setup used by the GameObject > UI > Dropdown menu item includes a scroll view, such that if there are too many options to show at once, a scrollbar will appear and the user can scroll through the options. This is however not a mandatory part of the template setup. (See the ScrollRect page for more information about setup of Scroll Views.) Setup of text and image support The dropdown supports one text content and one image content for each option. Both text and image is optional. They can only be used if the Dropdown is setup to support it. The dropdown supports text for each option when the Caption Text and Item Text properties are both setup. These are setup by default when using the GameObject > UI > Dropdown menu item. The Caption Text is the Text component to hold the text for the currently selected option. It is typically a child to the Dropdown GameObject. The Item Text is the Text component to hold the text for each option. It is typically a child to the Item GameObject. The dropdown supports an image for each option when the Caption Image and Item Image properties are both setup. These are not setup by default. The Caption Image is the Image component to hold the image for the currently selected option. It is typically a child to the Dropdown GameObject. The Item Image is the Image component to hold the image for each option. It is typically a child to the Item GameObject. The actual text and images used for the dropdowns are specified in the Options property of the Dropdown component, or can be set from code. Placement of the dropdown list The placement of the dropdown list in relation to the dropdown control is determined by the anchoring and pivot of the Rect Transform of the Template. By default, the list will appear below the control. This is achieved by anchoring the template to the bottom of the control. The pivot of the template also needs to be at the top, so that as the template is expanded to accommodate a variable number of option items, it only expands downwards. The Dropdown control has simple logic to prevent that the dropdown is displayed outside the bounds of the Canvas, since this would make it impossible to select certain options. If the dropdown at its default position is not fully within the Canvas rectangle, its position in relation to the control is reversed. For example, a list that is shown below the control by default will be shown above it instead. This logic is quite simple and has certain limitations. The dropdown template needs to be no larger than half the Canvas size minus the size of the dropdown control, otherwise there may not be room for the list at either position if the dropdown control is placed in the middle of the Canvas."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-EventSystem.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-EventSystem.html",
    "title": "Event System Manager | Cacher Game",
    "summary": "Event System Manager This subsystem is responsible for controlling all the other elements that make up eventing. It coordinates which Input Module is currently active, which GameObject is currently considered 'selected', and a host of other high level Event System concepts. Each 'Update' the Event System receives the call, looks through its Input Modules and figures out which is the Input Module that should be used for this tick. It then delegates the processing to the modules. Properties Property: Function: First Selected The GameObject that was selected first. Send Navigation Events Should the EventSystem allow navigation events (move / submit / cancel). Drag Threshold The soft area for dragging in pixels. Beneath the Properties table is the \"Add Default Input Modules\" button."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-EventTrigger.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-EventTrigger.html",
    "title": "Event Trigger | Cacher Game",
    "summary": "Event Trigger The Event Trigger receives events from the Event System and calls registered functions for each event. The Event Trigger can be used to specify functions you wish to be called for each Event System event. You can assign multiple functions to a single event and whenever the Event Trigger receives that event it will call those functions. Note that attaching an Event Trigger component to a GameObject will make that object intercept all events, and no event bubbling will occur from this object! Events Each of the Supported Events can optionally be included in the Event Trigger by clicking the Add New Event Type button."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-GraphicRaycaster.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-GraphicRaycaster.html",
    "title": "Graphic Raycaster | Cacher Game",
    "summary": "Graphic Raycaster The Graphic Raycaster is used to raycast against a Canvas. The Raycaster looks at all Graphics on the canvas and determines if any of them have been hit. The Graphic Raycaster can be configured to ignore backfacing Graphics as well as be blocked by 2D or 3D objects that exist in front of it. A manual priority can also be applied if you want processing of this element to be forced to the front or back of the Raycasting. Properties Property: Function: Ignore Reversed Graphics Should graphics facing away from the raycaster be considered? Blocked Objects Type of objects that will block graphic raycasts. Blocking Mask Type of objects that will block graphic raycasts."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-GridLayoutGroup.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-GridLayoutGroup.html",
    "title": "Grid Layout Group | Cacher Game",
    "summary": "Grid Layout Group The Grid Layout Group component places its child layout elements in a grid. Properties Property: Function: Padding The padding inside the edges of the layout group. Cell Size The size to use for each layout element in the group. Spacing The spacing between the layout elements. Start Corner The corner where the first element is located. Start Axis Which primary axis to place elements along. Horizontal will fill an entire row before a new row is started. Vertical will fill an entire column before a new column is started. Child Alignment The alignment to use for the layout elements if they don't fill out all the available space. Constraint Constraint the grid to a fixed number of rows or columns to aid the auto layout system. Description Unlike other layout groups, the Grid Layout Group ignores the minimum, preferred, and flexible size properties of its contained layout elements and instead assigns a fixed size to all of them which is defined with the Cell Size property of the Grid Layout Group itself. Grid Layout Group and auto layout There are special considerations to be aware of when using the Grid Layout Group as part of an auto layout setup, such as using it with a Content Size Fitter. The auto layout system calculates the horizontal and vertical sizes independently. This can be at odds with the Grid Layout Group, where the number of rows depends on the number of columns and vice versa. For any given number of cells, there are different combinations of row count and column count that can make the grid fit its content. In order to aid the layout system, you can specify that you intent the table to have a fixed number of columns or rows by using the Constraint property. Here are suggested ways of using the Layout System with a Content Size Fitter: Flexible width and fixed height To setup a grid with a flexible width and fixed height, where the grid expands horizontally as more elements are added, you can set these properties as follows: Grid Layout Group Constraint: Fixed Row Count Content Size Fitter Horizontal Fit: Preferred Size Content Size Fitter Vertical Fit: Preferred Size or Unconstrained If unconstrained Vertical Fit is used, it's up to you to give the grid a height that is big enough to fit the specified row count of cells. Fixed width and flexible height To setup a grid with a fixed width and flexible height, where the grid expands vertically as more elements are added, you can set these properties as follows: Grid Layout Group Constraint: Fixed Column Count Content Size Fitter Horizontal Fit: Preferred Size or Unconstrained Content Size Fitter Vertical Fit: Preferred Size If unconstrained Horizontal Fit is used, it's up to you to give the grid a width that is big enough to fit the specified column count of cells. Both flexible width and height If you want a grid with both a flexible width and height you can do that, but you will have no control over the specific number of rows and columns. The grid will attempt to make the row and column count approximately the same. You can set these properties as follows: Grid Layout Group Constraint: Flexible Content Size Fitter Horizontal Fit: Preferred Size Content Size Fitter Vertical Fit: Preferred Size"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-HorizontalLayoutGroup.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-HorizontalLayoutGroup.html",
    "title": "Horizontal Layout Group | Cacher Game",
    "summary": "Horizontal Layout Group The Horizontal Layout Group component places its child layout elements next to each other, side by side. Their widths are determined by their respective minimum, preferred, and flexible widths according to the following model: The minimum widths of all the child layout elements are added together and the spacing between them is added as well. The result is the mimimum width of the Horizontal Layout Group. The preferred widths of all the child layout elements are added together and the spacing between them is added as well. The result is the preferred width of the Horizontal Layout Group. If the Horizontal Layout Group is at its minimum width or smaller, all the child layout elements will also have their minimum width. The closer the Horizontal Layout group is to its preferred width, the closer each child layout element will also get to their preferred width. If the Horizontal Layout Group is wider than its preferred width, it will distribute the extra available space proportionally to the child layout elements according to their respective flexible widths. For more information about minimum, preferred, and flexible width, see the documentation on Auto Layout. Properties Property: Function: Padding The padding inside the edges of the layout group. Spacing The spacing between the layout elements. Child Alignment The alignment to use for the child layout elements if they don't fill out all the available space. Control Child Size Whether the Layout Group controls the width and height of its child layout elements. Use Child Scale Whether the Layout Group considers the scale of its child layout elements when sizing and laying out elements. Width and Height correspond to the Scale > X and Scale > Y values in each child layout element's Rect Transform component. You cannot animate the Scale values using the Animator Controller Child Force Expand Whether to force the child layout elements to expand to fill additional available space."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Image.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Image.html",
    "title": "Image | Cacher Game",
    "summary": "Image The Image control displays a non-interactive image to the user. You can use this for purposes such as decorations or icons, and you can change the image from a script to reflect changes in other controls. The control is similar to the Raw Image control, but offers more options for animating the image and accurately filling the control rectangle. However, the Image control requires its Texture to be a Sprite, while the Raw Image can accept any Texture. Properties Property: Function: Source Image The Texture that represents the image to display (which must be imported as a Sprite). Color The color to apply to the image. Material The Material to use for rendering the image. Raycast Target Enable Raycast Target if you want Unity to consider the image a target for raycasting. Preserve Aspect Ensure the image retains its existing dimension. Set Native Size Set the dimensions of the image box to the original pixel size of the Texture. You must import the image to display as a Sprite to work with the Image control."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-InputField.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-InputField.html",
    "title": "Input Field | Cacher Game",
    "summary": "Input Field An Input Field is a way to make the text of a Text Control editable. Like the other interaction controls, it's not a visible UI element in itself and must be combined with one or more visual UI elements in order to be visible. Properties Property: Function: Interactable A boolean that determines if the Input Field can be interacted with or not. |Transition ||Transitions are used to set how the input field transitions when Normal, Highlighted, Pressed or Disabled. | |Navigation || Properties that determine the sequence of controls. See Navigation Options.| |TextComponent ||A reference to the Text element used as the contents of the Input Field| |Text ||Starting Value. The initial text placed in the field before editing begins. | |Character Limit ||The value of the maximum number of characters that can be entered into the input field.| |Content Type ||Define the type(s) of characters that your input field accepts| | |Standard |Any character can be entered.| | |Autocorrected |The autocorrection determines whether the input tracks unknown words and suggests a more suitable replacement candidate to the user, replacing the typed text automatically unless the user explicitly overrides the action.| | |Integer Number |Allow only whole numbers to be entered.| | |Decimal Number |Allow only numbers and a single decimal point to be entered.| | |Alphanumeric |Allow both letters and numbers. Symbols cannot be entered.| | |Name |Automatically capitalizes the first letter of each word. Note that the user can circumvent the capitalization rules using the Delete key.| | |Email Address |Allows you to enter an Alphanumeric string consisting of a maximum of one @ sign. periods/baseline dots cannot be entered next to each other. | | |Password* |Conceals the characters inputed with an asterisk. Allows symbols.| | |Pin |Conceals the characters inputed with an asterisk. Only allows only whole numbers to be entered.| | |Custom |Allows you to customise the Line Type, Input Type, Keyboard Type and Character Validation.| |Line Type ||Defines how text is formatted inside the text field.| | |Single Line |Only allows text to be on a single line.| | |Multi Line Submit |Allows text to use multiple lines. Only uses a new line when needed.| | |Multi Line Newline |Allows text to use multiple lines. User can use a newline by pressing the return key.| |Placeholder ||This is an optional ‘empty’ Graphic to show that the Input Field is empty of text. Note that this ‘empty' graphic still displays even when the Input Field is selected (that is; when there is focus on it). eg; \"Enter text...\".| |Caret Blink Rate ||Defines the blink rate for the mark placed on the line to indicate a proposed insertion of text.| |Selection Color ||The background color of the selected portion of text.| Hide Mobile Input Hides the native input field attached to the onscreen keyboard on mobile devices. Note that this only works on iOS and Android devices. Events Property: Function: On Value Change A UnityEvent that is invoked when the text content of the Input Field changes. The event can send the current text content as a string type dynamic argument. End Edit A UnityEvent that is invoked when the user finishes editing the text content either by submitting or by clicking somewhere that removes the focus from the Input Field. The event can send the current text content as a string type dynamic argument. Details The Input Field script can be added to any existing Text control object from the menu (Component > UI > Input Field). Having done this, you should also drag the object to the Input Field's Text property to enable editing. The Text property of the Text control itself will change as the user types and the value can be retrieved from a script after editing. Note that Rich Text is intentionally not supported for editable Text controls; the field will apply any Rich Text markup instantly when typed but the markup essentially \"disappears\" and there is no subsequent way to change or remove the styling. Hints To obtain the text of the Input Field, use the text property on the InputField component itself, not the text property of the Text component that displays the text. The text property of the Text component may be cropped or may consist of asterisks for passwords. Limitations On iOS when an external keyboard is connected, the onscreen keyboard will be hidden by the OS but the caret will not appear in the InputField. This is due to a lack of external keyboard support on iOS 13 and older."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-LayoutElement.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-LayoutElement.html",
    "title": "Layout Element | Cacher Game",
    "summary": "Layout Element If you want to override the minimum, preferred, or flexible size of a layout element, you can do that by adding a Layout Element component to the GameObject. A layout controller allocates width or height to a layout element in the following order: First, the layout controller allocates the minimum size properties (Min Width, Min Height). If there is sufficient available space, the layout controller allocates the preferred size properties (Preferred Width, Preferred Height). If there is additional available space, the layout controller allocates the flexible size properties (Flexible Width, Flexible Height). For more information about minimum, preferred, and flexible size, see documentation on Auto Layout. Properties When you enable a width or height property, a value field appears next to it. Use this value field to enter the exact value for the width or height. Min and Preferred sizes are in regular units, while the Flexible sizes are in relative units. Property: Function: Ignore Layout When enabled, the layout system ignores this layout element. Min Width The minimum width this layout element should have. Min Height The minimum height this layout element should have. Preferred Width The preferred width this layout element should have before additional available width is allocated. Preferred Height The preferred height this layout element should have before additional available height is allocated. Flexible Width The relative amount of additional available width this layout element should fill out relative to its siblings. Flexible Height The relative amount of additional available height this layout element should fill out relative to its siblings. Layout Priority The layout priority for this component. If a GameObject has more than one component with layout properties (for example, an Image component and a LayoutElement component), the layout system uses the property values from the component with the highest Layout Priority. If the components have the same Layout Priority, the layout system uses the highest value for each property, regardless of which component it comes from. Description The Layout Element component lets you override the values for one or more of the layout properties. Enable the checkbox for a property you want to override and then specify the value you want to override with. Minimum and preferred sizes are defined in regular units, while the flexible sizes are defined in relative units. If any layout element has flexible size greater than zero, it means that all the available space will be filled out. The relative flexible size values of the siblings determines how big a proportion of the available space each sibling fills out. Most commonly, flexible width and height is set to just 0 or 1. Specifying both a preferred size and a flexible size can make sense in certain cases. Flexible sizes are only allocated after all preferred sizes have been fully allocated. Thus, a layout element which has a flexible size specified but no preferred size will keep its minimum size until other layout elements have grown to their full preferred size, and only then begin to grow based on additional available space. By also specifying a flexible size, this can be avoided and the element can grow to its preferred size in tandem with the other layout elements that have preferred sizes, and then grow further once all flexible sizes have been allocated."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Mask.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Mask.html",
    "title": "Mask | Cacher Game",
    "summary": "Mask A Mask is not a visible UI control but rather a way to modify the appearance of a control's child elements. The mask restricts (ie, \"masks\") the child elements to the shape of the parent. So, if the child is larger than the parent then only the part of the child that fits within the parent will be visible. Properties Property: Function: Show Graphic Should the graphic of the masking (parent) object be drawn with alpha over the child object? Description A common use of a Mask is to show a small section of a large Image, using say a Panel object (menu: GameObject > Create UI > Panel) as a \"frame\". You can achieve this by firstly making the Image a child of the Panel object. You should position the Image so that the area that should be visible is directly behind the Panel area. Then, add a Mask component to the Panel. The areas of the child Image outside the panel will become invisible since they are masked by the shape of the Panel. If the image is then moved around then only the part revealed by the Panel will be visible. The movement could be controlled by Scrollbars to create a scrollable viewer for a map, say. Implementation Masking is implemented using the stencil buffer of the GPU. *The first Mask element writes a 1 to the stencil buffer *All elements below the mask check when rendering, and only render to areas where there is a 1 in the stencil buffer *Nested Masks will write incremental bit masks into the buffer, this means that renderable children need to have the logical & of the stencil values to be rendered."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Outline.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Outline.html",
    "title": "Outline | Cacher Game",
    "summary": "Outline The Outline component adds a simple outline effect to graphic components such as Text or Image. It must be on the same GameObject as the graphic component. Properties Property: Function: Effect Color The color of the outline. Effect Distance The distance of the outline effect horizontally and vertically. Use Graphic Alpha Multiplies the color of the graphic onto the color of the effect."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Physics2DRaycaster.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Physics2DRaycaster.html",
    "title": "Physics 2D Raycaster | Cacher Game",
    "summary": "Physics 2D Raycaster The 2D Raycaster raycasts against 2D objects in the scene. This allows messages to be sent to 2D physics objects that implement event interfaces. The Camera GameObject needs to be used and will be added to the GameObject if the Physics 3D Raycaster is not added to the Camera GameObject. For more Raycaster information see Raycasters. Properties Property: Function: Event Camera The camera that will generate rays for this raycaster. Priority Priority of the caster relative to other casters. Sort Order Priority Priority of the raycaster based upon sort order. Render Order Priority Priority of the raycaster based upon render order."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-PhysicsRaycaster.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-PhysicsRaycaster.html",
    "title": "Physics Raycaster | Cacher Game",
    "summary": "Physics Raycaster The Raycaster raycasts against 3D objects in the scene. This allows messages to be sent to 3D physics objects that implement event interfaces. Properties Property: Function: Depth Get the depth of the configured camera. Event Camera Get the camera that is used for this module. Event Mask Logical and of Camera mask and eventMask. Final Event Mask Logical and of Camera mask and eventMask."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-PositionAsUV1.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-PositionAsUV1.html",
    "title": "Position as UV1 | Cacher Game",
    "summary": "Position as UV1 This adds a simple Position as UV1 effect to text and image graphics. Properties Property: Function: Script"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-RawImage.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-RawImage.html",
    "title": "Raw Image | Cacher Game",
    "summary": "Raw Image The Raw Image control displays a non-interactive image to the user. You can use this for purposes such as decorations or icons, and you can change the image from a script to reflect changes in other controls. The control is similar to the Image control, but offers more options for animating the image and accurately filling the control rectangle. However, the Image control requires its Texture to be a Sprite, while the Raw Image can accept any Texture. Properties Property: Function: Texture The texture that represents the image to display. Color The color to apply to the image. Material The Material to use for rendering the image. Raycast Target Enable Raycast Target if you want Unity to consider the image a target for raycasting. UV Rectangle The image's offset and size within the control rectangle, given in normalized coordinates (range 0.0 to 1.0). The edges of the image are stretched to fill the space around the UV rectangle. Details Since the Raw Image does not require a sprite texture, you can use it to display any texture available to the Unity player. For example, you might show an image downloaded from a URL using the WWW class or a texture from an object in a game. The UV Rectangle properties allow you to display a small section of a larger image. The X and Y coordinates specify which part of the image is aligned with the bottom left corner of the control. For example, an X coordinate of 0.25 will cut off the leftmost quarter of the image. The W and H (ie, width and height) properties indicate the width and height of the section of image that will be scaled to fit the control rectangle. For example, a width and height of 0.5 will scale a quarter of the image area up to the control rectangle. By changing these properties, you can zoom and scale the image as desired (see also the Scrollbar control)."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-RectMask2D.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-RectMask2D.html",
    "title": "RectMask2D | Cacher Game",
    "summary": "RectMask2D A RectMask2D is a masking control similar to the Mask control. The mask restricts the child elements to the rectangle of the parent element. Unlike the standard Mask control it has some limitations, but it also has a number of performance benefits. Description A common use of a RectMask2D is to show small sections of a larger area. Using the RectMask2D to frame this area. The limitations of RectMask2D control are: It only works in 2D space It will not properly mask elements that are not coplanar The advantages of RectMask2D are: It does not use the stencil buffer No extra draw calls No material changes Fast performance"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-ScrollRect.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-ScrollRect.html",
    "title": "Scroll Rect | Cacher Game",
    "summary": "Scroll Rect A Scroll Rect can be used when content that takes up a lot of space needs to be displayed in a small area. The Scroll Rect provides functionality to scroll over this content. Usually a Scroll Rect is combined with a Mask in order to create a scroll view, where only the scrollable content inside the Scroll Rect is visible. It can also additionally be combined with one or two Scrollbars that can be dragged to scroll horizontally or vertically. Properties Property: Function: Content This is a reference to the Rect Transform of the UI element to be scrolled, for example a large image. Horizontal Enables horizontal scrolling Vertical Enables vertical scrolling Movement Type Unrestricted, Elastic or Clamped. Use Elastic or Clamped to force the content to remain within the bounds of the Scroll Rect. Elastic mode bounces the content when it reaches the edge of the Scroll Rect Elasticity This is the amount of bounce used in the elasticity mode. Inertia When Inertia is set the content will continue to move when the pointer is released after a drag. When Inertia is not set the content will only move when dragged. Deceleration Rate When Inertia is set the deceleration rate determines how quickly the contents stop moving. A rate of 0 will stop the movement immediately. A value of 1 means the movement will never slow down. Scroll Sensitivity The sensitivity to scroll wheel and track pad scroll events. Viewport Reference to the viewport Rect Transform that is the parent of the content Rect Transform. Horizontal Scrollbar Optional reference to a horizontal scrollbar element. Visibility Whether the scrollbar should automatically be hidden when it isn't needed, and optionally expand the viewport as well. Spacing The space between the scrollbar and the viewport. Vertical Scrollbar Optional reference to a vertical scrollbar element. Visibility Whether the scrollbar should automatically be hidden when it isn't needed, and optionally expand the viewport as well. Spacing The space between the scrollbar and the viewport. Events Property: Function: On Value Changed A UnityEvent that is invoked when the scroll position of the Scroll Rect changes. The event can send the current scroll position as a Vector2 type dynamic argument. Details The important elements in a scroll view are the viewport, the scrolling content, and optionally one or two scrollbars. The root GameObject has the Scroll Rect component. The viewport has a Mask component. The viewport can either be the root GameObject, or a separate GameObject that's a child to the root. If auto-hiding scrollbars are used, it must be a child. The viewport Rect Transform needs to be referenced in the Viewport property of the Scroll Rect. All the scrolling content must be children of a single content GameObject that is a child to the viewport. The content Rect Transform needs to be referenced in the Content property of the Scroll Rect. The scrollbars - if used - are children to the root GameObject. See the Scrollbar page for more details on the setup of a scrollbar and see the section Scrollbar setup below for information about setup of scrollbars with a scroll view. This image shows a setup where the viewport is a child to the scroll view root. This is the default used when using the GameObject > UI > Scroll View menu option. To scroll content, the input must be received from inside the bounds of the ScrollRect, not on the content itself. Take care when using Unrestricted scrolling movement as it is possible to lose control of the content in an irretrievable way. When using Elastic or Constrained movement it is best to position the content so that it starts within the bounds of the ScrollRect, or undesirable behaviour may occur as the RectTransform tries to bring the content back within its bounds. Scrollbar setup Optionally, the Scroll Rect can be linked to a horizontal and/or a vertical Scrollbar. These are typically placed in the hierarchy as siblings to the viewport, and when present, should be dragged into the Horizontal Scrollbar and Vertical Scrollbar properties of the Scroll Rect, respectively. Note that the Direction property on such a horizontal Scrollbar should be set to Left To Right, and on the vertical Scrollbar to Bottom To Top. The scrollbars can optionally have auto-hiding behaviour that hides the scrollbars if the content doesn't need to scroll because it isn't larger than the viewport. Note that the auto-hiding only ever happens in Play Mode. In Edit Mode the scrollbars are always shown. This prevents marking the scene as dirty when it shouldn't be, and also help authoring content with proportions that there's room for even when the scrollbars are shown. If one or both scrollbars have their visibility behaviour set to Auto Hide And Expand View, the viewport is automatically expanded when the scrollbars are hidden in order to take up the extra room where the scrollbars would otherwise have been. With this setup, the position and size of the view is driven by the Scroll Rect, and the width of the horizontal scrollbar as well as the height of the vertical scrollbar is driven as well. With this setup the viewport as well as the scrollbars must be children to the Scroll Rect root GameObject. Hints The pivot and anchors of the content RectTransform can be used to determine how the content is aligned inside the scroll view if the content grows or shrinks. If the content should stay aligned with the top, set the anchors to the top of the parent, and set the pivot to the top position. See the page Making UI elements fit the size of their content for information about how to make the content Rect Transform automatically resize to fit the content."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Scrollbar.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Scrollbar.html",
    "title": "Scrollbar | Cacher Game",
    "summary": "Scrollbar The Scrollbar control allows the user to scroll an image or other view that is too large to see completely. Note that the similar Slider control is used for selecting numeric values rather than scrolling. Familiar examples include the vertical Scrollbar at the side of a text editor and the vertical and horizontal pair of bars for viewing a section of a large image or map. Properties Property: Function: Interactable Will this component accept input? See Interactable. Transition Properties that determine the way the control responds visually to user actions. See Transition Options. Navigation Properties that determine the sequence of controls. See Navigation Options. Fill Rect The graphic used for the background area of the control. Handle Rect The graphic used for the sliding \"handle\" part of the control Direction The direction in which the Scrollbar's value will increase when the handle is dragged. The options are Left To Right, Right To Left, Bottom To Top and Top To Bottom. Value Initial position value of the Scrollbar, in the range 0.0 to 1.0. Size Fractional size of the handle within the Scrollbar, in the range 0.0 to 1.0. Number Of Steps The number of distinct scroll positions allowed by the Scrollbar. Events Property: Function: On Value Changed A UnityEvent that is invoked when the current value of the Scrollbar changes. The event can send the value as a float type dynamic argument. Details The value of a Scrollbar is determined by the position of the handle along its length with the value being reported as a fraction between the extreme ends. For example, the default left-to-right bar has a value of 0.0 at the left end, 1.0 at the right end and 0.5 indicates the halfway point. A scrollbar can be oriented vertically by choosing Top To Bottom or Bottom To Top for the Direction property. A significant difference between the Scrollbar and the similar Slider control is that the Scrollbar's handle can change in size to represent the distance of scrolling available; when the view can scroll only a short way, the handle will fill up most of the bar and only allow a slight shift either direction. The Scrollbar has a single event called On Value Changed that responds as the user drags the handle. The current value is passed to the even function as a float parameter. Typical use cases for a scrollbar include: Scrolling a piece of text vertically. Scrolling a timeline horizontally. Used as a pair, scrolling a large image both horizontally and vertically to view a zoomed section. The size of the handle changes to indicate the degree of zooming and therefore the available distance for scrolling."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Selectable.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Selectable.html",
    "title": "Selectable Base Class | Cacher Game",
    "summary": "Selectable Base Class The Selectable Class is the base class for all the interaction components and it handles the items that are in common. Property: Function: Interactable This determines if this component will accept input. When it is set to false interaction is disabled and the transition state will be set to the disabled state. Transition Within a selectable component there are several Transition Options depending on what state the selectable is currently in. The different states are: normal, highlighted, pressed and disabled. Navigation There are also a number of Navigation Options to control how keyboard navigation of the controls is implemented."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-SelectableNavigation.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-SelectableNavigation.html",
    "title": "Navigation Options | Cacher Game",
    "summary": "Navigation Options Property: Function: Navigation The Navigation options refers to how the navigation of UI elements in play mode will be controlled. None No keyboard navigation. Also ensures that it does not receive focus from clicking/tapping on it. Horizontal Navigates Horizontally. Vertical Navigates Vertically. Automatic Automatic Navigation. Explicit In this mode you can explicitly specify where the control navigates to for different arrow keys. Visualize Selecting Visualize gives you a visual representation of the navigation you have set up in the scene window. See below. In the above visualization mode, the arrows indicate how the change of focus is set up for the collection of controls as a group. That means - for each individual UI control - you can see which UI control will get focus next, if the user presses an arrow key when the given control has focus. So in the example shown above, If the \"button\" has focus and the user presses the right arrow key, the first (left-hand) vertical slider will then become focused. Note that the vertical sliders can't be focused-away-from using up or down keys, because they control the value of the slider. The same is true of the horizontal sliders and the left/right arrow keys."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-SelectableTransition.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-SelectableTransition.html",
    "title": "Transition Options | Cacher Game",
    "summary": "Transition Options Within a selectable component there are several transition options depending on what state the selectable is currently in. The different states are: normal, highlighted, pressed and disabled. Transition Options: Function: None This option is for the button to have no state effects at all. Color Tint Changes the colour of the button depending on what state it is in. It is possible to select the colour for each individual state. It is also possible to set the Fade Duration between the different states. The higher the number is, the slower the fade between colors will be. Sprite Swap Allows different sprites to display depending on what state the button is currently in, the sprites can be customised. Animation Allows animations to occur depending on the state of the button, an animator component must exist in order to use animation transition. It’s important to make sure root motion is disabled. To create an animation controller click on generate animation (or create your own) and make sure that an animation controller has been added to the animator component of the button. Each Transition option (except None) provides additional options for controlling the transitions. We'll go into details with those in each of the sections below. Color Tint Property: Function: Target Graphic The graphic used for the interaction component. Normal Color The normal color of the control Highlighted Color The color of the control when it is highlighted Pressed Color The color of the control when it is pressed Disabled Color The color of the control when it is disabled Color Multiplier This multiplies the tint color for each transition by its value. With this you can create colors greater than 1 to brighten the colors (or alpha channel) on graphic elements whose base color is less than white (or less then full alpha). Fade Duration The time taken, in seconds, to fade from one state to another Sprite Swap Property: Function: Target Graphic The normal sprite to use Highlighted Sprite Sprite to use when the control is highlighted Pressed Sprite Sprite to use when the control is pressed Disabled Sprite Sprite to use when the control is disabled Animation Property: Function: Normal Trigger The normal animation trigger to use Highlighted Trigger Trigger to use when the control is highlighted Pressed Trigger Trigger to use when the control is pressed Disabled Trigger Trigger to use when the control is disabled"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Shadow.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Shadow.html",
    "title": "Shadow | Cacher Game",
    "summary": "Shadow The Shadow component adds a simple outline effect to graphic components such as Text or Image. It must be on the same GameObject as the graphic component. Properties Property: Function: Effect Color The color of the shadow. Effect Distance The offset of the shadow expressed as a vector. Use Graphic Alpha Multiplies the color of the graphic onto the color of the effect."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Slider.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Slider.html",
    "title": "Slider | Cacher Game",
    "summary": "Slider The Slider control allows the user to select a numeric value from a predetermined range by dragging the mouse. Note that the similar ScrollBar control is used for scrolling rather than selecting numeric values. Familiar examples include difficulty settings in games and brightness settings in image editors. Properties Property: Function: Interactable Will this component accept input? See Interactable. Transition Properties that determine the way the control responds visually to user actions. See Transition Options. Navigation Properties that determine the sequence of controls. See Navigation Options. Fill Rect The graphic used for the fill area of the control. Handle Rect The graphic used for the sliding \"handle\" part of the control Direction The direction in which the slider's value will increase when the handle is dragged. The options are Left To Right, Right To Left, Bottom To Top and Top To Bottom. Min Value The value of the slider when the handle is at its extreme lower end (determined by the Direction property). Max Value The value of the slider when the handle is at its extreme upper end (determined by the Direction property). Whole Numbers Should the slider be constrained to integer values? Value Current numeric value of the slider. If the value is set in the inspector it will be used as the initial value, but this will change at runtime when the value changes. Events Property: Function: On Value Changed A UnityEvent that is invoked when the current value of the Slider has changed. The event can send the current value as a float type dynamic argument. The value is passed as a float type regardless of whether the Whole Numbers property is enabled. Details The value of a Slider is determined by the position of the handle along its length. The value increases from the Min Value up to the Max Value in proportion to the distance the handle is dragged. The default behaviour is for the slider to increase from left to right but it is also possible to reverse this behavior using the Direction property. You can also set the slider to increase vertically by selecting Bottom To Top or Top To Bottom for the Direction property. The slider has a single event called On Value Changed that responds as the user drags the handle. The current numeric value of the slider is passed to the function as a float parameter. Typical use cases include: Choosing a level of difficulty in a game, brightness of a light, etc. Setting a distance, size, time or angle."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-StandaloneInputModule.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-StandaloneInputModule.html",
    "title": "Standalone Input Module | Cacher Game",
    "summary": "Standalone Input Module The module is designed to work as you would expect a controller / mouse input to work. Events for button presses, dragging, and similar are sent in response to input. The module sends pointer events to components as a mouse / input device is moved around, and uses the Graphics Raycaster and Physics Raycaster to calculate which element is currently pointed at by a given pointer device. You can configure these raycasters to detect or ignore parts of your Scene, to suit your requirements. The module sends move events and submit / cancel events in response to Input tracked via the Input window. This works for both keyboard and controller input. The tracked axis and keys can be configured in the module's inspector. Properties Property: Function: Horizontal Axis Type the desired manager name for the horizontal axis button. Vertical Axis Type the desired manager name for the vertical axis. Submit Button Type the desired manager name for the Submit button. Cancel Button Type the desired manager name for the Cancel button. Input Actions Per Second Number of keyboard/controller inputs allowed per second. Repeat Delay Delay in seconds before the input actions per second repeat rate takes effect. Force Module Active Enable this property to force this Standalone Input Module to be active. Details The module uses: Vertical / Horizontal axis for keyboard and controller navigation Submit / Cancel button for sending submit and cancel events Has a timeout between events to only allow a maximum number of events a second. The flow for the module is as follows Send a Move event to the selected object if a valid axis from the Input window is entered Send a submit or cancel event to the selected object if a submit or cancel button is pressed Process Mouse input If it is a new press Send PointerEnter event (sent to every object up the hierarchy that can handle it) Send PointerPress event Cache the drag handler (first element in the hierarchy that can handle it) Send BeginDrag event to the drag handler Set the 'Pressed' object as Selected in the event system If this is a continuing press Process movment Send DragEvent to the cached drag handler Handle PointerEnter and PointerExit events if touch moves between objects If this is a release Send PointerUp event to the object that received the PointerPress If the current hover object is the same as the PointerPress object send a PointerClick event Send a Drop event if there was a drag handler cached Send a EndDrag event to the cached drag handler Process scroll wheel events"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Text.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Text.html",
    "title": "Text | Cacher Game",
    "summary": "Text The Text control displays a non-interactive piece of text to the user. This can be used to provide captions or labels for other GUI controls or to display instructions or other text. Properties Property: Function: Text The text displayed by the control. Character Font The Font used to display the text. Font Style The style applied to the text. The options are Normal, Bold, Italic and Bold And Italic. Font Size The size of the displayed text. Line Spacing The vertical separation between lines of text. Rich Text Should markup elements in the text be interpreted as Rich Text styling? Paragraph Alignment The horizontal and vertical alignment of the text. Align by Geometry Use the extents of glyph geometry to perform horizontal alignment rather than glyph metrics. Horizontal Overflow The method used to handle the situation where the text is too wide to fit in the rectangle. The options are Wrap and Overflow. Vertical Overflow The method used to handle the situation where wrapped text is too tall to fit in the rectangle. The options are Truncate and Overflow. Best Fit Should Unity ignore the size properties and simply try to fit the text to the control's rectangle? Color The color used to render the text. Material The Material used to render the text. A default text element looks like this: Details Some controls (such as Buttons and Toggles) have textual descriptions built-in. For controls that have no implicit text (such as Sliders), you can indicate the purpose using a label created with a Text control. Text is also useful for lists of instructions, story text, conversations and legal disclaimers. The Text control offers the usual parameters for font size, style, etc, and text alignment. When the Rich Text option is enabled, markup elements within the text will be treated as styling information, so you can have just a single word or short section in boldface or in a different color, say (see the page about Rich Text for details of the markup scheme). Hints See the Effects page for how to apply a simple shadow or outline effect to the text."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Toggle.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Toggle.html",
    "title": "Toggle | Cacher Game",
    "summary": "Toggle The Toggle control is a checkbox that allows the user to switch an option on or off. Properties Property: Function: Interactable Will this component will accept input? See Interactable. Transition Properties that determine the way the control responds visually to user actions. See Transition Options. Navigation Properties that determine the sequence of controls. See Navigation Options. Is On Is the toggle switched on from the beginning? Toggle Transition The way the toggle reacts graphically when its value is changed. The options are None (ie, the checkmark simply appears or disappears) and Fade (ie, the checkmark fades in or out). Graphic The image used for the checkmark. Group The Toggle Group (if any) that this Toggle belongs to. Events Property: Function: On Value Changed A UnityEvent that is invoked when the Toggle is clicked. The event can send the current state as a bool type dynamic argument. Details The Toggle control allows the user to switch an option on or off. You can also combine several toggles into a Toggle Group in cases where only one of a set of options should be on at once. The Toggle has a single event called On Value Changed that responds when the user changes the current value. The new value is passed to the event function as a boolean parameter. Typical use cases for Toggles include: Switching an option on or off (eg, playing music during a game). Letting the user confirm they have read a legal disclaimer. Choosing one of a set of options (eg, a day of the week) when used in a Toggle Group. Note that the Toggle is a parent that provides a clickable area to children. If the Toggle has no children (or they are disabled) then it is not clickable."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-ToggleGroup.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-ToggleGroup.html",
    "title": "Toggle Group | Cacher Game",
    "summary": "Toggle Group A Toggle Group is not a visible UI control but rather a way to modify the behavior of a set of Toggles. Toggles that belong to the same group are constrained so that only one of them can switched on at a time - pressing one of them to switch it on automatically switches the others off. Properties Property: Function: Allow Switch Off Is it allowed that no toggle is switched on? If this setting is enabled, pressing the toggle that is currently switched on will switch it off, so that no toggle is switched on. If this setting is disabled, pressing the toggle that is currently switched on will not change its state. Description The Toggle Group is setup by dragging the Toggle Group object to the Group property of each of the Toggles in the group. Toggle Groups are useful anywhere the user must make a choice from a mutually exclusive set of options. Common examples include selecting player character types, speed settings (slow, medium, fast, etc), preset colors and days of the week. You can have more than one Toggle Group object in the scene at a time, so you can create several separate groups if necessary. Unlike other UI elements, an object with a Toggle Group component does not need to be a child of a Canvas object, although the Toggles themselves still do. Note that the Toggle Group will not enforce its constraint right away if multiple toggles in the group are switched on when the scene is loaded or when the group is instantiated. Only when a new toggle is swicthed on are the others switched off. This means it's up to you to ensure that only one toggle is switched on from the beginning."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-TouchInputModule.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-TouchInputModule.html",
    "title": "Touch Input Module | Cacher Game",
    "summary": "Touch Input Module Note: TouchInputModule is obsolete. Touch input is now handled in StandaloneInputModule. This module is designed to work with touch devices. It sends pointer events for touching and dragging in response to user input. The module supports multitouch. The module uses the scene configured Raycasters to calculate what element is currently being touched over. A raycast is issued for each current touch. Properties Property: Function: Force Module Active Forces this module to be active. Details The flow for the module is as follows: For each touch event If it is a new press Send PointerEnter event (sent to every object up the hierarchy that can handle it) Send PointerPress event Cache the drag handler (first element in the hierarchy that can handle it) Send BeginDrag event to the drag handler Set the 'Pressed' object as Selected in the event system If this is a continuing press Process movement Send DragEvent to the cached drag handler Handle PointerEnter and PointerExit events if touch moves between objects If this is a release Send PointerUp event to the object that received the PointerPress If the current hover object is the same as the PointerPress object send a PointerClick event Send a Drop event if there was a drag handler cached Send a EndDrag event to the cached drag handler"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-VerticalLayoutGroup.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-VerticalLayoutGroup.html",
    "title": "Vertical Layout Group | Cacher Game",
    "summary": "Vertical Layout Group The Vertical Layout Group component places its child layout elements on top of each other. Their heights are determined by their respective minimum, preferred, and flexible heights according to the following model: The minimum heights of all the child layout elements are added together and the spacing between them is added as well. The result is the mimimum height of the Vertical Layout Group. The preferred heights of all the child layout elements are added together and the spacing between them is added as well. The result is the preferred height of the Vertical Layout Group. If the Vertical Layout Group is at its minimum height or smaller, all the child layout elements will also have their minimum height. The closer the Vertical Layout group is to its preferred height, the closer each child layout element will also get to their preferred height. If the Vertical Layout Group is taller than its preferred height, it will distribute the extra available space proportionally to the child layout elements according to their respective flexible heights. For more information about minimum, preferred, and flexible height, see the documentation on Auto Layout. Properties Property: Function: Padding The padding inside the edges of the layout group. Spacing The spacing between the layout elements. Child Alignment The alignment to use for the child layout elements if they don't fill out all the available space. Control Child Size Whether the Layout Group controls the width and height of its child layout elements. Use Child Scale Whether the Layout Group considers the scale of its child layout elements when sizing and laying out elements. Width and Height correspond to the Scale > X and Scale > Y values in each child layout element's Rect Transform component. You cannot animate the Scale values using the Animator Controller Child Force Expand Whether to force the child layout elements to expand to fill additional available space."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/ugui.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/ugui.html",
    "title": "About Unity UI | Cacher Game",
    "summary": "About Unity UI Unity UI is a UI toolkit for developing user interfaces for games and applications. It is a GameObject-based UI system that uses Components and the Game View to arrange, position, and style user interfaces. You cannot use Unity UI to create or change user interfaces within the Unity Editor. Installing Unity UI Unity UI is a core package. A version of it is included in each Unity release. To remove this package, or reinstall it after removal, follow the instructions in the Package Manager documentation. Getting documentation User documentation The Unity UI user documentation is in the Unity Manual. It provides a basic overview of the available components, and a few how-tos. API documentation You can find Class descriptions and API compatibility information in the Scripting API section of this documentation. Getting support For questions and assistance, visit the Unity UI section of the Unity Forum."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/LICENSE.html",
    "title": "| Cacher Game",
    "summary": "Unity UI Copyright © 2015-2020 Unity Technologies ApS (\"Unity\") Licensed under the Unity Companion License for Unity-dependent projects (see https://unity3d.com/legal/licenses/unity_companion_license). _Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/README.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/README.html",
    "title": "Unity UI | Cacher Game",
    "summary": "Unity UI The Unity UI package allows you to create in-game user interfaces fast and intuitively. Prerequisites Unity 2019.2 This package is in development, and requires Unity 2019.2. Getting Started The Unity UI user manual can be found here."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/CHANGELOG.html",
    "title": "Changelog | Cacher Game",
    "summary": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog [1.9.1] - 2023-08-15 Fixed Reverted a breaking change where LudiqScriptableObject._data was marked as private Reverted a breaking change related to IGraphEventListener [1.9.0] - 2023-08-01 Fixed Fixed code for custom nodes being stripped in AOT builds when Managed Stripping Level is set to High UVSB-2439 Fixed OnInputSystemEvent doesn't trigger until Input Vector variates from 0.5 UVSB-2435 Fixed assembly disappearing from Node Library after domain reload. UVSB-2459 Fixed custom inspectors not being generated UVSB-2466 Fixed error when trying to load exceptions for TryCatch node dropdown [2463] (https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2463) Fixed infinite amount of GameObjects created in Prefab mode when performing a null check of a scene variable in editor with an \"OnDrawGizmos\" event UVSB-2453 Removed corrupt mdb which caused the ScriptUpdater to fail UVSB-2360 Fixed Gradient graph variables resetting when entering PlayMode UVSB-2334 Fixed Memory leak after destroying object [UVSB-2427] (https://issuetracker.unity3d.com/product/unity/issues/guid/UVSB-2427) Fixed migration deserialization bug introduced in 1.8.0 UVSB-2492 Added Added a warning icon next to assemblies in Project Settings that reference Editor assemblies UVSB-2382 Changed Script Graph Asset string data is unloaded after deserialization UVSB-2367 AOT Prebuild should take less memory and be faster (Added an optimization to AssetUtility.GetAllAssetsOfType ) [1.8.0] - 2022-11-03 Fixed Fixed graphs being corrupted on deserialization if containing a node whose type cannot be found. UVSB-2332 For nodes that support a default parameter for each of their inputs, detect and fix parameter renames UVSB-1885 Fixed the problem that was preventing link.xml creation when building for Mono backend UVSB-2348 Moved Events/MessageListeners files to a Listeners folder to avoid to exceed some OS path limit Fixed Grandient.mode serialization. Fix available for Unity 2021.3.9f1 or newer UVSB-2356 Fixed Visual Scripting settings now only save to disk when modified Fixed sub graphs being shown with broken connections on first load as of Unity 2021.2 UVSB-2345 Fixed documentation links for Script Graph and State Graphs assets UVSB-2422 Added Added confirmation popup when resetting project settings and editor preferences. UVSB-2353 Added confirmation popup when resetting assemblies/types in project settings. Added Sticky Note for ScriptGraph and StateGraph. Nodes may now have a button which triggers a custom action in their inspector description. Nodes whose type cannot be found are now temporarily converted to dummy nodes until either their original type is defined again or the user replaces them. Support for parameter renaming in code used by API nodes Changed AOTStubs are now generated for all nodes regardless of whether they represent a runtime or editor member UVS-2381 Increased zoom out distance in graphs. [1.7.8] - 2022-02-22 Fixed Handle ReflectionTypeLoadException for TypeUtility to remove warning BOLT-1900 Fixed drag inconsistency in Graph Variables BOLT-2113 Fixed exception after creating a graph from the Welcome Window on Linux BOLT-1828 Fixed the Cooldown node not becoming \"Ready\" when the \"Reset\" port is triggered Fixed exception thrown after changing Hierarchy selection after removing Saved variable BOLT-1919 Fixed old Bolt saved variables not loading when using a build created using a newer version of Visual Scripting BOLT-2052 Fixed a performance issue when using lots of Get/Set Scene variable nodes in an open graph Fixed zooming out in the Graph to be relative to the mouse cursor BOLT-1667 Fixed a compilation error when migrating from Visual Scripting 1.7.6 to 1.7.7 with InputSystem-1.1.1 or below installed. Fixed a performance issue when using lots of Get/Set Scene variable nodes in an open graph Fixed default inspectors for nodes not appearing in the correct position after a connected node is deleted BOLT-1457 Fixed Scene variables drag and drop in graph having wrong scope BOLT-2247 OnDestroy events are now properly triggered in script graphs BOLT-1783 Changed Small optimization of load times involving generic types. Renamed ContinuousNumberDrawer.cs.cs to ContinuousNumberDrawer.cs BOLT-2288 Added TextMeshPro assembly is now added by default in Project Settings/Visual Scripting/Node Library Added highlight to new VS graph drop down items BOLT-2205 Added margins to the UI for project settings and editor preferences [1.7.7] - 2021-11-23 Fixed Fix an NullException error that occurs when creating a Variable right after project initialization. Fix Visual scripting naming in Project Settings and listener. Scene is marked as dirty when a graph is created on a new or exiting GameObject BOLT-1860 Fix Flow Variables missing icon Improved node regeneration speed Fix null texture error when switching platform after a build failure Fix null texture error when entering play mode Fix Linux build failing when run from command line Fix Editor Assemblies not detected correctly at Codebase initialization Fix Wait nodes naming inconsistency BOLT-1886 Fix constant being stripped in IL2CPP builds BOLT-1638 TryConvert now returns true when the conversion was successful BOLT-2105 Fix Input system by using correct Input API BOLT-2078 [1.7.6] - 2021-11-05 Fixed Fixed a regression where AOT Stubs were not being generated correctly, causing AOT builds to fail when run. [1.7.5] - 2021-08-30 Changed Removed unused Preferences Renamed preference \"Update Units Automatically\" to \"Update Nodes Automatically\" Reduced domain reload performance cost of visual scripting to 1ms or less when not actively used by a project Fixed Fixed an issue where uncaught exceptions were thrown in Debug builds of the Windows editor Fixed the missing arrow when the \"Transition End Arrow\" is on. BOLT-1535 Fixed wrong graph is showed after creating script graph form selected object in \"Welcome Screen\" Fixed duplicate variable error. BOLT-1569 Fixed 'ReadOnlySpan<>' does not exist in the namespace 'System'\" error with AOT build. BOLT-1648 Fixed jitter when the fuzzy window is on the bottom of the screen and the user scrolls BOLT-1530 Fixed missing AOT prebuild step when building an IL2CPP project in batchmode BOLT-1649 Restored a public icon set API in UnitPortDescription.cs that was by mistake Fixed il2cpp crash caused by a recursion of the machine states in itself when AOTstubs is generating.BOLT-1656 [1.7.3] - 2021-06-30 Changed Removed unused Preferences Renamed preference \"Update Units Automatically\" to \"Update Nodes Automatically\" Fixed Fixed an issue where uncaught exceptions were thrown in Debug builds of the Windows editor Fixed custom units not appearing in the finder [1.7.2] - 2021-05-17 Changed NotEquals node in non-scalar mode is now consistent with Equals Fixed Fixed long values not preserved in literal nodes. Fixed root icons in breadcrumbs in the graph editor window. BOLT-1290 Fixed graph nodes icons Fixed project settings will not show when looking for graphs Fixed exception when user double clicks on a graph Raise warnings at edit time when a MouseEvent node is used when targeting handheld devices instead of build time. [1.7.1] - 2021-05-07 Removed For performance reasons, the BackgroundWorker attribute is now obsolete and won't have any effect. Use BackgroundWorker.Schedule() directly Changed Renamed the VSSettingsProvider assembly to Unity.VisualScripting.SettingsProvider.Editor Variables Saver GameObject no longer appears until a variable is created or changed. BOLT-1343 Renamed Singleton GameObjects created by Visual Scripting to use \"VisualScripting ---\" names. All internal plugin and product versions have been normalized to use the package version. NotEquals node in non-scalar mode is now consistent with Equals SuperUnits have been renamed into Subgraphs No longer have a hard dependency on any of the following built-in modules: ai, animation, particlesystem, physics, physics2d ScriptMachine is now displayed as \"Script Machine\" instead of \"Flow Machine\" in the Gizmo window. Update, Start, Fixed Update and Late Update nodes have been renamed into On Update, On Start, On Fixed Update and On Late Update. Moved project settings from Assets directory to the ProjectSettings directory in Unity projects Renamed control schemes to Default/Alternate The UI references to 'Unit' were changed to 'Node' without any change to the underlying types Nodes from Timeline, Cinemachine and InputSystem packages are now automatically included, with their assemblies part of the default assemblyOptions. Progress bar titles for initial node generation have been tweaked to better indicate that it is a one-time process Various optimizations to reduce the duration of domain reloads Added Added workflows to create new graphs directly from the Graph Window SetScriptGraph node SetStateGraph node Support for RenamedFrom attribute on enum members GetStateGraphs node GetScriptGraphs node GetScriptGraph node GetStateGraph node HasStateGraph node HasScriptGraph node Fixed Fixed the problem were on Linux the fuzzy window would remains above all others. BOLT-1197 There is no more crash when the user navigates quickly between fuzzy finder levels on Linux BOLT-1197 Fixed variable type turns to null when clicked outside of the graph Fixed rearranging variables, if type is not set, it sets to the type that is bellow it Lots of miscellaneous migration fixes and quality of life changes Fixed unexpected error when exceptions are thrown by flow graph units and caught by the TryCatch unit BOLT-1392 [1.6.1] - 2021-03-30 Fixed Fixed bug caused by Editor API transitioning from private to public [1.6.0] - 2021-03-23 Changed Updated graph migration process [1.5.2] - 2021-03-05 Changed User interface updated Names in different UI elements made to be more consistent with new naming schemes [1.5.1] - 2021-02-23 Added Warn the user when an Input System Package event is referencing an action of the wrong type for that event A warning is raised when adding more than one Input unit in a SuperUnit \"Open\" inspector button and double clicking a graph in the project browser now opens the visual scripting editor A warning is raised when the step's default value of the For unit is set to 0. Fixed Fixed \"Restore to Defaults\" buttons in the Project Settings window Fixed ThreadAbortException when entering Play Mode while searching in the Fuzzy Finder Fixed Visual Scripting Preferences being searchable BOLT-1218 Fixed ScalarAdd unit migration from 1.4.13 to 1.4.14 and above Fixed Open the graph window no longer causes Unity UI to stop processing mouse clicks\" BOLT-1159, Fixed Fuzzy finder no longer blinks when trying to add a node BOLT-1157, Fixed Fuzzy search no longer drops keyboard inputs and respond slowly BOLT-1214, Fixed Fuzzy finder search window no longer remains above all other windows BOLT-1197\" Fixed Dropdown icon is not clipped with TextField under \"Get Variable\" Fixed Scale groups when zoom is not at 1x Fixed graph getting corrupted when adding \"Get Action Map\" unit Fixed node description being sometimes clipped Fixed warnings overflow in the console when deleting and adding a boolean variable in the blackboard Fixed warnings when entering play mode when the \"Script Changes While Playing\" is set to Recompile And Continue Playing Fixed resize cursor rect on group when graph window is zoomed Fixed VisualScripting.Generated folder is removed when removing the VisualScripting package. Fixed error when executing \"Fix Missing Scripts\" in a HDRP project Visual Scripting Preferences spacing has been adjusted to avoid overlaps Fixed rendering of inactive ObjectFields Fixed sidebar (graph inspector/blackboard) resize when a vertical scrollbar is needed Fixed variable type reset to Enum when changing from Enum to GameObject when both Blackbaord and Variables inspector are displayed Help button in the visual scripting Assets and Behaviours inspector now link to the package documentation. FlowMachine type is now back in usable types. Fixed GraphPointerException occurs when nesting graph within itself BOLT-1257 Fixed RenamedFrom attribute does not function correctly on array references to a renamed type BOLT-1149 Fixed error message when custom inspectors are generated Fixed missing succession for Cooldown. Output of Cooldown completed is treated as unentered. BOLT-725 Fixed infinite loop when setting the For unit's step's default value to 0. Instead, the unit won't be executed and the exit output will be triggered directly. Fixed Object Variables tabs not updated when creating a Prefab Fixed console errors when deleting a Prefab with a Visual Script Fixed console errors when editing nested graphs during Play Mode Fixed console errors when opening the standalone profiler window [1.5.1-pre.5] - 2021-01-20 Changed Removed code referring to an unused SceneManagement.PrefabStage API [1.5.1-pre.3] - 2020-12-07 Added Added Visual Scripting as built-in package as of Unity 2021.1 Added New Input System Support. You can import the Input System package, activate the back-end and regenerate units to use. Added AOT Pre-Compile to automatically run when building AOT platforms Improved UI for deprecated built-in nodes Added automatic unit generation the first time the graph window is opened Changed Switched to delivering source instead of pre-built .NET 3/4 assemblies Updated Documentation Renamed assemblies to match Unity.VisualScripting naming scheme (Ex: Bolt.Core -> Unity.VisualScripting.Core) Merged Ludiq.Core and Ludiq.Graphs into Unity.VisualScripting.Core Moved Setup Wizard contents from pop-up on Editor startup to Player Settings. You can change the default settings from \"Player Settings > Visual Scripting\" Renamed \"Assembly Options\" to \"Node Library\" Renamed \"Flow Graph\" to \"Script Graph\" Renamed \"Flow Machine\" to \"Script Machine\" Renamed \"Macro\" graphs to \"Graph\" in machine source configuration and \"GraphAsset\" in Assets Renamed \"Control Input/Output\" to \"Trigger Input/Output\" Renamed \"Value Input/Output\" to \"Data Input/Output\" Updated built-in nodes. The Fuzzy Finder still accepts earlier version names of nodes. Renamed \"Branch\" node to \"If\" Renamed \"Self\" node to \"This\" Deprecated the previous Add unit. The Sum unit has been renamed to Add. Updated Window Naming Changed \"Variables\" window to \"Blackboard\" Changed \"Graph\" window to \"Script Graph\" and \"State Graph\" Updated Bolt Preferences Renamed Bolt Preferences to \"Visual Scripting\" Removed BoltEx Moved settings previously accessed from \"Window > Bolt\" to preferences Renamed Control Schemes from \"Unity/Unreal\" to \"Default/Alternate\" (Neither control scheme currently matches their respective editors' controls and will be updated in a future release) Consolidated Graph editor, Blackboard and Graph Inspector into a single window Updated Third-Party Notices Plugin version information has been removed from the Visual Scripting settings window. This information can be retrieved from the Package Manager. Fixed Corrected UGUI event management to trickle down correctly when the hierarchy contains a Unity Message Listener BOLT-2 Fixed backup failures with large projects BOLT-10 Fixed \"Null Reference\" when opening the Graph Window for the first time BOLT-996 Fixed IL2CPP build crash on startup BOLT-1036 Fixed IL2CPP issue around converting certain managed types BOLT-8 Fixed deserialization issues when undoing graphs with Wait nodes BOLT-679 Fixed \"SelectOnEnum\" node behavior enums containing non-unique values e.g. \"RuntimePlatform\" BOLT-688"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/TableOfContents.html",
    "title": "| Cacher Game",
    "summary": "About Visual Scripting *Configure project settings *[Add or remove available nodes](vs-add-remove-node-library.md) *[Add or remove types](vs-add-remove-type-options.md) *[Create or restore a backup](vs-create-restore-backups.md) *Choose a control scheme *Configure your preferences *Update Visual Scripting *Version control systems *Use Visual Scripting with Unity Cloud Build Basic concepts in Visual Scripting *The interface *Nodes *Graphs *[Subgraphs and State Units](vs-nesting-subgraphs-state-units.md) *[Transitions](vs-transitions.md) *Script Machines and State Machines *Object types *[Custom types](vs-custom-types.md) *Variables Develop application logic with Script Graphs *Create a new graph file *[Create a new blank graph with the Project window](vs-create-graph-project-window.md) *[Create a new unassigned graph with the empty graph creation flow](vs-create-graph-unassigned-flow.md) *[Create and assign a graph to an existing GameObject](vs-create-graph-assign-existing-gameobject.md) *[Create and assign a graph to a new GameObject](vs-create-graph-assign-new-gameobject.md) *[Create a graph on a Script Machine or State Machine](vs-create-graph-on-machine.md) *Attach a graph file to a Script Machine or State Machine *Open a graph file *[Add a node to a Script Graph](vs-add-node-to-graph.md) *[Connect nodes in a Script Graph](vs-creating-connections.md) *[Create and add a variable to a Script Graph](vs-add-variable-graph.md) *[Create node groups](vs-groups.md) *[Add comments to a graph](vs-sticky-notes.md) *Add a Subgraph to a Script Graph *[Add a Trigger or Data port to a Script Graph](vs-nesting-add-triggers-data-graph.md) *Add a State Unit to a Script Graph *Custom Events *[Add a Custom Event node](vs-add-custom-event-node.md) *[Add a Trigger Custom Event node](vs-add-custom-event-node-trigger.md) *Capture user input in an application *[Capture input using the Input Manager](vs-capturing-player-inputs-old.md) *[Add and configure a Player Input component](vs-capture-player-input-add-component.md) *[Capture input using the Input System package](vs-capturing-player-inputs-new.md) *Use relations to debug *[Predictive and live debugging](vs-debugging.md) *[Working with debug messages](vs-debug-messages.md) *Live edit *[Live edit during runtime](vs-live-edit-runtime.md) Develop logic transitions with state graphs *Create a new state *Create a transition between states Advanced customization and development *Refactor a C# script with Visual Scripting *[Add the RenamedFrom attribute to a C# script](vs-refactor-add-attribute.md) *Custom C# nodes *[Create a new simple Custom C# node](vs-create-custom-node-empty.md) *[Add ports to your Custom C# node](vs-create-custom-node-add-ports.md) *[Add logic to your Custom C# node](vs-create-custom-node-add-logic.md) *[Add relations to your Custom C# node](vs-create-custom-node-add-relations.md) *[Add documentation to your Custom C# node](vs-create-custom-node-add-docs.md) *[Custom C# node attributes reference](vs-create-custom-node-attributes-reference.md) *Create a Custom Scripting Event node *[Create a Custom Scripting Event Sender node](vs-create-own-custom-event-send-node.md) *[Trigger a Custom Scripting Event from a C# script](vs-create-own-custom-event-node-trigger-code.md) *[Listen to a Custom Scripting Event from a C# script](vs-create-own-custom-event-listen-code.md) *Use a custom type *[Add the Inspectable attribute to a custom type](vs-add-inspectable-attribute-custom-types.md) *[Create a custom PropertyDrawer for a custom type](vs-create-custom-drawer.md) Node reference *This node *Control node *Time node *Events *[Event nodes](vs-events-reference.md) *[Input Event nodes](vs-input-nodes.md) *[On Input System Event Button](vs-nodes-events-input-system-button.md) *[On Input System Event Float](vs-nodes-events-input-system-float.md) *[On Input System Event Vector 2](vs-nodes-events-input-system-vector2.md) *[On Button Input](vs-nodes-events-on-button-input.md) *[On Keyboard Input](vs-nodes-events-on-keyboard-input.md) *[On Mouse Down](vs-nodes-events-on-mouse-down.md) *[On Mouse Drag](vs-nodes-events-on-mouse-drag.md) *[On Mouse Enter](vs-nodes-events-on-mouse-enter.md) *[On Mouse Exit](vs-nodes-events-on-mouse-exit.md) *[On Mouse Input](vs-nodes-events-on-mouse-input.md) *[On Mouse Over](vs-nodes-events-on-mouse-over.md) *[On Mouse Up As Button](vs-nodes-events-on-mouse-up-button.md) *[On Mouse Up](vs-nodes-events-on-mouse-up.md) *Variable node *Nulls node *Formula node *Nesting *[Input node](vs-nesting-input-node.md) *[Output node](vs-nesting-output-node.md) *[State Unit node](vs-nesting-state-unit-node.md) *[Subgraph node](vs-nesting-subgraph-node.md) *Script graph nodes *State graph nodes Developer's guide Known Issues"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/index.html",
    "title": "About Visual Scripting | Cacher Game",
    "summary": "About Visual Scripting Use Visual Scripting to create logic for games or applications without hand-coded C# scripts. Visual Scripting uses visual, node-based graphs, which both programmers and non-programmers use to design final logic or create prototypes. Visual Scripting also has an API that programmers can use for more advanced tasks, or to create custom nodes for other team members. Visual Scripting nodes can represent functions, operators, and variables. Connect these nodes from their ports with edges to design your logic visually. Installation From Unity Editor version 2021.1 onward, Visual Scripting is installed by default as a package. For more information on packages, see the Packages section in the Unity User Manual. For earlier versions of Unity, including 2019 LTS and 2020 LTS, you must install the Visual Scripting package from the Unity Asset Store. Configure Visual Scripting Note To use Visual Scripting in a project for the first time, you must initialize it from the Editor's Project Settings window. To get started with Visual Scripting, configure your project settings and configure your preferences. Choose a control scheme Learn the common keyboard shortcuts and choose a control scheme that suits your needs. Update Visual Scripting Learn how to update Visual Scripting and create and restore backups. System requirements Visual Scripting has no external dependencies."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/custom-c-nodes/vs-ff-add-node.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/custom-c-nodes/vs-ff-add-node.html",
    "title": "ff-add-node | Cacher Game",
    "summary": "Right-click anywhere in the Graph Editor to open the fuzzy finder. Then, select your node in the fuzzy finder to add it to your graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/custom-c-nodes/vs-open-graph-w-node.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/custom-c-nodes/vs-open-graph-w-node.html",
    "title": "open-graph-w-node | Cacher Game",
    "summary": "Open a Script Graph where you've already added your node."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/custom-c-nodes/vs-tasks-note-end.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/custom-c-nodes/vs-tasks-note-end.html",
    "title": "vs-tasks-note-end | Cacher Game",
    "summary": "The examples below are based on the previous examples for a Custom C# node. For more information, see Create a new simple Custom C# node."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/custom-events/vs-right-click-project.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/custom-events/vs-right-click-project.html",
    "title": "right-click-project | Cacher Game",
    "summary": "Right-click a folder in the Project window's folder list or anywhere in the Project window's preview pane."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/custom-events/vs-tasks-note-end.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/custom-events/vs-tasks-note-end.html",
    "title": "tasks-note-end | Cacher Game",
    "summary": "The examples below are based on the previous example to create a Custom Scripting Event node. For more information, see Create a Custom Scripting Event node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/input-manager/nodes-desc-end.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/input-manager/nodes-desc-end.html",
    "title": "nodes-desc-end | Cacher Game",
    "summary": "It triggers the next node connected to it after the action occurs in the application. It doesn't send or receive any other data."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/input-manager/nodes-input-output-trigger.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/input-manager/nodes-input-output-trigger.html",
    "title": "nodes-input-output-trigger | Cacher Game",
    "summary": "Trigger Output Trigger The control output port. Make a connection to specify what Visual Scripting should do after the configured Input event occurs in your application."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/input-manager/nodes-note-manual.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/input-manager/nodes-note-manual.html",
    "title": "nodes-note-manual | Cacher Game",
    "summary": "node is an Input Manager node. For more information about how to use the Input Manager with Visual Scripting, see Capture user input in an application."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/input-system/nodes-input-action-change.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/input-system/nodes-input-action-change.html",
    "title": "nodes-input-action-change | Cacher Game",
    "summary": "Name Type Description Input Action Change Type Input Action Change Option Set an Input Action Change Type to choose the interaction type that triggers the node. On Pressed The node triggers when a user presses the button from the selected Input Action input asset. On Hold The node triggers when a user holds the button from the selected Input Action input asset. On Released The node triggers when a user releases the button from the selected Input Action input asset."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/input-system/nodes-input-system-output-trigger-port.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/input-system/nodes-input-system-output-trigger-port.html",
    "title": "nodes-input-system-output-trigger-port | Cacher Game",
    "summary": "Trigger Output Trigger The control output port. Make a connection to specify what Visual Scripting does after the configured Player Input event, such as a button press, occurs in the application."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/input-system/nodes-input-system-ports.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/input-system/nodes-input-system-ports.html",
    "title": "nodes-input-system-ports | Cacher Game",
    "summary": "Name Type Description Target Player Input The Player Input component that Visual Scripting uses to display a list of input actions. The default is This, which is the Player Input component attached to the GameObject where Visual Scripting runs the Script Graph. You can also connect a node that outputs a Player Input component. Input Action Input Action An input action. Use the dropdown to select an input action from the Player Input component specified in Player Input, or connect a node that outputs an input action."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/input-system/nodes-note-package.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/input-system/nodes-note-package.html",
    "title": "nodes-note-package | Cacher Game",
    "summary": "is an Input System package node. For more information about how to use the Input System package in Visual Scripting, see Capture user input in an application."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/nodes-additional-settings.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/nodes-additional-settings.html",
    "title": "nodes-additional-settings | Cacher Game",
    "summary": "node has additional settings. Access these settings from the Graph Inspector:"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/nodes-controls.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/nodes-controls.html",
    "title": "nodes-controls | Cacher Game",
    "summary": "node has the following controls:"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/nodes-coroutine.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/nodes-coroutine.html",
    "title": "nodes-coroutine | Cacher Game",
    "summary": "Coroutine Toggle Enable Coroutine if you want Visual Scripting to run this node and any of its connected nodes as a coroutine. Coroutine nodes don't execute all their code in a single frame, so they can spread an effect over several frames. Coroutines can also help optimize your code. For more information on coroutines, see the Unity User Manual section on Coroutines."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/nodes-inputs.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/nodes-inputs.html",
    "title": "nodes-inputs | Cacher Game",
    "summary": "node has the following input ports:"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/nodes-outputs.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/nodes-outputs.html",
    "title": "nodes-outputs | Cacher Game",
    "summary": "node has the following output ports:"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/nodes-related.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/nodes-related.html",
    "title": "nodes-related | Cacher Game",
    "summary": "The following nodes are related or similar to the"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/nodes-single-control.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/nodes-single-control.html",
    "title": "nodes-single-control | Cacher Game",
    "summary": "node has one control:"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/nodes-single-input.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/nodes-single-input.html",
    "title": "nodes-single-input | Cacher Game",
    "summary": "node has one input port:"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/nodes-single-output.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/nodes-single-output.html",
    "title": "nodes-single-output | Cacher Game",
    "summary": "node has one output port:"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-blackboard-tip.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-blackboard-tip.html",
    "title": "blackboard-tip | Cacher Game",
    "summary": "Tip If the Blackboard isn't visible in the Graph window, select Blackboard () from the toolbar."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-create-c-script-project.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-create-c-script-project.html",
    "title": "create-c-script | Cacher Game",
    "summary": "Go to Create > C# Script."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-graph-inspector-tip-html.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-graph-inspector-tip-html.html",
    "title": "graph-inspector-tip-html | Cacher Game",
    "summary": "TIP If the Graph Inspector isn't visible in the Graph window, select Graph Inspector () from the toolbar."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-graph-inspector-tip.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-graph-inspector-tip.html",
    "title": "graph-inspector-tip | Cacher Game",
    "summary": "Tip If the Graph Inspector isn't visible in the Graph window, select Graph Inspector () from the toolbar."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-open-existing-external-code.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-open-existing-external-code.html",
    "title": "open-existing-external-code | Cacher Game",
    "summary": "Double-click the C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-open-fuzzy-finder.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-open-fuzzy-finder.html",
    "title": "open-fuzzy-finder | Cacher Game",
    "summary": "Right-click anywhere in the Graph Editor to open the fuzzy finder."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-open-graph-inspector.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-open-graph-inspector.html",
    "title": "open-graph-inspector | Cacher Game",
    "summary": "Select Graph Inspector () from the toolbar."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-open-graph.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-open-graph.html",
    "title": "open-graph | Cacher Game",
    "summary": "Open a graph file in the Graph window."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-open-hierarchy-window.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-open-hierarchy-window.html",
    "title": "open-hierarchy-window | Cacher Game",
    "summary": "Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-open-inspector-window.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-open-inspector-window.html",
    "title": "open-inspector-window | Cacher Game",
    "summary": "With the GameObject selected in the Hierarchy window, go to Window > General > Inspector, or press Ctrl+3 (macOS: Cmd+3) to open the Inspector window."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-open-new-external-code.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-open-new-external-code.html",
    "title": "open-new-external-code | Cacher Game",
    "summary": "Double-click the new C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-open-project-settings.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-open-project-settings.html",
    "title": "open-project-settings | Cacher Game",
    "summary": "Go to Edit > Project Settings."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-open-project-window.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-open-project-window.html",
    "title": "open-project-window | Cacher Game",
    "summary": "Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-open-state-menu.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-open-state-menu.html",
    "title": "open-state-menu | Cacher Game",
    "summary": "With a State Graph open in the Graph window, right-click on an empty space in the Graph Editor to open the context menu."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-regen-node-library.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-regen-node-library.html",
    "title": "regen-node-library | Cacher Game",
    "summary": "Follow the process described in Configure project settings to regenerate your Node Library."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-return-unity.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-return-unity.html",
    "title": "return-unity | Cacher Game",
    "summary": "Return to the Unity Editor."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-save-script.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-save-script.html",
    "title": "save-script | Cacher Game",
    "summary": "Save your script file."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-visual-scripting-window.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-visual-scripting-window.html",
    "title": "visual-scripting-window | Cacher Game",
    "summary": "Go to Window > Visual Scripting > Visual Scripting Graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-with-graph-open-ff.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/snippets/vs-with-graph-open-ff.html",
    "title": "with-graph-open-ff | Cacher Game",
    "summary": "With a Script Graph open in the Graph window, right-click on an empty space in the Graph Editor to open the fuzzy finder."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-add-custom-event-node-trigger.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-add-custom-event-node-trigger.html",
    "title": "Add a Custom Event Trigger node | Cacher Game",
    "summary": "Add a Custom Event Trigger node You can use a Custom Event Trigger node to trigger a matching Custom Event node in your application. For more information on custom Events, see Custom Events. Note Before you add a Custom Event Trigger node, you must add and configure a Custom Event node in a Script Graph. For more information, see Add a Custom Event node. To add a Custom Event Trigger node to a Script Graph: Open the Script Graph where you want to add a Custom Event Trigger node. This can be the same graph or a different graph from where you added a Custom Event node. Right-click anywhere in the Graph Editor to open the fuzzy finder.. Go to Events. Select the Custom Event Trigger node to add it to the graph. In the Name input port's field, enter the name of the Custom Event node you want to trigger, exactly as it appears on the Custom Event node, through one of the following methods: Enter the name in the field next to the Name input port. Attach a node that outputs the name as a string value to the Name input port. In the GameObject field, indicated by the GameObject icon on the node, specify the GameObject that you want to trigger your Event. This doesn't have to be the same GameObject as the Custom Event node. Do one of the following: Select the object picker (circle icon) and select the GameObject. Attach a node to the field's data input port that outputs the GameObject. Leave the field as the default value of This to use the GameObject from your currently open Script Graph's Script Machine. In the Arguments field, enter the number from your Custom Event node's Arguments field. Note All arguments on a Custom Event Trigger node must receive input values, even if the Custom Event node doesn't use those arguments. Otherwise, Visual Scripting displays an error in the Graph Inspector for the Custom Event Trigger node. Next steps You can add more nodes and connect them to create the trigger logic for your Custom Event node in the graph. You can also create a Custom Scripting Event node."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-add-custom-event-node.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-add-custom-event-node.html",
    "title": "Add a Custom Event node | Cacher Game",
    "summary": "Add a Custom Event node You can add a Custom Event node to a Script Graph to trigger specific logic after an Event occurs. For more information about custom Events, see Custom Events. Note To use a Custom Event node, you must configure the node with the following instructions, then add a Custom Event Trigger node to your graph. For more information on how to add a Custom Event Trigger node, see Add a Custom Event Trigger node To add a Custom Event node to a Script Graph: Open the Script Graph where you want to add a Custom Event node. Right-click anywhere in the Graph Editor to open the fuzzy finder.. Go to Events. Select the Custom Event node to add it to your graph. In the GameObject field, indicated by the GameObject icon on the node, choose the GameObject where you want to create the Event. Do one of the following: Select the object picker (circle icon), and select a GameObject. Attach a node to the field's data input port that outputs a GameObject. Leave the field as the default value of This to use the GameObject where you attached your Script Graph to a Script Machine. In the Arguments field, enter the number of arguments you want the custom Event to receive and pass to other nodes in your graph. The default value is 0. If you enter a number greater than 0, Visual Scripting adds the corresponding number of Output ports to the Custom Event node. Note Visual Scripting labels your first argument as Arg. 0. Enter a unique name for the custom Event through one of the following methods: Enter a name in the field next to the Name input port. Attach a node that outputs a string value to the Name input port. In the following example, a custom Event called On Damage returns a single argument when it's triggered in a Script Graph. Next steps After you add a Custom Event node to your graph, add more nodes to your graph or connect nodes to specify what happens after your Event triggers. Then, add a Custom Event Trigger node to specify when to trigger the custom Event in your graph. To create more complex logic for your custom Event, you can also create a Custom Scripting Event node."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-add-inspectable-attribute-custom-types.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-add-inspectable-attribute-custom-types.html",
    "title": "Add the Inspectable attribute to a custom type | Cacher Game",
    "summary": "Add the Inspectable attribute to a custom type If you have access to the source code for a custom type, add the [Inspectable] attribute to its fields and classes. The [Inspectable] attribute makes these fields and classes accessible to the Inspector window in the Unity Editor. You don't need to create a custom PropertyDrawer as Unity generates a basic UI for the custom type. For more information about how to use custom types in Visual Scripting, see Use a custom type or Custom types To add the [Inspectable] attribute to the source code for a custom type: Double-click the C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual. In your external editor, on a line above your public class definition, add the [Inspectable] attribute. On a line above the properties you want to have available in the Unity Inspector, add the [Inspectable] attribute. Follow the process described in Configure project settings to regenerate your Node Library. The following is an example of a public class, with fields name and amount that are accessible and can be modified through Unity's Inspector window. ```csharp using System; using UnityEngine; using Unity.VisualScripting; [Inspectable] public class MyClass { [Inspectable] public string name; [Inspectable] public int amount; public string dontShowThis; } ```"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-add-node-to-graph.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-add-node-to-graph.html",
    "title": "Add a node to a Script Graph | Cacher Game",
    "summary": "Add a node to a Script Graph All logic in a Script Graph starts with a node. Tip Depending on the method you used to create your Script Graph, you might already have two Event nodes in your graph: Start and Update. For more information on these nodes, see Events node. To add a node to a Script Graph: With a Script Graph open in the Graph window, right-click on an empty space in the Graph Editor to open the fuzzy finder. In the fuzzy finder, enter a search term into the Search bar or select a category from the list to find related nodes. Categories have an arrow (>) at the end of their entry in the fuzzy finder. Select an entry in the fuzzy finder to add that node to your Script Graph. Visual Scripting adds the node to your Script Graph at the location where you opened the fuzzy finder. Next steps After you've added a node to a graph, you can add additional nodes and connect nodes in a Script Graph to create logic for your application. You can also add a Sticky Note to add comments to a graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-add-remove-node-library.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-add-remove-node-library.html",
    "title": "Add or remove available nodes | Cacher Game",
    "summary": "Add or remove available nodes Visual Scripting has a set of default assemblies and generated nodes for Unity features. Add more assemblies through the Visual Scripting Node Library in your Project Settings. Assemblies are special files that contain the code for the feature you want to use. Visual Scripting can generate nodes from assemblies in packages and third-party assets. To use a new package or third-party asset in Visual Scripting, you must import it into Unity. For more information on how to add packages to Unity, see Adding and removing in the Unity User Manual. For more information on how to add third-party assets to Unity, see Importing assets in the User Manual. Add assemblies and nodes to the Node Library To add a new assembly and its nodes to the Node Library: Go to Edit > Project Settings. Select Visual Scripting. Expand Node Library. At the end of the assemblies list, select Add (+). In the new assembly entry, select (No Assembly) to open the Assembly menu. Select an available assembly from the Assembly menu. Visual Scripting adds the assembly and its nodes to the Node Library. To use the nodes in your project, add their types to your Type Options and regenerate the Node Library. Remove assemblies and nodes from the Node Library To remove an assembly and its nodes from your Node Library: Go to Edit > Project Settings. Select Visual Scripting. Expand Node Library. In the assemblies list, locate the entry for the assembly you want to remove. Select Remove (-). Visual Scripting removes the assembly and its nodes from the Node Library. To remove the nodes from the fuzzy finder and your project, regenerate the Node Library. You might also want to remove their types from your Type Options."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-add-remove-type-options.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-add-remove-type-options.html",
    "title": "Add or remove types | Cacher Game",
    "summary": "Add or remove types Type Options specify which node inputs and outputs Visual Scripting supports. After you add a new assembly, you must add types specific to those nodes to your Type Options. Add types to make the nodes and their types accessible in the fuzzy finder and the Blackboard. You can't use a node that has an input or output type that isn't listed in your Type Options. Add a type to your Type Options To add a new type to your Type Options list: Go to Edit > Project Settings. Select Visual Scripting. Expand Type Options. At the end of the types list, select Add (+). In the new type entry, select (No Type) to open the Type menu. Select an available type from the Type menu. Visual Scripting adds the new type to your Type Options. To use nodes with the type in your project, regenerate your Node Library. Remove a type from your Type Options To remove a type from your Type Options list: Go to Edit > Project Settings. Select Visual Scripting. Expand Type Options. In the types list, locate the entry for the type you want to remove. Select Remove (-). Visual Scripting removes the type from your Type Options. To make sure that your change appears in your project, regenerate your Node Library."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-add-subgraph.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-add-subgraph.html",
    "title": "Add a Subgraph to a Script Graph | Cacher Game",
    "summary": "Add a Subgraph to a Script Graph A Subgraph is a Script Graph nested inside of another Script Graph. A Subgraph appears as a single node inside the parent Script Graph. You can add a Subgraph to a Script Graph in two ways: create an entirely new Script Graph, or add an existing Script Graph file. Add a new Subgraph to a Script Graph To add a new blank Subgraph to an existing Script Graph: With a Script Graph open in the Graph window, right-click on an empty space in the Graph Editor to open the fuzzy finder.. Go to Nesting and select Subgraph. In the Graph Inspector, choose the Source for your Subgraph: Embed: The Subgraph only exists on the Subgraph node. You can only modify the Subgraph from the node in its parent graph. Graph: The Subgraph exists in a separate file. You can modify the Subgraph outside of its parent graph and reuse the graph in other areas of your application. Tip If the Graph Inspector isn't visible in the Graph window, select Graph Inspector () from the toolbar. If you chose Graph, select New, enter a name for your graph file, and choose where you want to save it. Select Save. Add an existing Script Graph as a Subgraph To add an existing graph file as a Subgraph in a Script Graph: Note You can't nest a Script Graph as a Subgraph in its own graph file. With a Script Graph open in the Graph window, right-click on an empty space in the Graph Editor to open the fuzzy finder.. Go to Nesting and select Subgraph. In the Graph Inspector, set your Source to Graph. Tip If the Graph Inspector isn't visible in the Graph window, select Graph Inspector () from the toolbar. In the Graph field, select the object picker (circle icon) and choose a compatible Script Graph from your project. You can also click and drag a Script Graph file from your Project window and drop it into the Graph field. Tip For a faster way to add a Script Graph as a Subgraph, click and drag the Script Graph from your Project window into the Graph Editor to automatically create a Subgraph node. Next steps To open your new Subgraph for editing, select Edit Graph. Once you've added a Subgraph to your Script Graph, define its Input and Output Triggers and Input and Output Data. For more information, see Add a Trigger or Data port to a Script Graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-add-triggers-data-graph.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-add-triggers-data-graph.html",
    "title": "Add a Trigger or Data port to a Script Graph | Cacher Game",
    "summary": "Add a Trigger or Data port to a Script Graph When you use a Script Graph as a Subgraph, you can pass data and logic to it from its parent graph. Add and define ports on your graph to determine which logic and data you can pass to it. To add a Trigger Input, Trigger Output, Data Input, or Data Output port to a Script Graph: If you haven't already, open the Script Graph you want to edit in the Graph window. With no nodes selected, in the Graph Inspector, select Add (+) under the port type you want to add to your Script Graph: Trigger Inputs, Trigger Outputs, Data Inputs, or Data Outputs. Tip If the Graph Inspector isn't visible in the Graph window, select Graph Inspector () from the toolbar. In the Key field, enter a unique key name for your port. This name can't be the same as any existing ports on your currently selected Script Graph. (Optional) In the Label field, enter any text you want to appear as a label for the port on a Subgraph, Input, or Output node for your current Script Graph. Otherwise, Visual Scripting uses the value in the Key field as a label. (Optional) In the Summary field, enter any text that you want to appear as a brief summary of the port in the Graph Inspector when you select a Subgraph, Input, or Output node for your current Script Graph. (Optional) Select Hide Label to hide the label for the port on any Subgraph, Input, or Output node for your current Script Graph. (Data Inputs and Data Outputs Only) Select the Type list to open the Type menu and select a type for the data your port should accept. (Data Inputs Only) Select Has Default Value to enable the Default Value field and specify a default value for your Script Graph's Data Input, if your graph doesn't receive another input while it runs. Next steps You can now specify triggers and data for your Script Graph when you use it as a Subgraph in another Script Graph. For more information on each port type, see Subgraph inputs and outputs. For more information on adding a Script Graph as a Subgraph, see Add a Subgraph to a Script Graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-add-variable-graph.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-add-variable-graph.html",
    "title": "Create and add a variable to a Script Graph | Cacher Game",
    "summary": "Create and add a variable to a Script Graph You can create and add a variable to a Script Graph in one of two ways: use the Graph window's Blackboard, or add a node to a graph. Note You can't add a Flow variable to a graph from the Blackboard. For more information on Flow variables, see Variables. Create and add a new variable through the Blackboard To create a new variable in the Blackboard and add it to a graph: With a graph open in the Graph window, open the Blackboard. In the Blackboard, select the scope for the variable you want to add: Graph, Object, Scene, App, or Saved. For more information on variable scopes and when you can use each scope in your graph, see Variables. In the (New Variable Name) field, enter a name for the new variable. Do one of the following: Press Enter. Select the Add Variable (+) button. In the Type list, select the data type for your variable. For more information on types, see Object types. In the Value field, enter or modify the default value for your variable. To add the node to your graph, click and drag from the Handle (=) on the variable's definition in the Blackboard into the Graph Editor. Visual Scripting adds a new Get Variable node for your variable to your graph. Create and add a new variable through the Graph Editor To create a Flow variable or another new variable directly in a graph: With a Script Graph open in the Graph window, right-click on an empty space in the Graph Editor to open the fuzzy finder. Select the Variables category. Select the scope for the variable you want to add: Flow, Graph, Object, Scene, Application, or Saved. For more information on variable scopes and when you can use each scope in a graph, see Variables. Select the Set <Scope> Variable node, where <Scope> is the scope you selected in the previous step. Visual Scripting adds a new Set Variable node to the graph. In the Name field, enter a name for the new variable. (Object variables only) In the GameObject field, indicated by a GameObject icon on the node, specify the GameObject where you want to create the variable. Do one of the following: Select the object picker (circle icon) and select a GameObject. Attach a node to the field's data input port that outputs a GameObject. Leave the field as the default value of This to use the GameObject where you attached the Script Graph to a Script Machine. To set a default value for your variable, connect another node that outputs the value you want to the Set Variable node's data input port. Next steps After you've added a variable to your graph, you can add nodes, create node groups, or add a Subgraph. You can also add a Sticky Note to add comments to a graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-advanced-topics-intro.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-advanced-topics-intro.html",
    "title": "Advanced customization and development | Cacher Game",
    "summary": "Advanced customization and development Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. You can customize and extend the basic functionality of Visual Scripting using C# code. Create a Script Graph node With a C# script, you can create your own Custom C# node and add more functionality to your Visual Scripting graphs. Create a custom event node You can trigger logic in your application with a custom event node. Add custom types to Visual Scripting Add your own custom classes and types in Visual Scripting to store information more efficiently."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-aot.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-aot.html",
    "title": "Use Visual Scripting with Unity Cloud Build | Cacher Game",
    "summary": "Use Visual Scripting with Unity Cloud Build At build time, Unity removes any code that isn't used by a project to reduce build size. This can cause problems with Visual Scripting because Unity can remove code that's necessary for Script Graphs to run in a project. For versions 1.7.x, Visual Scripting generates an AotStubs.cs file, which stores the Unity APIs that graphs use. With the AotStubs.cs file, Unity doesn't remove any Unity APIs used in a graph from a build. You can generate this file when you create a build of a project. Builds through Unity Cloud Build can fail because Cloud Build prevents domain reload between the prebuild and build phases of the project. Without a domain reload, the build doesn't include the generated AotStubs.cs file. For more information about domain reload, see Domain Reloading in the Unity User Manual. To build a Visual Scripting project with Cloud Build, do the following: Build the project locally for your desired platform. For more information on how to build a project, see the relevant section for each platform in Platform development in the User Manual. After the build, do one of the following: Open the project files in the system file explorer. Open the Project window in the Unity Editor. In the project files, go to Assets > Unity.VisualScripting.Generated > VisualScripting.Core. Locate the AotStubs.cs file. Add the AotStubs.cs file to your source control system. Your Cloud Build settings might automatically trigger a new build of the project after you commit the AotStubs.cs file. For more information about version control systems and Cloud Build, see Unity Cloud Build in the User Manual."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-attach-graph-machine.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-attach-graph-machine.html",
    "title": "Attach a graph file to a Script Machine or State Machine | Cacher Game",
    "summary": "Attach a graph file to a Script Machine or State Machine To use a Script Graph or State Graph file in your project, you must attach it to a Script Machine or State Machine. A Script Machine or State Machine is a component. Components attach to GameObjects, and help define their behavior. For more information on components and GameObjects, see Using components or GameObjects in the Unity User Manual. Add a Script Machine or State Machine component to a GameObject Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window. In the Hierarchy window, select a GameObject where you'd like to add a Script Machine or State Machine. With the GameObject selected in the Hierarchy window, go to Window > General > Inspector, or press Ctrl+3 (macOS: Cmd+3) to open the Inspector window. In the GameObject's Inspector window, select Add Component. The Components menu opens. Do one of the following: To add a Script Machine or State Machine, in the Components menu, go to Visual Scripting and select Script Machine or State Machine. Use the search bar to find the Script Machine or State Machine component. The new Script Machine or State Machine component appears in the Inspector window for the GameObject: Attach a graph file to the Script Machine or State Machine In the Inspector window, locate your Script Machine or State Machine component. Set the Source to Graph. Do one of the following: In the Graph field, select the object picker (circle icon) and choose a compatible graph file from your project. Click and drag a file from your Project window and drop it into the Graph field. For more information on how to create Script or State Graphs, see Create a new graph file. Next steps After you attach a graph to a Script Machine or State Machine, you can open the graph and edit. For more information, see Open a graph file."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-basic-concepts.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-basic-concepts.html",
    "title": "Basic concepts in Visual Scripting | Cacher Game",
    "summary": "Basic concepts in Visual Scripting Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. In this section, you can find information about basic concepts in Visual Scripting. These concepts will help you create logic for your application. The interface The Visual Scripting interface starts with the Graph window. For more information, see The interface. Nodes Nodes are the most basic part of creating scripts in Visual Scripting. For more information, see Nodes. Graphs and Machines Graphs contain the visual representations of logic in your application. To use a graph, you attach it to a Script Machine or State Machine on a GameObject. For more information about graphs, see Graphs. For more information about Script Machines and State Machines, see Script Machines and State Machines. Variables Variables act as a container for a piece of information that might change as your application runs. For more information, see Variables. Object types Variables, data, and objects in Visual Scripting all have a specific type. For more information, see Object types."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-capture-player-input-add-component.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-capture-player-input-add-component.html",
    "title": "Add and configure a Player Input component | Cacher Game",
    "summary": "Add and configure a Player Input component To use the Input System package with Visual Scripting, add a Player Input component to the same GameObject as the Script Graph and create an Input Actions asset. You must add the Player Input component and create the Input Actions asset before you create the Script Graph. Note If the Input System package isn't installed in your project, follow the Input System documentation's Installation guide to install the package. Go to Window > Package Manager to check your installed packages. To add a Player Input component to a GameObject: Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window. In the Hierarchy window, select the GameObject that you want to move with the Script Graph. With the GameObject selected in the Hierarchy window, go to Window > General > Inspector, or press Ctrl+3 (macOS: Cmd+3) to open the Inspector window. Select Add Component. The Components menu opens. In the Components menu, do one of the following: Go to Input. In the Search bar, enter Player Input. Select the Player Input component to add it to the GameObject. Add an Input Actions asset to the Player Input component. Do one of the following: Create a new Input Actions asset. Use an existing Input Actions asset. Create a new Input Actions asset Select Create Actions. Choose a location in your project to save the Input Actions asset. Select Save. Use an existing Input Actions asset Do one of the following: Click the Actions field's object picker (circle icon) and in the SelectInputActionAsset window, select the asset. Click and drag a file from your Project window and drop it into the Actions field. Next steps To configure the available options on a Player Input component, see GameObject components for input in the Input System package documentation. To configure an Input Actions asset, see Input Action Assets in the Input System package documentation. To create a simple Script Graph to capture input with Visual Scripting, see Capture input with the Input System package. Additional resources Capture user input in an application Capture input with the Input System package Input event nodes"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-capture-player-input.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-capture-player-input.html",
    "title": "Capture user input in an application | Cacher Game",
    "summary": "Capture user input in an application You can capture input from a user's input device to make your application interactive. Visual Scripting can use either the Input Manager or the Input System package to capture input data in a Script Graph. Use the Input System package The Input System package captures input in Unity applications. It uses any input device and replaces Unity's Input Manager. To install the Input System package, see the Installation guide in the Input System package documentation. To check if the Input System package is installed, go to Window > Package Manager. For more information on the Package Manager and managing packages in projects, see the Packages section in the Unity User Manual. Input System package prerequisites To use the Input System package in a project, do the following: Install the package. For more information, see the Packages section in the User Manual. Regenerate your Node Library to include the Input System package nodes. For more information, Configure project settings. In your Player Project Settings, set Active Input Handling to Input System Package (New) or Both. For more information on this setting, see Standalone Player settings in the User Manual. Create an Input System settings asset. Go to Edit > Project Settings and select Input System Package, then select Create Settings Asset. For more information on the available input settings, see Input Settings in the Input System package documentation. Create a GameObject with a PlayerInput component and an Input Actions asset. For more information, see Add and configure a PlayerInput component. After you've configured your project, create a graph to Capture input with the Input System package. Use the Input Manager The Input Manager is Unity's built-in system for input. Change the Input Manager's settings to change how a project receives input. Go to Edit > Project Settings and select Input Manager. For more information on the available settings, see the Input Manager documentation in the User Manual. Input Manager prerequisites To use the Input Manager in a project, in your Player Project Settings, set Active Input Handling to Input Manager (Old) or Both. For more information on this setting, see Standalone Player settings in the User Manual. After you’ve configured your Player Project Settings, create a graph to Capture input with the Input Manager. Additional resources Add and configure a Player Input component Capture input with the Input System package Capture input with the Input Manager Input event nodes"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-capturing-player-inputs-new.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-capturing-player-inputs-new.html",
    "title": "Capture input with the Input System package | Cacher Game",
    "summary": "Capture input with the Input System package Important If you don't complete the prerequisite configuration for your project, you can't use the Input System package with Visual Scripting. For more information, see Input System package prerequisites. To use the Input System package with Visual Scripting to capture input in your project: Open or create a Script Graph attached to the GameObject that you want your users to move. Right-click anywhere in the Graph Editor to open the fuzzy finder. Go to Events > Input or search for On Input System Event. Select an Input System Event node. In this example, select the On Input System Event Vector 2 node to add it to the graph. Set the On Input System Event Vector 2 node's Input Action Change Type control to On Hold: In the Input Action list on the On Input System Event Vector 2 node, select an Input Action to trigger the node. In this example, select Move. Note By default, Visual Scripting displays all Input Actions from the Input Action asset attached to your current GameObject's Player Input component. Right-click anywhere in the Graph Editor to open the fuzzy finder. Tip If a context menu appears when you right-click, select Add Node to open the fuzzy finder. Go to Codebase > Unity Engine > Vector 3 or search for Vector 3 Get X. Select Get X to add the Vector 3 Get X node to the graph. Right-click anywhere in the Graph Editor to open the fuzzy finder. Go to Codebase > Unity Engine > Vector 3 or search for Vector 3 Get Z. Select Get Z to add the Vector 3 Get Z node to the graph. Select the Vector 2 Value output port on the On Input System Event Vector 2 node. Make a connection to the Target input port on the Vector 3 Get X node: Select the Vector 2 Value output port. Make a connection to the Target port on the Vector 3 Get Z node. Right-click anywhere in the Graph Editor to open the fuzzy finder. Go to Codebase > Unity Engine > Transform or search for Translate. Select Transform: Translate (X, Y, Z) to add the Translate node to the graph. Select the Value: Float output port on the Vector 3 Get X node. Make a connection to the X float input port on the Translate node. Select the Value: Float output port on the Vector 3 Get X node. Make a connection to the Z float input port on the Translate node. The finished graph looks similar to the following image: To enter Play mode, select Play from the Unity Editor's Toolbar. While in the Game view, press a key defined under the Input Actions asset for Move in the Player Action Map. The GameObject moves along the X or Z axis in the Game view, based on the key pressed and the Input Actions asset. For more information on how to define Input Actions, see Input Action Assets in the Input System package documentation. Additional resources Capture user input in an application Add and configure a Player Input component On Input System Event Button node On Input System Event Float node On Input System Event Vector 2 node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-capturing-player-inputs-old.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-capturing-player-inputs-old.html",
    "title": "Capture input with the Input Manager | Cacher Game",
    "summary": "Capture input with the Input Manager Note You must configure your Project Settings to use the Input Manager with Visual Scripting. For more information, see Input Manager prerequisites. To create a basic Script Graph that uses the Input Manager to capture input: Open or create a Script Graph attached to the GameObject that you want your users to move. If there isn't an On Update or similar Event node in your graph: [!include[open-fuzzy-finder](./snippets/vs-open-fuzzy-finder.md)] Go to Events > Lifecycle, or enter On Update in the search field. Select the On Update Event node to add it to the graph. [!include[open-fuzzy-finder](./snippets/vs-open-fuzzy-finder.md)] TIP If you right-click and the context menu appears, select Add Node to open the fuzzy finder. Go to Codebase > Unity Engine > Input, or enter Get Axis in the search field. Select Get Axis (Axis Name) to add the Get Axis node to the graph. Repeat Steps 3 through 5 to create a second Get Axis (Axis Name) node. On the first Get Axis node, in the Axis Name input field, enter Horizontal. On the second Get Axis node, in the Axis Name input field, enter Vertical. NOTE If an Axis Name doesn't match the name in the Input Manager's Project Settings, Visual Scripting displays an error in the Graph Inspector. When you enter Play mode, the Unity Editor also displays an error in the Console window. [!include[open-fuzzy-finder](./snippets/vs-open-fuzzy-finder.md)] Go to Codebase > Unity Engine > Transform or search for Translate. Select Translate (X, Y, Z) to add a Translate node to the graph. Select the Result float output port on the Horizontal Get Axis node. Make a connection to the X input port on the Translate node. Select the Result float output port on the Vertical Get Axis node. Make a connection to the Z input port on the Translate node. The finished graph looks similar to the following image: To enter Play mode, select Play from the Unity Editor's Toolbar. While in the Game view, press a key mapped as a Negative Button or Positive Button from the Input Manager's virtual axes. The GameObject moves along the X or Z axis in the Game view, based on the key pressed and the Input Manager Project Settings. Additional resources Capture user input in an application Capture input with the Input System package On Button Input node On Keyboard Input node On Mouse Down node On Mouse Drag node On Mouse Enter node On Mouse Exit node On Mouse Input node On Mouse Over node On Mouse Up As Button node On Mouse Up node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-configuration.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-configuration.html",
    "title": "Configure project settings | Cacher Game",
    "summary": "Configure project settings Note To use Visual Scripting in a project for the first time, you must initialize it from the Editor's Project Settings window. Use the Project Settings window with Visual Scripting to manage backups, node assemblies, type options, and regenerate your Node Library. To open your Project Settings: Go to Edit > Project Settings. Select Visual Scripting. You can find the following configuration options in your Visual Scripting Project Settings. To use Visual Scripting in a project for the first time, you must regenerate your Node Library, as described in the table below. Option Description Initialize Visual Scripting You must select Initialize Visual Scripting the first time you use Visual Scripting in a project. Initialize Visual Scripting to parse all assemblies and types for the Visual Scripting Node Library. After you initialize Visual Scripting, regenerate your Node Library. See Regenerate Nodes, below. Type Options Use the Type Options list to add or remove types for your node inputs and outputs. After you add or remove a type, you must regenerate your Node Library. See Regenerate Nodes, below. For more information on how to add or remove types, see Add or remove types. Node Library Use the Node Library list to add or remove nodes and their assemblies in Visual Scripting. You must add any new types to your Type Options after you add new nodes to Visual Scripting. You must also regenerate your Node Library after you add or remove nodes. See Regenerate Nodes, below. For more information on how to add or remove nodes from your Node Library, see Add or remove available nodes. Regenerate Nodes Regenerate your Node Library to make all nodes available for use in a project. To use Visual Scripting for the first time in a project, you must Initialize Visual Scripting and regenerate your Node Library. To regenerate your Node Library: Select Regenerate Nodes. Select OK. NOTE You must regenerate your Node Library in the following circumstances: Before you use Visual Scripting in your project for the first time. After you add or remove nodes from your Node Library. After you add or remove types from your Type Options. After you change the inputs or outputs for a Custom C# node. Generate To generate required property provider scripts for custom drawers, select Generate. These scripts are necessary for Unity to use custom drawers for custom classes and script variables inside Visual Scripting. To assign a default value to a custom variable type through the Unity Editor’s Inspector, you must either have access to the source code for the class, or provide a custom PropertyDrawer. For more information, see Custom types. Create Backup To create a new backup of your Visual Scripting graphs and settings, select Create Backup. For more information about backups, see Create or restore a backup. Restore Backup To open the folder where Visual Scripting stores your backups, select Restore Backup. For more information about backups, see Create or restore a backup. Fix Missing Scripts To correct any issues that might occur after migration from the Unity Asset Store version of Visual Scripting to the package version, select Fix Missing Scripts. This resolves any missing references to Visual Scripting Script Graphs and State Graphs in Script Machine or State Machine components. Note If your settings don't apply after you make a change, report a bug through the Unity Editor."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-control-schemes.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-control-schemes.html",
    "title": "Choose a control scheme | Cacher Game",
    "summary": "Choose a control scheme You can choose from two different control schemes in Visual Scripting. Each control scheme changes how you can interact with your graphs in the Graph Editor: Action Default Control Scheme Alternate Control Scheme Pan Middle-click and drag Middle-click and drag Pan Vertically Scroll N/A Zoom In/Zoom Out Ctrl+Scroll (macOS: Cmd+Scroll) Scroll Frame Selected Home Home Frame All Home Home Create Selection Click and drag Click and drag Select All Ctrl+A (macOS: Cmd+A) Ctrl+A (macOS: Cmd+A) Open Context Menu Right-click Ctrl+click (macOS) Ctrl+E (macOS: Cmd+E) Right-click Ctrl + click (MacOS) Ctrl+E (macOS: Cmd+E) Create Node Group Ctrl+click and drag (macOS: Cmd+click and drag) Ctrl+click and drag (macOS: Cmd+click and drag) Copy Selected Ctrl+C (macOS: Cmd+C) Ctrl+C (macOS: Cmd+C) Paste Selection Ctrl+V (macOS: Cmd+V) Ctrl+V (macOS: Cmd+V) Cut Selected Ctrl+X (macOS: Cmd+X) Ctrl+X (macOS: Cmd+X) Duplicate Selected Ctrl+D (macOS: Cmd+D) Ctrl+D (macOS: Cmd+D) Delete Selected Del Del Maximize Graph Window Shift+Space Double-click Shift+Space Double-click Move Group Without Child Nodes Alt+click and drag the group's Title bar Ctrl+click and drag the group's Title bar (macOS: Cmd+click and drag) Move Node on One Axis Shift+click and drag vertically or horizontally Shift+click and drag vertically or horizontally Pan Pan to move the viewable area in the Graph Editor to any part of your graph. Pan Vertically With the Default control scheme, pan the view in the Graph Editor vertically with the scroll wheel on your mouse. Zoom In/Zoom Out Change the zoom level in the Graph window to control how much of your graph is visible in the Graph Editor. You can also set your zoom level with the toolbar in the Graph window. For more information, see The interface. Frame Selected After you select a node or another item in your graph, press Home to center your selected item in the Graph Editor. Frame All With no nodes or items selected, press Home to center your entire graph in the Graph Editor. Your zoom level automatically adjusts to accommodate the size of your graph. Create Selection Click and drag to create a selection box around any nodes or items in your graph that you want to select. When you have multiple items selected, click and drag a single item to move the entire selection. Select All Press Ctrl+A (macOS: Cmd+A) to select all items in your current graph. Open Context Menu You can open the context menu to perform certain actions on State Graphs or manipulate a selection in a Script Graph. You can create new states and add transitions. Create Node Group Create a group of nodes to keep related sections of your graph together, or move multiple nodes at a time. For more information on node groups, see Create node groups. Copy Selected Copy your current selection to move it to another graph, or another location on your current graph. Paste Selection Paste the contents of a copied or cut selection into your graph. Cut Selected Cut your current selection to move it to another graph, or another location on your current graph. Duplicate Selected Duplicate a selection to instantly create a copy of your current selection to use elsewhere in your current graph. Delete Selected Delete your current selection to remove it from your graph. Maximize Graph Window After you dock the Graph window in the Unity Editor, press Shift+Space or double-click maximize your Graph window and take up the entire Editor window. Move Group Without Child Nodes You can move a group in your graph without any of the nodes contained inside that group. Move Node on One Axis Shift+click to move a node in only one direction at a time in the Graph Editor. The node can move either vertically or horizontally."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-control.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-control.html",
    "title": "Control nodes | Cacher Game",
    "summary": "Control nodes Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. Control nodes branch, loop and merge the flow. Branching Branching nodes split the control flow based on a value. If The common if node uses a boolean condition. Consider them as an \"if the condition is true, do something, otherwise, do something else.\" Switch Branch on the value of an enum, a string, or an integer. These nodes are called Switch nodes. To switch on an enum, decide on the type of the enum. The branch output ports appears. To switch on a string or number, create each branch option in the graph inspector. The node is updated with each output port. For strings, optionally choose to ignore the case of the selector. Note A Default port is always added. It is the path that the control flow should take if the input selector does not correspond to any other option. Select Select nodes are the opposite of switch nodes. You can select a single value from a set of options based on a selector. For example, a Select On Integer node that chooses a color based on a player number. Note In the above example predictive debugging warns of a crash if playerNo is not within 1, 2, 3, or 4, because the Default port is not connected. Looping Loops repeats logic for a certain number of iterations before moving on. The logic to be repeated is called the body of the loop. After the loop is over, the exit port is called. Note The body of every loop is called synchronously, not over the course of multiple frames. Co-routine-like behaviours are achieved by listening to the update event manually. While Loop The while loop is the simplest form of loop. It repeats its body while its condition remains true. Only when the condition becomes false does the loop terminate. For example, the following graph generates a new random name until the result isn't contained in the names application variable. Warning Do not create an infinite loop. If the condition is always true, the editor hangs. As loop bodies are synchronous, not parallel, there are few uses for while loops in visual scripting. For Each Loop For Each iterates over every element of a collection. It outputs the current index and item that is being looped over. For example, the following graph outputs three messages to the console: I like cats I like dogs I like birds To access the key and value from dictionaries in the loop, check the Dictionary box. For Loop For is a numeric loop and requires three integers: a start index, an end index, and a step. The loop starts at the first index, then increments towards the last index via increments of the step. It outputs the current index. For example, this graph counts to ten by skipping odd numbers because of its step. In other words, its output is 0, 2, 4, 6, then 8. The for loop can also be very useful when combined to the Get List Item and Count Items nodes. For example, the folllowing graph is very similar to the last graph as the output to the console is \"I like {animal}s\". Instead of using the for each node that outputs each item, the graph outputs each item manually by its index in the list. This specifies a different increment (in this case 2) and skips some items. This graph outputs two messages: I like cats I like birds Break Loop A loop can finish early by using the Break Loop node. As soon as this node is entered, the exit port of the loop is called, no matter how many more iterations remain. For example, even though this for loop is supposed to count to 10, it stops at 5 because of the break. Its output is 0, 1, 2, 3, then 4. Exception Handling Try Catch The Try Catch node handles Exceptions that occur. It prevents your game from crashing in case you suspect some code might fail. Anything that gets executed in the Try branch is considered \"safe\": the script continues from the Catch branch instead if it fails. The Exception port captures information about the failure when that happens. A common way of handling this is to log a warning with the exception message. Note By default, this node catches all exceptions. Be specific in your handling by changing the exception type in the dropdown. The Finally branch is optional. It is always called after Try or Catch, regardless of whether the operation succeeded or not. It is usually used to dispose or destroy any resources that must be freed. This port can be disconnected if there is no need to destroy any resources. Throw The Throw node allows you to raise your own exceptions that stop the flow. These are caught with Try Catch. It is good practice to \"fail early\" by throwing as soon as something unexpected happens. It helps catch bugs early in the chain, instead of letting them trickle down and have unexpected side effects that are hard to debug. For example, to ensure damage is positive before applying it: If the Custom checkbox is selected, you can pass a custom Exception object that contains more data than a simple message. Most often, this is not required. By default, the thrown exception is of type System.Exception. Toggles Toggle nodes are similar in principle to light-switches: they can be turned on and off to impact either the script or values. Think of them as \"gates\" that can be opened and closed. Toggle Flow The Toggle Flow node gates the flow of control. When on, the flow passes through; when off, the flow does not. There are many inputs and outputs that allow fine grain control over the logic. In the previous example, Toggle is used to show the same event (a keypress) turns the toggle on and off. This can be done by using On and Off through two different events. There are many inputs and outputs that allow fine grain control over the logic. In a previous example, Toggle is used to show the same event (a keypress) turns the toggle on and off; for the same results using two different events, use On and Off instead. On the output side, the Is On boolean port indicates the toggle status, that is turned on or off. The control outputs are triggered according to the table below: Port Triggered When On Flow enters the toggle via the unmarked input while it is on. Off Flow enters the toggle via the unmarked input while it is off. Turned On The toggle gets turned on, either via the On or Toggle inputs. Turned Off The toggle gets turned off, either via the Off or Toggle inputs. Toggle Value The Toggle Value node selects between two different input values depending on whether it is on or off. Its ports work exactly like the Toggle Flow node. Another way of implementing the same logic as the previous example: clicking Space toggles the object to move up. This time a value of 1 or 0 is provided as the vertical velocity. Note Turn on relations in the toolbar as a means to visualize the flow between the toggle ports. Once The Once node executes different logic the first time it is traversed from any subsequent times. It can be reset by entering the Reset port. Cache The Cache node saves the result of an expensive operating and reuses it instead of fetching it again each time you need it. For example, using this graph, the formula is calculated twice: By using the Cache node, the result is saved and calculated only once, optimizing performance. Note It is important to note that caching only lasts within the scope of the current flow. The value of the cache is not shared or available from another event."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-custom-drawer.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-custom-drawer.html",
    "title": "Create a custom PropertyDrawer for a custom type | Cacher Game",
    "summary": "Create a custom PropertyDrawer for a custom type If you want to use a custom type from a custom class in Visual Scripting, and you don't have access to its source code, you must create a custom PropertyDrawer. You can't assign a value to a custom type inside the Editor or initialize the value for a variable with a custom type if it doesn't have a PropertyDrawer. Note The class for your custom type must have the [Serializable] tag in its source code to create a custom PropertyDrawer. To create a custom PropertyDrawer: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Go to Create > C# Script. Enter a name, such as CounterDrawer, for the new script file. Press Enter. Double-click the new C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual. Remove the Start and Update functions and their comments from the script file. Above the line that defines your new public class, add a [CustomPropertyDrawer] attribute. In the parameters for the [CustomPropertyDrawer] attribute, specify a type of parameter with the name of the type you want to assign to this PropertyDrawer, exactly as it appears in Unity. Change the MonoBehaviour class at the end of your public class definition to PropertyDrawer. Note After you create a custom PropertyDrawer, you must generate the required property provider scripts from your Visual Scripting Project Settings. For more information, see Configure project settings. The following is an example of a finished PropertyDrawer script: using UnityEditor; using UnityEngine; [CustomPropertyDrawer](type of(<Counter>))] public class CounterDrawer : PropertyDrawer { // Draw the property inside the given rect public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) { // Using BeginProperty / EndProperty on the parent property means that // prefab override logic works on the entire property. EditorGUI.BeginProperty(position, label, property); // Draw label position = EditorGUI.PrefixLabel(position, GUIUtility.GetControlID(FocusType.Passive), label); // Don't indent child fields var indent = EditorGUI.indentLevel; EditorGUI.indentLevel = 0; // Calculate rects var amountRect = new Rect(position.x, position.y, 30, position.height); var unitRect = new Rect(position.x + 35, position.y, 50, position.height); var nameRect = new Rect(position.x + 90, position.y, position.width - 90, position.height); // Draw fields - passs GUIContent.none to each so they are drawn without labels EditorGUI.PropertyField(amountRect, property.FindPropertyRelative(\"amount\"), GUIContent.none); EditorGUI.PropertyField(unitRect, property.FindPropertyRelative(\"unit\"), GUIContent.none); EditorGUI.PropertyField(nameRect, property.FindPropertyRelative(\"name\"), GUIContent.none); // Set indent back to what it was EditorGUI.indentLevel = indent; EditorGUI.EndProperty(); } } To create the rest of your custom PropertyDrawer, you must decide what fields you must display, and how you want them to display in the Editor's interface. For example, you might want to use the UIElements module to create your PropertyDrawer, or decide to use Unity's IMGUI module. For more information on how to create and design a custom PropertyDrawer, see the PropertyDrawer class in the main Unity Scripting API and its related methods."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-custom-node-add-docs.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-custom-node-add-docs.html",
    "title": "Add documentation to a Custom C# node | Cacher Game",
    "summary": "Add documentation to a Custom C# node You can also add Graph Inspector documentation to a Custom C# node. Visual Scripting displays the documentation in the Graph Inspector when you select a node in a Script Graph. The documentation isn't required to use the node, but can help your users understand the purpose and usage of a node. To add documentation to a node: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Note If you already have an Editor folder in your project, you can skip Steps 2-3. Right-click your Assets folder or select Add (+), then select Folder. Name the folder Editor. Do one of the following: Right-click your Editor folder in the Project window's folder list. Right-click anywhere in the Project window's preview pane with your Editor folder selected. Go to Create > C# Script. Enter a name, such as MyNodeDescriptor for the new script file. Press Enter. Double-click the new C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual. In your external editor, copy and paste the following code into the C# script: using System; using Unity.VisualScripting; using UnityEngine; [Descriptor(typeof(MyNode))] public class MyNodeDescriptor : UnitDescriptor<MyNode> { public MyNodeDescriptor(MyNode unit) : base(unit) {} protected override void DefinedPort(IUnitPort port, UnitPortDescription description) { base.DefinedPort(port, description); switch (port.key) { case \"inputTrigger\": description.summary = \"Trigger the concatenation of two strings, myValueA and myValueB, and return the result string on the Result port.\"; break; case \"myValueA\": description.summary = \"First string value.\"; break; case \"myValueB\": description.summary = \"Second string value.\"; break; case \"outputTrigger\": description.summary = \"Execute the next action in the Script Graph after concatenating myValueA and myValueB.\"; break; case \"result\": description.summary = \"The result string obtained from concatenating myValueA and myValueB.\"; break; } } } You can modify the script to suit the specifics of your own node. Save your script file. Return to the Unity Editor. Do one of the following: Open a Script Graph where you've already added your node.. Right-click anywhere in the Graph Editor to open the fuzzy finder. Then, select your node in the fuzzy finder to add it to your graph. Select the node and open the Graph Inspector to view your documentation. Next steps After you add documentation to a node, you can choose to further customize the node with node class and port attributes."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-custom-node-add-logic.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-custom-node-add-logic.html",
    "title": "Add logic to a Custom C# node | Cacher Game",
    "summary": "Add logic to a Custom C# node Note To add logic to a node, you must create a Custom C# node and add ports. The examples below are based on the previous examples for a Custom C# node. For more information, see Create a new simple Custom C# node. After you create a Custom C# node and add ports, you can add logic to a node. Add logic to tell Visual Scripting what the node does with any data it receives from its ports. To add logic to a node: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Double-click the C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual. In your external editor, add any logic for the node within the lambda expression that handles the assignment of the inputTrigger. For example, you can take the values of the two string input ports added in the previous example and concatenate them, as shown in the following code: using System; using Unity.VisualScripting; using UnityEngine; public class MyNode : Unit { [DoNotSerialize] public ControlInput inputTrigger; [DoNotSerialize] public ControlOutput outputTrigger; [DoNotSerialize] public ValueInput myValueA; [DoNotSerialize] public ValueInput myValueB; [DoNotSerialize] public ValueOutput result; private string resultValue; protected override void Definition() { //The lambda to execute our node action when the inputTrigger port is triggered. inputTrigger = ControlInput(\"inputTrigger\", (flow) => { //Making the resultValue equal to the input value from myValueA concatenating it with myValueB. resultValue = flow.GetValue<string>(myValueA) + flow.GetValue<string>(myValueB) + \"!!!\"; return outputTrigger; }); outputTrigger = ControlOutput(\"outputTrigger\"); myValueA = ValueInput<string>(\"myValueA\", \"Hello \"); myValueB = ValueInput<string>(\"myValueB\", String.Empty); result = ValueOutput<string>(\"result\", (flow) => resultValue); } } Save your script file. Return to the Unity Editor. Do one of the following: Open a Script Graph where you've already added your node.. Right-click anywhere in the Graph Editor to open the fuzzy finder. Then, select your node in the fuzzy finder to add it to your graph. Next steps After you add logic to a node, add relations to ensure that the node displays correctly in Visual Scripting."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-custom-node-add-ports.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-custom-node-add-ports.html",
    "title": "Add ports to a Custom C# node | Cacher Game",
    "summary": "Add ports to a Custom C# node Note To add ports to your node, you must create the C# file for the node. The examples below are based on the previous examples for a Custom C# node. For more information, see Create a new simple Custom C# node. After you create a Custom C# node, add ports to allow the node to send and receive data or trigger other nodes in a Script Graph. To add ports to a node: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Double-click the C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual. Add control ports In your external editor, under the class definition for the node, add two public variables: one with a ControlInput type and one with a ControlOutput type. In the Definition method for the node, use the variables to define the control ports, as shown below: using System; using Unity.VisualScripting; using UnityEngine; public class MyNode : Unit { [DoNotSerialize] // No need to serialize ports. public ControlInput inputTrigger; //Adding the ControlInput port variable [DoNotSerialize] // No need to serialize ports. public ControlOutput outputTrigger;//Adding the ControlOutput port variable. protected override void Definition() { //Making the ControlInput port visible, setting its key and running the anonymous action method to pass the flow to the outputTrigger port. inputTrigger = ControlInput(\"inputTrigger\", (flow) => { return outputTrigger; }); //Making the ControlOutput port visible and setting its key. outputTrigger = ControlOutput(\"outputTrigger\"); } } Save your script file. Return to the Unity Editor. Do one of the following: Open a Script Graph where you've already added your node.. Right-click anywhere in the Graph Editor to open the fuzzy finder. Then, select your node in the fuzzy finder to add it to your graph. If you used the previous code sample, Visual Scripting adds input and output control ports to the node. Add value ports In your external editor, under the class definition for the node, add any number of variables with either a Generic or specific type value: Generic: The port can receive or output any data type. Corresponds to Unity's Object type. Specific Type Value: The port can only receive or output a specific data type. For example, string, float, or integer. For more information on types in Visual Scripting, see Object types. In the Definition method for the node, use the variables to define the value ports. In the example below, there are two input ports with a type value of string, and one string output port: using System; using Unity.VisualScripting; using UnityEngine; public class MyNode : Unit { [DoNotSerialize] public ControlInput inputTrigger; [DoNotSerialize] public ControlOutput outputTrigger; [DoNotSerialize] // No need to serialize ports public ValueInput myValueA; // Adding the ValueInput variable for myValueA [DoNotSerialize] // No need to serialize ports public ValueInput myValueB; // Adding the ValueInput variable for myValueB [DoNotSerialize] // No need to serialize ports public ValueOutput result; // Adding the ValueOutput variable for result private string resultValue; // Adding the string variable for the processed result value protected override void Definition() { inputTrigger = ControlInput(\"inputTrigger\", (flow) => { return outputTrigger; }); outputTrigger = ControlOutput(\"outputTrigger\"); //Making the myValueA input value port visible, setting the port label name to myValueA and setting its default value to Hello. myValueA = ValueInput<string>(\"myValueA\", \"Hello \"); //Making the myValueB input value port visible, setting the port label name to myValueB and setting its default value to an empty string. myValueB = ValueInput<string>(\"myValueB\", string.Empty); //Making the result output value port visible, setting the port label name to result and setting its default value to the resultValue variable. result = ValueOutput<string>(\"result\", (flow) => { return resultValue; }); } } Save your script file. Return to the Unity Editor. Do one of the following: Open a Script Graph where you've already added your node.. Right-click anywhere in the Graph Editor to open the fuzzy finder. Then, select your node in the fuzzy finder to add it to your graph. If you used the previous code sample, Visual Scripting adds two input ports, My Value A and My Value B, and one output port, Result to the node. Next steps After you add ports to a node, add logic to tell the node what to do with the data it receives."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-custom-node-add-relations.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-custom-node-add-relations.html",
    "title": "Add relations to a Custom C# node | Cacher Game",
    "summary": "Add relations to a Custom C# node Note To add logic to a node, you must create a Custom C# node and add ports. The examples below are based on the previous examples for a Custom C# node. For more information, see Create a new simple Custom C# node. After you add ports and add logic to a node, relations help Visual Scripting correctly display a Custom C# node in a Script Graph. To add relations to a node: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Double-click the C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual. In your external editor, add relations in the format $RelationType$($Port1$, $Port2$), where $RelationType$ is the relation type you want to assign between the ports you specify as $Port1$ or $Port2$. For example, to assign relations to the previous example node: using System; using Unity.VisualScripting; using UnityEngine; public class MyNode : Unit { [DoNotSerialize] public ControlInput inputTrigger; [DoNotSerialize] public ControlOutput outputTrigger; [DoNotSerialize] public ValueInput myValueA; [DoNotSerialize] public ValueInput myValueB; [DoNotSerialize] public ValueOutput result; private string resultValue; protected override void Definition() { inputTrigger = ControlInput(\"inputTrigger\", (flow) => { resultValue = flow.GetValue<string>(myValueA) + flow.GetValue<string>(myValueB) + \"!!!\"; return outputTrigger; }); outputTrigger = ControlOutput(\"outputTrigger\"); myValueA = ValueInput<string>(\"myValueA\", \"Hello \"); myValueB = ValueInput<string>(\"myValueB\", String.Empty); result = ValueOutput<string>(\"result\", (flow) => resultValue); Requirement(myValueA, inputTrigger); //Specifies that we need the myValueA value to be set before the node can run. Requirement(myValueB, inputTrigger); //Specifies that we need the myValueB value to be set before the node can run. Succession(inputTrigger, outputTrigger); //Specifies that the input trigger port's input exits at the output trigger port. Not setting your succession also dims connected nodes, but the execution still completes. Assignment(inputTrigger,result);//Specifies that data is written to the result string output when the inputTrigger is triggered. } } For more information on relation types, see Custom C# nodes. Save your script file. Return to the Unity Editor. Do one of the following: Open a Script Graph where you've already added your node.. Right-click anywhere in the Graph Editor to open the fuzzy finder. Then, select your node in the fuzzy finder to add it to your graph. In the Graph toolbar, enable Relations. Visual Scripting displays the relations you assigned to the Custom C# node. If you used the previous code sample, the node's relations might look like the following image: Next steps After you add relations to a node, you can choose to add documentation or customize the node with attributes."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-custom-node-attributes-reference.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-custom-node-attributes-reference.html",
    "title": "Custom C# node attributes reference | Cacher Game",
    "summary": "Custom C# node attributes reference You can add attributes to a node class and port variable definitions to customize the look of a Custom C# node. Node class attributes You can customize the titles that appear on a node, where it appears in the fuzzy finder, and its icon. Node class attributes must be placed above the node class definition in a node's C# script. Visual Scripting has 5 node class attributes: UnitTitle UnitShortTitle UnitSubtitle UnitCategory TypeIcon Usually, Visual Scripting automatically applies any changes you make to a node's class attributes after you save the C# file. UnitTitle You can specify a [UnitTitle] to display a different title than the node's class name on the node when it appears in a Script Graph, and when you view details about the node in the Graph Inspector: using System; using Unity.VisualScripting; using UnityEngine; [UnitTitle(\"My New Title\")] public class MyNodeAfter : Unit { ... } } The [UnitTitle] attribute overrides the node's class name. UnitShortTitle You can specify a [UnitShortTitle] to display a different title on the node when it appears in a Script Graph: using System; using Unity.VisualScripting; using UnityEngine; [UnitShortTitle(\"Short Title\")] [UnitTitle(\"My New Title\")] public class MyNodeAfter : Unit { ... } } The [UnitShortTitle] only appears on the node in a Script Graph. The [UnitTitle] or node class name still displays in the Graph Inspector. UnitSubtitle You can add a [UnitSubtitle] to add a line of text below the [UnitTitle], [UnitShortTitle], or node class name when a node appears in a Script Graph: using System; using Unity.VisualScripting; using UnityEngine; [UnitSubtitle(\"It's a subtitle!\")] [UnitShortTitle(\"Short Title\")] [UnitTitle(\"My New Title\")] public class MyNodeAfter : Unit { ... } } The [UnitSubtitle] doesn't appear in the Graph Inspector. UnitCategory You can specify a [UnitCategory] to tell Visual Scripting where to place the node in the fuzzy finder: using System; using Unity.VisualScripting; using UnityEngine; [UnitCategory(\"FirstLevel/SecondLevel\")] public class MyNodeAfter : Unit { ... } } Replace FirstLevel with the name of the top-level category in the fuzzy finder where you want Visual Scripting to place the node. Replace SecondLevel with the name of a subcategory. Visual Scripting creates the categories if they don't already exist in the fuzzy finder. Note You must regenerate your Node Library for changes made to a node's [UnitCategory] to take effect. TypeIcon You can use the [TypeIcon] attribute to change the icon that appears on a node when it appears in a Script Graph: using System; using Unity.VisualScripting; using UnityEngine; [TypeIcon(typeof(ToggleValue))] public class MyNodeAfter : Unit { ... } } The icon for the node changes in the Graph Inspector, too. Note You can't point to your own custom icons from this attribute. You must use an icon from the Visual Scripting icons library, which includes all Unity types. Port attributes Custom nodes have one mandatory port attribute and one optional port attribute: DoNotSerialize and PortLabelHidden, respectively. Port attributes must be placed above your variable declarations for each port variable in the node. Visual Scripting automatically applies any changes you make to a node's port attributes after you save the script file. DoNotSerialize [DoNotSerialize] is a mandatory attribute for all ports on custom nodes. Add this attribute to avoid serialization of data that shouldn't be serialized: using System; using Unity.VisualScripting; using UnityEngine; [UnitShortTitle(\"Short Title\")] [UnitTitle(\"My New Title\")] [UnitCategory(\"My Nodes\")] [UnitSubtitle(\"It's a subtitle!\")] [TypeIcon(typeof(Color))] public class MyNodeAfter : Unit { [DoNotSerialize] public ControlInput inputTrigger; [DoNotSerialize] public ControlOutput outputTrigger; [DoNotSerialize] public ValueInput myValueA; [DoNotSerialize] public ValueInput myValueB; [DoNotSerialize] public ValueOutput result; private string resultValue; protected override void Definition() { ... } } PortLabelHidden You can add the [PortLabelHidden] attribute to hide the name label for any port on a node when it appears in a Script Graph: using System; using Unity.VisualScripting; using UnityEngine; [UnitShortTitle(\"Short Title\")] [UnitTitle(\"My New Title\")] [UnitCategory(\"My Nodes\")] [UnitSubtitle(\"It's a subtitle!\")] [TypeIcon(typeof(Color))] public class MyNodeAfter : Unit { [DoNotSerialize] [PortLabelHidden] public ControlInput inputTrigger; [DoNotSerialize] [PortLabelHidden] public ControlOutput outputTrigger; [DoNotSerialize] public ValueInput myValueA; [DoNotSerialize] public ValueInput myValueB; [DoNotSerialize] public ValueOutput result; private string resultValue; protected override void Definition() { ... } } The port's label is still visible in the Graph Inspector. Use the same name in a port's variable definition and the port's key in the Definition method for the node's class, as shown: using System; using Unity.VisualScripting; using UnityEngine; public class MyNode : Unit { ... [DoNotSerialize, PortLabelHidden] public ValueInput myValueA; [DoNotSerialize, PortLabelHidden] public ValueInput myValueB; ... protected override void Definition() { ... myValueA = ValueInput<string>(\"myValueA\", \"Hello \"); myValueB = ValueInput<string>(\"myValueB\", String.Empty); ... } }"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-custom-node-empty.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-custom-node-empty.html",
    "title": "Create a new simple Custom C# node | Cacher Game",
    "summary": "Create a new simple Custom C# node You can create a Custom C# node to run your own custom logic in a Script Graph. For more information on Custom C# nodes, see Custom C# nodes. To create a new simple Custom C# node: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Right-click a folder in the Project window's folder list, or anywhere in the Project window's preview pane, and go to Create > C# Script. Enter a name, such as MyNode, for the new script file. Press Enter. Double-click the new C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual. In your external editor, copy and paste the following code into your C# script: using Unity.VisualScripting; using UnityEngine; public class MyNode : Unit { protected override void Definition() //The method to set what our node will be doing. { } } Save your script file. Return to the Unity Editor. Follow the process described in Configure project settings to regenerate your Node Library. Note If you don't regenerate your Node Library, the node won't appear in Visual Scripting's fuzzy finder. Open a Script Graph where you want to add your new node. Right-click anywhere in the Graph Editor to open the fuzzy finder. The node appears as My Node at the end of the fuzzy finder list. Select the node to add it to your graph. Next steps After you create the basic start to a node and add it to Visual Scripting's fuzzy finder, add ports so your node can send and receive data."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-custom-node.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-custom-node.html",
    "title": "Custom C# nodes | Cacher Game",
    "summary": "Custom C# nodes You can create your own Custom C# node with a C# script. Use your node in Script Graphs to run your own custom logic, and provide the script file to other users to let them use it in their own Visual Scripting projects. You can create nodes that change the flow of logic in your graph, nodes that manipulate data, or both. You can also create nodes for custom events. To create a Custom C# node, you must: Create a C# script. Add ports. Add logic. Add relations. Create the initial C# script All custom nodes start with a C# file. After you create a C# file, you must regenerate your Node Library through your project settings. This allows Visual Scripting to recognize your Custom C# node and add it to the fuzzy finder for use in your project's graphs. After you regenerate your Node Library the first time, you only need to regenerate your Node Library again if you change the location of a node in the fuzzy finder. You can change the location through the [UnitCategory] attribute. For more information on how to create your initial C# script, see Create a new simple Custom C# node. Add ports Add ports to a node to specify what triggers Visual Scripting to run logic in a node, and decide what data it sends or receives. For more information on ports and nodes, see Nodes. Port types Visual Scripting has four different port types that you can add to a node: ControlInput: Provides a connection to a previous node, which tells Visual Scripting when to start the logic in a node. ControlOutput: Provides a connection to another node, which tells Visual Scripting when to run the logic for the next connected node in a Script Graph. ValueInput: Provides a connection that allows you to pass data into a node for use in its logic. ValueOutput: Provides a connection that allows you to pass data out of a node for use in other nodes. You can add any number of ports to a node. You can also choose what data type the ValueInput or ValueOutput ports send and receive: Generic: The port can receive or output any data type. Corresponds to Unity's Object type. Type Value: The port can only receive or output a specific data type. For example, string, float, or integer. For more information on types in Visual Scripting, see Object types. For more information on how to add ports to your node, see Add ports to your Custom C# node. Add logic Add logic to a node to specify what it does when it runs in a Script Graph. If there isn't any internal logic written for a node, the node can't trigger another node, or modify any of the data it receives from other nodes in a Script Graph. For more information on how to add logic to a node, see Add logic to a Custom C# node. Add relations Relations help define how a node and its Play mode animations appear in Visual Scripting. Without relations, Visual Scripting doesn't know how to animate or display a node in the Graph Editor. Relation types You can add three types of relations to a node to help correctly display its internal flow of logic: Assignment: Assignment relations are usually between a control input port and a data output port. Set an Assignment relation to tell Visual Scripting that a specific port needs to run before the node sends data to a data output port. Succession: Succession relations are usually between a control input port and a control output port. Set a Succession relation to tell Visual Scripting that a control input port exits at a control output port. Requirement: Requirement relations are usually between a control input port and a data port or ports. Set a Requirement relation to let Visual Scripting know that a specific data port or ports must have a value before the node can run any logic. Note If you don't set any Succession relations in a node, and Dim is enabled in the Graph toolbar, Visual Scripting dims your Custom C# node and any of its connected nodes in the Graph Editor during Play mode. For more information on how to add relations to a node, see Add relations to a node. Optional steps and customization After you've added relations, you can choose to add documentation for a node. Visual Scripting displays documentation in the Graph Inspector when a user selects a node in a Script Graph. Add documentation to help other users understand the purpose of each part of a node. You can also choose to customize a node with node attributes. You can add specific node class attributes to customize the entire node, or add port attributes to only customize specific ports. The attribute type determines the location where you must place the attribute in the node's C# file. Node class attributes must be placed above a node class definition, while port attributes must be placed above the variable definition for each port."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-graph-assign-existing-gameobject.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-graph-assign-existing-gameobject.html",
    "title": "Create and assign a graph to an existing GameObject | Cacher Game",
    "summary": "Create and assign a graph to an existing GameObject You can use the empty graph creation flow to create a new graph file and assign it to an existing GameObject in your project. For more information on other ways to create a graph file, see Create a new graph file. Create a Script Graph To create a new Script Graph and assign it to an existing GameObject: Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window. In the Hierarchy window, select the GameObject where you want to assign the new graph. Go to Window > Visual Scripting > Visual Scripting Graph. Expand Create new Script Graph. Select on selected game object. Choose a location to save the new graph file. Enter a name for the graph. Select Save. The new graph file automatically opens in a new window. Create a State Graph To create a new State Graph and assign it to an existing GameObject: Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window. In the Hierarchy window, select the GameObject where you want to assign the new graph. Go to Window > Visual Scripting > Visual Scripting Graph. Expand Create new State Graph. Select on selected game object. Choose a location to save the new graph file. Enter a name for the graph. Select Save. The new graph file automatically opens in a new window. Next steps After you create a new graph, attach it to a Script Machine or State Machine to use it in your application. For more information, see Attach a graph file to a Script Machine or State Machine."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-graph-assign-new-gameobject.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-graph-assign-new-gameobject.html",
    "title": "Create and assign a graph to a new GameObject | Cacher Game",
    "summary": "Create and assign a graph to a new GameObject You can use the empty graph creation flow to create a new graph file and assign it to a new GameObject. Visual Scripting automatically creates a new GameObject with the required components for the new graph file. For more information on other ways to create a graph file, see Create a new graph file. To create a new graph and assign it to a new GameObject: Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window. In the Hierarchy window, select the GameObject where you want to assign the new graph. Go to Window > Visual Scripting > Visual Scripting Graph. Expand Create new Script Graph. Select on new game object. Choose a location to save the new graph file. Enter a name for the graph. Select Save. Note The GameObject you create with this method has the same name as the graph file. After you have named and saved the graph file, the GameObject appears in the Hierarchy. The new graph file automatically opens in a new window. Create a State Graph To create a new State Graph and assign it to a new GameObject: Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window. In the Hierarchy window, select the GameObject where you want to assign the new graph. Go to Window > Visual Scripting > Visual Scripting Graph. Expand Create new State Graph. Select on new game object. Choose a location to save the new graph file. Enter a name for the graph. Select Save. Note The GameObject you create with this method has the same name as the graph file. After you have named and saved the graph file, the GameObject appears in the Hierarchy. The new graph file automatically opens in a new window. Next steps After you create your new graph, attach it to a Script Machine or State Machine to use it in your application. For more information, see Attach a graph file to a Script Machine or State Machine."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-graph-on-machine.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-graph-on-machine.html",
    "title": "Create a graph on a Script Machine or State Machine | Cacher Game",
    "summary": "Create a graph on a Script Machine or State Machine You can create a new graph file directly from a Script Machine or State Machine component on a GameObject. For more information on how to create a Script Machine or State Machine, see Attach a graph file to a Script Machine or State Machine. Create a new graph file from a Script Machine or State Machine To create a new graph file from an existing Script Machine or State Machine: Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window. In the Hierarchy window, select a GameObject that has a Script Machine or State Machine. With the GameObject selected in the Hierarchy window, go to Window > General > Inspector, or press Ctrl+3 (macOS: Cmd+3) to open the Inspector window. In the Inspector window, on your Script Machine or State Machine component, set the Source set to Graph. Select New. Enter a name for your new graph file. Choose a location for the file in your project. Select Save. Create a new embedded graph on a Script Machine or State Machine You can create an embedded graph on a Script Machine or State Machine component instead of an external graph file: Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window. In the Hierarchy window, select a GameObject that has a Script Machine or State Machine. With the GameObject selected in the Hierarchy window, go to Window > General > Inspector, or press Ctrl+3 (macOS: Cmd+3) to open the Inspector window. In the Inspector window, on your Script Machine or State Machine component, set the Source to Embed. (Optional) In the (Title) field, enter a descriptive title for the embedded graph. (Optional) In the (Summary) field, enter a brief summary of what the embedded graph does. (Optional) To open the new embedded graph and edit, select Edit Graph. Note Unity recommends you create a graph file rather than an embedded graph. In some situations, an embedded graph works best. For more information on how to choose the correct graph type, see Source types for Script Machines and State Machines. Next steps After you attach a graph to a Script Machine or State Machine, you can open the graph and edit. For more information, see Open a graph file."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-graph-project-window.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-graph-project-window.html",
    "title": "Create a new blank graph with the Project window | Cacher Game",
    "summary": "Create a new blank graph with the Project window You can create a new blank graph through the Project window in the Unity Editor. Your graph contains no starter nodes, and isn't connected to any existing components in your project. For more information on other ways to create a new graph file, see Create a new graph file. To create a new blank graph: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Right-click a folder in the Project window's folder list, or anywhere in the Project window's preview pane, and go to Create > Visual Scripting. Do one of the following: To create a new Script Graph, select Script Graph. To create a new State Graph, select State Graph. Enter a name for the new graph. Press Enter. When you open the new graph file, the graph might look similar to the following example. Next steps After you create a new graph, attach it to a Script Machine or State Machine to use it in your application. For more information, see Attach a graph file to a Script Machine or State Machine."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-graph-unassigned-flow.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-graph-unassigned-flow.html",
    "title": "Create a new unassigned graph with the empty graph creation flow | Cacher Game",
    "summary": "Create a new unassigned graph with the empty graph creation flow You can use the empty graph creation flow to create a new unassigned graph for use in your project. Note To use the graph file, you must attach it to a Script Machine or State Machine. For more information on other ways to create a graph file, see Create a new graph file. To create a new unassigned graph: Go to Window > Visual Scripting > Visual Scripting Graph. In the new Visual Scripting window, select one of the following options: To create a new Script Graph, select Create new Script Graph. To create a new State Graph, select Create new State Graph. Choose a location to save the new graph file. Enter a name for the graph. Select Save. The new graph file automatically opens in a new window. The new graph file should look similar to the following image: Next steps After you create a new graph, attach it to a Script Machine or State Machine to use it in your application. For more information, see Attach a graph file to a Script Machine or State Machine."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-graph.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-graph.html",
    "title": "Create a new graph file | Cacher Game",
    "summary": "Create a new graph file To create a new Visual Scripting graph file, you can use the Unity Editor's Project window, Visual Scripting's empty graph creation flow, or create a graph from a Script Machine or State Machine component. Use the Project window If you create a graph with the Project window, the graph is blank. It contains no starter nodes, and isn't attached to any existing components in your project. For more information on the Unity Editor's Project window, see The Project window in the Unity User Manual. Use the empty graph creation flow If you use the empty graph creation flow, you have a few options for how to create your graph: You can choose to create an unassigned graph. The graph isn't assigned to a GameObject. You can choose to create a graph and assign it to an existing GameObject. Visual Scripting creates the required components on the GameObject for you to use your graph in your project. You can choose to create a graph and assign it to a new GameObject. Visual Scripting creates a new GameObject with the required components for you to use your graph in your project. For more information about GameObjects, see GameObjects in the User Manual. Any graph you create with the empty graph creation flow contains one or two initial nodes to help you get started with your graph. Tip To keep your project organized, place your Visual Scripting graphs in a Graphs folder inside your project's Assets folder. Use a Script Machine or State Machine You can also create a blank graph file directly on the Script Machine or State Machine component where you want to use it. For more information, see Create a graph on a Script Machine or State Machine."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-own-custom-event-listen-code.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-own-custom-event-listen-code.html",
    "title": "Listen to a Custom Scripting Event from a C# script | Cacher Game",
    "summary": "Listen to a Custom Scripting Event from a C# script You can use a C# script to listen for or receive a Custom Scripting Event from a Script Graph. You can use an Event receiver script to execute additional logic in your application. Note Before you can create a listener for a Custom Scripting Event node, you must create a Custom Scripting Event node and its trigger. The examples below are based on the previous example to create a Custom Scripting Event node. For more information, see Create a Custom Scripting Event node and Create a Custom Scripting Event Sender node. To receive a Custom Scripting Event from a Script Graph: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Right-click a folder in the Project window's folder list or anywhere in the Project window's preview pane. Go to Create > C# Script. Enter a name, such as EventReceiver, for the new script file. Press Enter. Double-click the new C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual. In your external editor, copy and paste the following code into your C# script: using Unity.VisualScripting; using UnityEngine; public class EventReceiver : MonoBehaviour { void Start() { EventBus.Register<int>(EventNames.MyCustomEvent, i => { Debug.Log(\"RECEIVED \" + i); }); } } Save your script file. Return to the Unity Editor. Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window. Do one of the following in the Hierarchy window: Select an existing GameObject where you want to attach the new script. Select Add New (+) and in the menu, select a new GameObject to add to your scene from any of the available options. You can also right-click anywhere in the Hierarchy window and select the same options in the context menu. With the GameObject selected in the Hierarchy window, go to Window > General > Inspector, or press Ctrl+3 (macOS: Cmd+3) to open the Inspector window. Select Add Component. In the Component menu, enter the name of the script file. Select it to add it to the GameObject. Select Play from the Unity Editor's Toolbar to enter Play mode. If you have a Custom Scripting Event Sender node or a C# script to trigger your Event, you can trigger your Custom Scripting Event. The EventReceiver script logs the following message to the console every time the Event is triggered, as shown in the following image."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-own-custom-event-node-trigger-code.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-own-custom-event-node-trigger-code.html",
    "title": "Trigger a Custom Scripting Event from a C# script | Cacher Game",
    "summary": "Trigger a Custom Scripting Event from a C# script You can send or trigger a Custom Scripting Event node in a Script Graph with a C# script instead of a Custom Scripting Event Sender node. For more information on how to create a Custom Scripting Event Sender node, see Create a Custom Scripting Event Sender node. Note Before you can trigger a Custom Scripting Event node, you must create your Custom Scripting Event node. The examples below are based on the previous example to create a Custom Scripting Event node. For more information, see Create a Custom Scripting Event node. To trigger an Event from a C# script: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Right-click a folder in the Project window's folder list or anywhere in the Project window's preview pane. Go to Create > C# Script. Enter a name, such as CodeTriggerCustomEvent, for the new script file. Press Enter. Double-click the new C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual. In your external editor, copy and paste the following code into your C# script: using Unity.VisualScripting; using UnityEngine; public class CodeTriggerCustomEvent : MonoBehaviour { void Update() { if (Input.anyKeyDown) { //Trigger the previously created Custom Scripting Event MyCustomEvent with the integer value 2. EventBus.Trigger(EventNames.MyCustomEvent, 2); } } } Save your script file. Return to the Unity Editor. Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window. Do one of the following in the Hierarchy window: Select an existing GameObject where you want to attach the new script. Select Add New (+) and in the menu, select a new GameObject to add to your scene from any of the available options. You can also right-click anywhere in the Hierarchy window and select the same options in the context menu. With the GameObject selected in the Hierarchy window, go to Window > General > Inspector, or press Ctrl+3 (macOS: Cmd+3) to open the Inspector window. Select Add Component. In the Component menu, enter the name of the script file. Select it to add it to the GameObject. Select Play from the Unity Editor's Toolbar to enter Play mode. Press any key on keyboard in the Game view. Visual Scripting triggers your Event in any Script Graph in the current scene that contains the Custom Scripting Event node. Next steps After you create the script, you can create a script to listen to your Event. You can also create an Event Sender node to trigger the Event from another Script Graph or location in the same Script Graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-own-custom-event-node.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-own-custom-event-node.html",
    "title": "Create a Custom Scripting Event node | Cacher Game",
    "summary": "Create a Custom Scripting Event node You can create a Custom Scripting Event node with a C# script. With C#, you can customize all aspects of your Custom Scripting Event, unlike a Visual Scripting custom Event. For more information on the different types of custom Events, see Custom Events. To create a Custom Scripting Event node: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Right-click a folder in the Project window's folder list or anywhere in the Project window's preview pane. Go to Create > C# Script. Enter a name, such as MyEventNode, for the new script file. Press Enter. Double-click the new C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual. In your external editor, copy and paste the following code into the C# script: using Unity.VisualScripting; using UnityEngine; //Register a string name for your Custom Scripting Event to hook it to an Event. You can save this class in a separate file and add multiple Events to it as public static strings. public static class EventNames { public static string MyCustomEvent = \"MyCustomEvent\"; } [UnitTitle(\"On my Custom Event\")]//The Custom Scripting Event node to receive the Event. Add \"On\" to the node title as an Event naming convention. [UnitCategory(\"Events\\\\MyEvents\")]//Set the path to find the node in the fuzzy finder as Events > My Events. public class MyCustomEvent : EventUnit<int> { [DoNotSerialize]// No need to serialize ports. public ValueOutput result { get; private set; }// The Event output data to return when the Event is triggered. protected override bool register => true; // Add an EventHook with the name of the Event to the list of Visual Scripting Events. public override EventHook GetHook(GraphReference reference) { return new EventHook(EventNames.MyCustomEvent); } protected override void Definition() { base.Definition(); // Setting the value on our port. result = ValueOutput<int>(nameof(result)); } // Setting the value on our port. protected override void AssignArguments(Flow flow, int data) { flow.SetValue(result, data); } } Save your script file. Return to the Unity Editor. Follow the process described in Configure project settings to regenerate your Node Library. Open a Script Graph where you want to add your new node. Right-click anywhere in the Graph Editor to open the fuzzy finder.. Go to Events > My Events. Select your On My Custom Event node to add it to the graph. Note If you change the UnitTitle or UnitCategory attributes for the node in your code, the node appears in the location in the fuzzy finder with the name that you specify. After you regenerate your Node Library, the Custom Scripting Event node appears in the fuzzy finder. If you didn't change the [UnitCategory] or [UnitTitle] from the sample code, then the fuzzy finder displays the node under Events > MyEvents, as the On my Custom Event node. For more information on the fuzzy finder, see The interface. Next steps After you create your Custom Scripting Event node, you can create a Custom Scripting Event Sender node to trigger your Event from another Script Graph or location in the same Script Graph. You can also create a script to trigger your Event from code or create a script to listen to your Event."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-own-custom-event-send-node.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-own-custom-event-send-node.html",
    "title": "Create a Custom Scripting Event Sender node | Cacher Game",
    "summary": "Create a Custom Scripting Event Sender node Note Before you create a Custom Scripting Event Sender node, you must create a Custom Scripting Event node. The examples below are based on the previous example to create a Custom Scripting Event node. For more information, see Create a Custom Scripting Event node. After you create a Custom Scripting Event node, you can create a Custom Scripting Event Sender node to trigger the Event from any other Script Graph in the same scene, or the same Script Graph. You can also choose to create a separate script to trigger the Event from code. For more information, see Trigger a Custom Scripting Event from a C# script. Create a node and add it to the fuzzy finder To create a Custom Scripting Event Sender node and add it to the fuzzy finder: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Right-click a folder in the Project window's folder list or anywhere in the Project window's preview pane. Go to Create > C# Script. Enter a name, such as SendMyEventNode, for the new script file. Press Enter. Double-click the new C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual. In your external editor, copy and paste the following code into the C# script: using Unity.VisualScripting; using UnityEngine; //Custom node to send the Event [UnitTitle(\"Send My Custom Event\")] [UnitCategory(\"Events\\\\MyEvents\")]//Setting the path to find the node in the fuzzy finder as Events > My Events. public class SendMyEvent : Unit { [DoNotSerialize]// Mandatory attribute, to make sure we don’t serialize data that should never be serialized. [PortLabelHidden]// Hide the port label, as we normally hide the label for default Input and Output triggers. public ControlInput inputTrigger { get; private set; } [DoNotSerialize] public ValueInput myValue; [DoNotSerialize] [PortLabelHidden]// Hide the port label, as we normally hide the label for default Input and Output triggers. public ControlOutput outputTrigger { get; private set; } protected override void Definition() { inputTrigger = ControlInput(nameof(inputTrigger), Trigger); myValue = ValueInput<int>(nameof(myValue),1); outputTrigger = ControlOutput(nameof(outputTrigger)); Succession(inputTrigger, outputTrigger); } //Send the Event MyCustomEvent with the integer value from the ValueInput port myValueA. private ControlOutput Trigger(Flow flow) { EventBus.Trigger(EventNames.MyCustomEvent, flow.GetValue<int>(myValue)); return outputTrigger; } } Save your script file. Return to the Unity Editor. Follow the process described in Configure project settings to regenerate your Node Library. After you regenerate your Node Library, the Custom Scripting Event Sender node appears in the fuzzy finder. If you didn't change the [UnitCategory] or [UnitTitle] from the sample code, then the fuzzy finder displays the node under Events > MyEvents, as the Send My Custom Event node. For more information on the fuzzy finder, see The interface. Trigger your Custom Scripting Event node You might use your Send My Custom Event node to trigger your Event based on keyboard input: Open a Script Graph where you want to add the new node. This can be the same or a different Script Graph from the one that contains your Custom Scripting Event node. Right-click anywhere in the Graph Editor to open the fuzzy finder.. Go to Events > Input. Select the On Keyboard Input node to add it to the graph. Right-click again in the Graph Editor to open the fuzzy finder. Go to Events > My Events. Select your Send My Custom Event node to add it to the graph. Connect the On Keyboard Input node's Trigger output port to the Send My Custom Event node's Input Trigger input port, as shown in the following image. Select Play from the Unity Editor's Toolbar to enter Play mode. Press and release the Spacebar in the Game view. The Custom Scripting Event Sender node triggers the Custom Scripting Event in your graph and sends the Event the value from My Value A. Next steps After you create a Custom Scripting Event Sender node, you can create a script to trigger your Event from code or create a script to listen to your Event."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-restore-backups.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-restore-backups.html",
    "title": "Create or restore a backup | Cacher Game",
    "summary": "Create or restore a backup If you don't use a version control system, such as Unity Collaborate, Git, or Subversion, it's a good practice to create backups of your Visual Scripting assets and settings. Create a backup at any time from your Project Settings. Back up your data before you update Visual Scripting to a new version. For more information on the update process, see Update Visual Scripting. Create a new backup To create a new backup of your Visual Scripting assets and settings: Go to Edit > Project Settings. Select Visual Scripting. Select Create Backup, then select OK. Visual Scripting creates a .zip file, with a name in the format Assets_YYYY_MM_DD_HH_MM_SS, in a Backups folder inside the Unity Project. Restore an existing backup To restore an existing backup of your Visual Scripting assets and settings: Go to Edit > Project Settings. Select Visual Scripting. Select Restore Backup. Visual Scripting opens your Backups folder in your system's file explorer. You can extract a .zip back-up file and import graphs and settings back into Unity. For more information on how to import assets into Unity, see Importing assets in the Unity User Manual."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-state.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-create-state.html",
    "title": "Create a new state | Cacher Game",
    "summary": "Create a new state You can create three types of State nodes in a State Graph: Script States, Any States, and Super States. For more information on the types of State nodes, see State Graphs in Graphs. You can also add a Sticky Note to add comments to a graph. Create a Script State To create a new blank Script State: [!include[open-state-menu](./snippets/vs-open-state-menu.md)] Select Create Script State. Visual Scripting creates a new Script State node. Open the Graph Inspector. In the Graph Inspector, choose a source for the Script State node: Embed: The graph only exists on the Script State node. You can only modify the graph from the node in its parent State Graph. Graph: The graph exists in a separate file. You can modify the graph outside of its parent State Graph and reuse the graph in other areas of your application. If you chose Graph: Select New. Enter a name for the graph file. Choose where you want to save the new graph. Select Save. To create a Script State from an existing Script Graph: [!include[open-state-menu](./snippets/vs-open-state-menu.md)] Select Create Script State. Visual Scripting creates a new Script State node. Open the Graph Inspector. In the Graph Inspector, set the source for the Script State node to Graph. Do one of the following: Select the object picker (circle icon) and choose a compatible Script Graph from your project. Click and drag a Script Graph file from your Project window and release on the Graph field. Tip Click and drag the Script Graph from your Project window into the Graph Editor to automatically create a Script State node. Create an Any State To create a new Any State node: With a State Graph open in the Graph window, right-click on an empty space in the Graph Editor to open the context menu. Select Create Any State. Create a Super State To create a new blank Super State: [!include[open-state-menu](./snippets/vs-open-state-menu.md)] Select Create Super State. Visual Scripting creates a new Super State node. Open the Graph Inspector. In the Graph Inspector, choose a source for the Super State node: Embed: The graph only exists on the Super State node. You can only modify the graph from the node in its parent State Graph. Graph: The graph exists in a separate file. You can modify the graph outside of its parent State Graph and reuse the graph in other areas of your application. If you chose Graph: Select New. Enter a name for the graph file. Choose where you want to save the new graph. Select Save. To create a Super State from an existing State Graph: [!include[open-state-menu](./snippets/vs-open-state-menu.md)] Select Create Super State. Visual Scripting creates a new Super State node. Open the Graph Inspector. In the Graph Inspector, set the source for the Super State node to Graph. Do one of the following: Select the object picker (circle icon) and choose a compatible State Graph from your project. Click and drag a State Graph file from your Project window and release on the Graph field. Tip Click and drag the State Graph from your Project window into the Graph Editor to automatically create a Super State node."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-creating-connections.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-creating-connections.html",
    "title": "Connect nodes in a Script Graph | Cacher Game",
    "summary": "Connect nodes in a Script Graph Connections control the flow of logic and data in a Script Graph's nodes. To connect nodes in a Script Graph: With a Script Graph open in the Graph window, either find an existing node where you want to make a connection, or add a new node to your Script Graph. Do one of the following: Connect to a new node. Connect to an existing node. Connect to a new node Select a port and point to a blank area in your graph to start the connection. Select again to open the fuzzy finder. Select an entry to automatically add that node at the end of your connection. Connect to an existing node Select a port and point to an existing port on another node. Select the port to make the connection. Delete a connection To delete a connection between two nodes: With a Script Graph open in the Graph window, right-click the port at either end of a connection. Visual Scripting deletes the connection. Next steps After you've connected nodes together, you can continue to add nodes to your Script Graph. You can also create and add variables, create node groups, or add a Subgraph. You can also add a Sticky Note to add comments to a graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-creating-transition.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-creating-transition.html",
    "title": "Create a transition between states | Cacher Game",
    "summary": "Create a transition between states To switch between states in a State Graph, you must use a Script Graph called a transition. For more information on State Graphs, see State Graphs. Create a transition with an embedded Script Graph To create a new transition to another state with an embedded graph in a State Graph: With a State Graph open in the Graph window, do one of the following: Right-click on the state where you want to make a transition, then in the context menu, select Make Transition. Select the state where you want to make a transition, then press Ctrl+click and drag away from your selected state. Do one of the following: Select or release while on an existing state in your State Graph to connect the states with a transition. Select or release while on an empty space in the Graph Editor to automatically create a new blank Script State at the end of your transition. Select your transition node. Open the Graph Inspector. In the Graph Inspector, set the Source to Embed. In the (Title) field, enter a title for your transition's Script Graph. In the (Summary) field, enter a brief descriptive summary of your transition's Script Graph. Note If you choose to use an embedded transition Script Graph, Visual Scripting automatically provides the Trigger Transition node you need for the graph. Create a transition with an external Script Graph file To create a new transition with a graph asset file in a State Graph: With a State Graph open in the Graph window, do one of the following: Right-click on the state where you want to make a transition, then in the context menu, select Make Transition. Select the state where you want to make a transition, then press Ctrl+click and drag away from your selected state. Do one of the following: Select or release while on an existing state in your State Graph to connect the states with a transition. Select or release while on an empty space in the Graph Editor to automatically create a new blank Script State at the end of your transition. Select your transition node. Open the Graph Inspector. In the Graph Inspector, set the Source to Graph. Do one of the following: Select the object picker (circle icon). Select a Script Graph from your project. Click and drag a Script Graph file from your Project window and release on the Graph field. Select New and create a new Script Graph. Double-click the new transition node to open the transition Script Graph. Create a self transition with an embedded Script Graph To create a new self transition for a state in a State Graph: With a State Graph open in the Graph window, right-click on the state where you want to make the transition. In the context menu, select Make Self Transition. Visual Scripting attaches a new Self Transition node to the state in the State Graph automatically. Select your transition node. Open the Graph Inspector. In the Graph Inspector, set the Source to Embed. In the (Title) field, enter a title for your transition's Script Graph. In the (Summary) field, enter a brief descriptive summary of your transition's Script Graph. Double-click the new self transition to open the transition Script Graph. Note If you choose to use an embedded transition Script Graph, Visual Scripting automatically provides the Trigger Transition node you need for your graph. Create a transition with an external Script Graph file To create a new transition with a graph asset file in a State Graph: With a State Graph open in the Graph window, right-click on the state where you want to make the transition. In the context menu, select Make Self Transition. Visual Scripting attaches a new Self Transition node to the state in the State Graph automatically. Open the Graph Inspector. In the Graph Inspector, set the Source to Graph. Do one of the following: Select the object picker (circle icon). Select a Script Graph from your project. Click and drag a Script Graph file from your Project window and release on the Graph field. Select New and create a new Script Graph. Double-click the new transition node to open the transition Script Graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-custom-events.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-custom-events.html",
    "title": "Custom Events | Cacher Game",
    "summary": "Custom Events Events trigger, or start, a chain of logic in a Script Graph based on a specific occurrence in your application. Some Event types, such as On Start or On Update, exist by default in Visual Scripting. These Event nodes tell Visual Scripting to run the nodes they're connected to after the Script Graph starts, or on every frame while the Script Graph is active. You can also create your own custom Scripting Events to specify conditions for when a Script Graph's logic runs. Visual Scripting has two types of custom Events: Custom Event nodes: Use Custom Event nodes and Custom Event Trigger nodes to raise simple custom Events that don't require complex logic. Custom Scripting Events: Create your own Custom Scripting Event nodes to raise more complex Event logic. Custom Event nodes Custom Event nodes are always accessible from the fuzzy finder. You don't need to write your own code to use these custom Events in a Script Graph. They don't require an event listener. You can use the Custom Event node to create multiple custom Events, as long as you give each Event a unique name. You can also customize the number of arguments that the Custom Event node can send. To configure a Custom Event node, you need to provide: A unique name. A GameObject. The number of arguments the Custom Event receives. For more information on how to configure and use a Custom Event node, see Add a Custom Event node. To trigger a Custom Event, use a Custom Event Trigger node and provide the unique name of the Event. For more information, see Add a Custom Event Trigger node. Visual Scripting displays errors in the Graph Inspector if the Custom Event node and a Custom Event Trigger node have different values for: The name of the Event. The provided GameObject for the Event. The number of arguments for the Event. All arguments on a Custom Event Trigger node must have values, even if the Custom Event node doesn't give those values to another node. In the following example, Visual Scripting displays an error for both Arg. 0 and Arg. 1, even though Arg. 1 isn't used. Custom Scripting Events You can create a Custom Scripting Event node with a C# script. With C#, you can customize all aspects of your Custom Scripting Event, such as which category or categories to use for your node in the fuzzy finder. For more information, see Create a Custom Scripting Event node. To use and trigger the Event, code a Custom Scripting Event Sender node or another C# script: For more information on how to send or trigger an Event with a node in a Script Graph, see Create a Custom Scripting Event Sender node. For more information on how to send or trigger an Event with code, see Trigger a Custom Scripting Event from a C# script. You can also use a C# script to listen to or receive your Event after you trigger it in a Script Graph. You can use your receiver script to trigger more logic in your application. For more information, see Listen to a Custom Scripting Event from a C# script."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-custom-types.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-custom-types.html",
    "title": "Custom types | Cacher Game",
    "summary": "Custom types Use a C# script file to create your own object types in Unity. These types are called classes. Classes are a blueprint for objects in your code. They decide what kind of data an object holds and what your code can do with that object. A class can hold multiple variables with different data types in a single object. Create a custom class to use it as a type for variables and other objects in a Visual Scripting Script graph. For more information on how to add and use your own custom types in Visual Scripting, see Use a custom type. The code you include in a C# script can also create new nodes to manipulate the data in your class. For example, you might write code to keep track of the characteristics of different player characters in your application. You can create a class, Player, and have different variables in that class for name, character type, favorite color, or player level: using System; using UnityEngine; using Unity.VisualScripting; [Serializable, Inspectable] public class PlayerCharacter { [Inspectable] public string name; [Inspectable] public string type; [Inspectable] public string color; [Inspectable] public int level; } Tip The variables in the example script above use the [Inspectable] attribute so they can display in Unity's Inspector window and the Visual Scripting Graph Inspector. Without the attribute, you can't assign a value to any variables that use the PlayerCharacter class in a Script Graph. For more information about the [Inspectable] attribute, see Use a custom type. These values can be different across different instances of Player objects in your code. Player1 can be Erin, a bard, who loves green and is level 5, and Player2 can be Sam, a mage, who loves black and is level 15. If you tried to represent the same data with basic variables, you must create a lot of nodes, as in the following example. With a custom class, you can create a single node to represent a player character's information, instead of four separate nodes."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-debug-messages.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-debug-messages.html",
    "title": "Working with debug messages | Cacher Game",
    "summary": "Working with debug messages You can use debug nodes to see the result of a code segment inside the Unity console. For example, attaching a Debug node to a Variable node outputs the value of the variable. Tip Debugs are a useful tool when prototyping. To create a debug message Important Remove or disconnect the debugs from the graphs before producing the final executable. Add a Script Machine component to the GameObject. Select Edit Graph. Do one of the following: Use the starting events that are created with the script machine. Add an event node to the graph. Drag and release from the node port. The fuzzy finder appears. In the finder field, enter “Log”. A list of Debug nodes appears. Select the relevant debug message type you want to use (for example Log(Message), Log Error(Message) or Log Warning(Message)). The select Debug node is placed in the graph and linked to the event. Drag and release from the Debug green (output) port. The fuzzy finder appears. In the list, select the String node. A String node appears on the graph, connected to the Debug node.v Enter the debug message in the string node**.** Tip You can link variables or GameObjects other than a string to the port to see the value in the console. Whenever the graph is run and the Event is fired, the debug node executes and the text in the String appears in the console. Note The debug bar indicates the number of messages of each debug type (in the following order Message, Error, Warning)."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-debugging.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-debugging.html",
    "title": "Predictive and Live Debugging | Cacher Game",
    "summary": "Predictive and Live Debugging Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. Visual scripting can predict and indicate nodes in the script that can cause an error before entering play mode. It also analyzes your graphs to anticipate missing components or null references. If an error occurs at runtime, visual scripting pin-points the source of the euro by highlighting it in the graph. Predictive Debugging When a node is not properly configured or may cause an error, it is colored yellow. When a node is certain to cause an error, it is colored orange. In both cases you should examine the node and make the required changes until it turns back to its normal color. Example: The Log node is colored orange because it's missing the Message that it should output to the console. If you connect the result of A + B to Message, the Log node goes back to normal. However, the Add node turns orange, because it's missing its first operand, A. If values are provided for both operands, all colors return to normal. The B input port does not need to be connected as it has a default inline value. Null References Null reference exceptions are very common. They happen when a parameter expects a value, but it receives \"nothing\", or in scripting lingo, \"null\". Visual scripting attempts to predict null references if the Predict Potential Null References option is checked in Unity > Preferences > Visual Scripting > Flow Graph. Example: Even though the Destroy node has an inline value, as it is set to \"None\" (null), it is colored orange. There are some rarer nodes that allow for null parameters. Unfortunately, because there is no way to know that from codebase analysis, visual scripting colors them orange as a false positive. If this is a recurring issue, turn off Predict Potential Null References. Missing Components When nodes are used that require components and pass a game object or a component that does not have the specified component, the node is colored yellow as a warning. For example, even though there are default values for each value input of the Add Force node, visual scripting detects that the owner game object does not have a rigidbody and provides a warning. Visual scripting does not color the node orange because it is possible to add components to game objects at runtime, so the node is not guaranteed to cause a crash if you add the required component before calling it. If this use case happens often in the project, you can disable Predict Potential Missing Components debugging from Unity > Preferences > Visual Scripting > Flow Graphs. Live Debugging When in play mode, the currently active nodes are highlighted in blue. If an error occurs, the node that caused it is highlighted in red. Example: The following is an example of a faulty graph. The result logs \"my 3rd third favorite fruit\" to the console when you press space. Here's what happens when play is selected and the object is clicked. All nodes are highlighted in blue as soon as you click because they were activated. However, there was an error in the console. Visual scripting highlights the faulty node in red. A common mistake is to assume array indices start at 1, whereas they actually start at 0. In scripting, indices are always zero-based; the first item is at index 0, the second at index 1, the third at index 2, etc. To get third item, write 2 in the field."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-developers-guide.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-developers-guide.html",
    "title": "Developer's guide | Cacher Game",
    "summary": "Developer's guide _Misc Node Description Formula Outputs the result of the formula entered, which has a user specified number of input ports. Can create vector 2,3,4 and access all variables by name (object, graph, scene, application, saved). GetApplicationVariable Gets an application variable by name. GetGraphVariable Gets a graph variable by name. GetMember Invokes a getter via reflection (field or property, static or instance). GetObjectVariable Gets an object variable by name. GetSavedVariable Gets a saved variable by name. GetSceneVariable Gets a scene variable by name. GetVariable Gets a graph variable by name. InvokeMember Invokes a method via reflection (static or instance). IsApplicationVariableDefined Returns true if the variable is defined. IsGraphVariableDefined Returns true if the variable is defined. IsObjectVariableDefined Returns true if the variable is defined. IsSavedVariableDefined Returns true if the variable is defined. IsSceneVariableDefined Returns true if the variable is defined. IsVariableDefined Returns true if the variable is defined. This (formerly Self) Provides a reference to the GameObject that has the Machine Component running the graph. SetApplicationVariable Sets an application variable by name. SetGraphVariable Sets a graph variable by name. SetMember Invokes a setter via reflection (field or property, static or instance). SetObjectVariable Sets an object variable by name. SetSavedVariable Sets a saved variable by name. SetSceneVariable Sets a scene variable by name. SetVariable Sets a variable by name. Collections Node Description CountItems Provides a count of the number of items in the collection. FirstItem Gets a reference to the first item in the collections. LastItem Gets a reference to the last item in the collection. Collections, Dictionaries Node Description AddDictionaryItem Adds Key/Value pair into dictionary. ClearDictionary Removes all elements from the dictionary. CreateDictionary Creates a local dictionary. DictionaryContainsKey Returns true if the dictionary contains an entry with a matching key. GetDictionaryItem Return value for a dictionary entry with the provided keys. MergeDictionaries Combines the contents of two dictionaries into a single dictionary. RemoveDictionaryItem Removes an entry from the dictionary with the provided key. SetDictionaryItem Replaces the value of an existing entry with the provided key. Collections, Lists Node Description AddListItem Adds an item to the list. ClearList Removes all elements from the list. CreateList Creates a local list. GetListItem Gets the item in a list at the specified position provided by the index. InsertListItem Inserts an item into a list at the specified position provided by the index. ListContainsItem Returns true if the item is contained in the list. MergeLists Combines the contents of two lists into a single list. RemoveListItem Removes the item from the list (if it is present). RemoveListItemAt Removes the item from the list that is at the specified position provided by the index. SetListItem Replaces the item in the list with a new item at the specified position provided by the index. Control Node Description If (Formerly Branch) Executes the True branch if the provided input is true, otherwise executes the False branch. Break Immediately exits the current loop. Cache Flow node reads its input value whenever a value from any source is entered and outputs it when its output port is pulled. For A loop control. The Body branch is executed, providing an Index equal to First. If execution isn't interrupted (for example, by Break), the Index is incremented by Step. If the Index is less than Last, the Body branch is executed again. This process repeats until the Index is greater than Last, at which point the Exit branch is executed and the loop terminates. ForEach A loop control that executes Body once for every item (provided as Item) contained in the provided collection. Once completed, the Exit branch is executed. Once Flow node with an internal state that triggers its output only the first time it is entered. Entering a second time does not trigger the output flow. After a reset, the next time you enter, will trigger the output flow. SelectOnEnum Provides the object associated to the enum value provided as an input. SelectOnFlow Provides the object associated to the incoming flow branch that triggered the node. SelectOnInteger Data branching based on an input integer. SelectOnString Data branching based on an input string. SelectUnit Data branching based on an input enum. Sequence Executes a series of branches in order. To determine the order, specify the number of steps in the sequence, labelled with their order (e.g. 0, 1, 2, 3). SwitchOnEnum Executes the branch associated to the provided enum value. SwitchOnInteger Flow branching based on an input integer. SwitchOnString Flow branching based on an input string. Throw Causes an exception with the provided message. ToggleFlow Flow branching based on whether the node is On or Off, with inputs to set or toggle its On/Off state. ToggleValue Flow branching based on whether a value got set to its associated On/Off value. TryCatch Executes the Try branch. If an exception occurs in that branch, execute the Catch branch. Once the Try branch completes without exceptions or the Catch branch completes, the Finally branch is executed. While Executes the Body branch. Repeat this step as long as the provide condition is true. When that condition is no longer true, execute the Exit branch. Events Node Description TriggerCustomEvent Triggers a custom event by name. Logic Node Description And Logical AND (equivalent to &&) returns true if both operands are true and returns false otherwise. Comparison All comparisons in one node: inputs A/B, outputs < <= > >= == !=, and so on. Equal Logical AND (equivalent to &&) returns true if both operands are true and returns false otherwise. ExclusiveOr Exclusive OR (equivalent to ^) compares the first operand to the second operand and returns true only when inputs differ (one is true, the other is false). Greater Greater than (equivalent to >) returns false if the relationship in the expression is false; otherwise, returns true. GreaterOrEqual Greater than or equal to (equivalent to >=) returns false if the relationship in the expression is false; otherwise, returns true. Less Less than (equivalent to <) returns false if the relationship in the expression is false; otherwise, returns true. LessOrEqual Less than or equal to (equivalent to <=) returns false if the relationship in the expression is false; otherwise, returns true. Negate Negation (equivalent to !) reverses the meaning of its operand. NotEqual The not equal to operator (equivalent to. !=) returns true if the operands don't have the same value; otherwise, it returns false. Or Logical OR (equivalent to ||) returns true if either or both operands is true and returns false otherwise. Math, Generic Node Description Add Calls the + operator on inputs. Divide Calls the / operator on inputs. Modulo Calls the % operator on inputs. Multiply Call the * operator on inputs. Subtract Calls the - operator on inputs. Math, Scalar Node Description Absolute Absolute returns the absolute value of an integer. Add Sum of two floats. Average Average of all float inputs. Divide Divides the first float by the second float and returns the result. Exponentiate Raises the base to an exponent. Lerp Interpolates within a range based on a parameter. Maximum Computes the maximum values passed in its argument. Minimum Computes the minimum values passed in its argument. Modulo Returns the remainder of a float divided by another float. MoveTowards Returns the result of moving Current towards Target by up to Max Delta. Multiply Multiplies two floats. Normalize Equivalent to MathF.Sign. PerSecond Multiplies the value by the duration of the frame (for example, to move smoothly from frame to frame with a fixed speed). Root Calculates x to the root of n. Round Rounds a float - ceil, floor or closest integer. Subtract Subtracts the first float from the second float and returns the result. Sum Sum of multiple floats. Math, Vector2 Node Description Absolute Gives both the x and y values of a Vector2 a positive sign. Add Sum of two vectors. Angle Angle between two directional vectors. Average Average of a series of Vector2 value. Distance Distance between two Vector2 points. Divide Divide the components of one Vector2 by the corresponding components of a second Vector2. DotProduct Dot Product between two Vector2 values. Lerp Interpolates within a range based on a parameter. Maximum Computes the maximum values passed in its argument. Minimum Computes the minimum values passed in its argument. Modulo Returns a Vector2 where the components of the first vector are moduled by the corresponding components of the second vector. MoveTowards Returns the result of moving Current towards Target by up to Max Delta. Multiply Multiplies the corresponding components of two Vector2 values. Normalize Returns a Vector2 with a magnitude of 1 that retains the same direction. PerSecond Multiplies the value by the duration of the frame (for example, to move smoothly from frame to frame with a fixed speed). Project Projects one vector onto another vector. Round Rounds the components of a Vector2 to closest integer value. Subtract Subtracts one Vector2 value from another Vector2 value. Sum Adds two Vector2 values. Math, Vector3 Node Description Absolute Gives both the x and y values of a Vector3 a positive sign. Add Sum of two vectors. Angle Angle between two directional vectors. Average Average of a series of Vector3 value. Distance Distance between two Vector3 points. Divide Divide the components of one Vector3 by the corresponding components of a second Vector3. DotProduct Dot Product between two Vector3 values. Lerp Interpolates within a range based on a parameter. Maximum Computes the maximum values passed in its argument. Minimum Computes the minimum values passed in its argument. Modulo Returns a Vector3 where the components of the first vector are moduled by the corresponding components of the second vector. MoveTowards Returns the result of moving Current towards Target by up to Max Delta. Multiply Multiplies the corresponding components of two Vector3 values. Normalize Returns a Vector3 with a magnitude of 1 that retains the same direction. PerSecond Multiplies the value by the duration of the frame (for example, to move smoothly from frame to frame with a fixed speed). Project Projects one vector onto another vector. Round Rounds the components of a Vector3 to closest integer value. Subtract Subtracts one Vector3 value from another Vector3 value. Sum Adds two Vector3 values. Math, Vector4 Node Description Absolute Gives both the x and y values of a Vector4 a positive sign. Add Sum of two vectors. Angle Angle between two directional vectors. Average Average of a series of Vector4 value. Distance Distance between two Vector4 points. Divide Divide the components of one Vector4 by the corresponding components of a second Vector4. DotProduct Dot Product between two Vector4 values. Lerp Interpolates within a range based on a parameter. Maximum Computes the maximum values passed in its argument. Minimum Computes the minimum values passed in its argument. Modulo Returns a Vector4 where the components of the first vector are moduled by the corresponding components of the second vector. MoveTowards Returns the result of moving Current towards Target by up to Max Delta. Multiply Multiplies the corresponding components of two Vector4 values. Normalize Returns a Vector4 with a magnitude of 1 that retains the same direction. PerSecond Multiplies the value by the duration of the frame (for example, to move smoothly from frame to frame with a fixed speed). Project Projects one vector onto another vector. Round Rounds the components of a Vector4 to closest integer value. Subtract Subtracts one Vector4 value from another Vector4 value. Sum Adds two Vector4 values. Nesting Node Description GraphInput Gets the value of a graph input when the graph is used as a Subgraph. GraphOutput Gets the value of a graph output when the graph is used as a Subgraph. StateUnit References another state machine graph as a state in the current graph. Subgraph References another flow graph as a Subgraph in the current graph. TriggerStateTransition In a transition graph, triggers the transition to the target graph in the parent state machine graph. Nulls Node Description Null Null literal. NullCheck Branching based on the input value being null. NullCoalesce Returns the input value or a default value if the input value is null. Time Node Description Cooldown Coroutine node that can re-trigger its output only after a certain cooldown time interval. Timer Coroutine node that triggers its output after a time interval. WaitForEndOfFrameUnit Coroutine node that yields return new WaitForEndOfFrame(). WaitForFlow Coroutine node that waits until the input flow port is triggered. WaitForNextFrameUnit Coroutine node that returns null. WaitForSecondsUnit Coroutine node that returns new WaitForSeconds(). WaitUntilUnit Coroutine node that returns new WaitUntill(() => value). WaitWhileUnit Coroutine node that returns new WaitUntill(() => !value). Variables Node Description SaveVariables Forces saved variables to be saved to the PlayerPrefs (this is useful on platforms that do not support automatic save on quit). Events Node Description UnityEvent Called when a UnityEvent is pointed to TriggerUnityEvent. CustomEvent Bolt's custom events, defined by name. Events, Animation Node Description Animation Event Called when an animation event points to TriggerAnimationEvent. This version allows you to use the string parameter as the event name Named Animation Event Called when an animation event points to TriggerAnimationEvent. This version allows you to use the string parameter as the event name. OnAnimatorIK https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnAnimatorIK.html OnAnimatorMove https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnAnimatorMove.html Events, Application Node Description OnApplicationFocus https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnApplicationFocus.html OnApplicationLostFocus Implements https://docs.unity3d.com/ScriptReference/ MonoBehaviour.OnApplicationFocus.html OnApplicationPause https://docs.unity3d.com/ScriptReference/ MonoBehaviour.OnApplicationPause.html OnpplicationQuit https://docs.unity3d.com/ScriptReference/ MonoBehaviour.OnApplicationQuit.html OnApplicationResume Implements https://docs.unity3d.com/ScriptReference/ MonoBehaviour.OnApplicationPause.html Events, Editor Node Description OnDrawGizmos https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnDrawGizmos.html OnDrawGizmosSelected https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnDrawGizmosSelected.html Events, GUI Node Description OnBeginDrag Implements IBeginDragHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IBeginDragHandler.html OnButtonClick Registers to a Button's onClick event https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ UI.Button.html OnCancel Implements ICancelHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.ICancelHandler.html OnDeselect Implements IDeselectHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IDeselectHandler.html OnDrag Implements IDragHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IDragHandler.html OnDrop Implements IDropHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IDragHandler.html OnDropdownValueChanged Registers to a Dropdown's onValueChanged event https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ UI.Dropdown.html OnEndDrag Implements IEndDragHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IEndDragHandler.html OnGUI Triggers on MonoBehaviour.OnGUI https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ MonoBehaviour.OnGUI.html OnInputFieldEndEdit Registers to an InputField's onEndEdit event https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ UI.InputField.html OnInputFieldValueChanged Registers to an InputField's onValueChanged event https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ UI.InputField.html OnMove Implements IMoveHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IMoveHandler.html OnPointerClick Implements IPointerClickHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IPointerClickHandler.html OnPointerDown Implements IPointerDownHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IPointerDownHandler.html OnPointerEnter Implements IPointerEnterHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IPointerEnterHandler.html OnPointerExit Implements IPointerExitHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IPointerExitHandler.html OnPointerUp Implements IPointerUpHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IPointerUpHandler.html OnScroll Implements IPointerScrollHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IPointerScrollHandler.html OnScrollbarValueChanged Registers to a Scrollbar's onValueChanged event https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ UI.Scrollbar.html OnScrollRectValueChanged Registers to a ScrollRect's onValueChanged event https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ UI.ScrollRect.html OnSelect Implements ISelectHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.ISelectHandler.html OnSliderValueChanged Registers to a Sliders's onValueChanged event https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ UI.Slider.html OnSubmit Implements ISubmitHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.ISubmitHandler.html OnToggleValueChanged Registers to a Toggle's onValueChanged event https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ UI.Toggle.html Events, Hierarchy Node Description OnTransformChildrenChanged https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnTransformChildrenChanged.html OnTransformParentChanged https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnTransformParentChanged.html Events, Input Node Description OnButtonInput On Update, checks Input.GetButtonDown/GetButtonUp/GetButton based on the specified Action type https://docs.unity3d.com/2019.1/Documentation/ScriptReference/Input.html. OnKeyboardInput On Update, check Input.GetKeyDown/GetKeyUp/GetKey based on the specified action type https://docs.unity3d.com/2019.1/Documentation/ScriptReference/Input.html OnMouseDown https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnMouseDown.html OnMouseDrag https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnMouseDrag.html OnMouseEnter https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnMouseEnter.html OnMouseExit https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnMouseExit.html OnMouseInput https://docs.unity3d.com/ScriptReference/ Input.GetMouseButton.html OnMouseOver https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnMouseOver.html OnMouseUp https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnMouseUp.html OnMouseUpAsButton https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnMouseUpAsButton.html Events, Lifecycle Node Description FixedUpdate https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.FixedUpdate.html LateUpdate https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.LateUpdate.html OnDestroy https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnDestroy.html OnDisable https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnDisable.html OnEnable https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnEnable.html Start https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.Start.html Update https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.Update.html Events, Navigation Node Description OnDestinationReached Trigger if a NavMeshAgent's remaining distance to its target is less than the provided threshold and either has a current NavMeshPathStatus of PathComplete or requireSuccess is false. https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ AI.NavMeshAgent.html. Events, Physics Node Description OnCollisionEnter https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnCollisionEnter.html OnCollisionExit https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnCollisionExit.html OnCollisionStay https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnCollisionStay.html OnControllerColliderHit https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnControllerColliderHit.html OnJointBreak https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnJointBreak.html OnParticleCollision https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnParticleCollision.html OnTriggerEnter https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnTriggerEnter.html OnTriggerExit https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnTriggerExit.html OnTriggerStay https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnTriggerStay.html Events, Physics 2D Node Description OnCollisionEnter2D https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnCollisionEnter2D.html OnCollisionExit2D https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnCollisionExit2D.html OnCollisionStay2D https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnCollisionStay2D.html OnControllerColliderHit2D https://docs.unity3d.com/ScriptReference/ MonoBehaviour.OnControllerColliderHit.html OnJointBreak2D https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnJointBreak2D.html OnParticleCollision2D https://docs.unity3d.com/ScriptReference/ MonoBehaviour.OnParticleCollision.html OnTriggerEnter2D https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnTriggerEnter2D.html OnTriggerExit2D https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnTriggerExit2D.html OnTriggerStay2D https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnTriggerStay2D.html Events, Rendering Node Description OnBecameInvisible https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnBecameInvisible.html OnBecameVisible https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnBecameVisible.html Events, State Node Description OnEnterState When a state is entered. OnExitState When a state is exited."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-editor-script-issues.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-editor-script-issues.html",
    "title": "Known Issues: Unity Editor script functions | Cacher Game",
    "summary": "Known Issues: Unity Editor script functions If you use nodes that use Unity Editor script functions in any of the Visual Scripting graphs in your project, it causes errors when you try to build your project. Cause of the build errors Unity Visual Scripting (UVS) doesn't support preprocessor directives, so the use of Unity Editor script functions within graphs isn't possible. However, these functions can appear as node options within UVS because UVS uses C# reflection to generate nodes for your project based on your included assemblies. If you add one of these Unity Editor script nodes to a graph that's used in a build of your project, Unity generates an error when it attempts to build the project. An error message of the following format is displayed in the Unity Console: /<ProjectPath>/<CSharpFile>.cs: error CS0103: The name '<MissingApiName>' does not exist in the current context. The following code sample is an example of preprocessor directives for Unity Editor scripts : #if UNITY_EDITOR public static List<Type> GetAllVolumeComponents() { // TypeCache is only accessible in UnityEditor. // If you instantiate a GetAllVolumeComponents node in a graph // it prevents the project from being built. return TypeCache.GetTypesDerivedFrom<VolumeComponent>().ToList(); } #endif Find flagged packages Packages that contain editor scripts are flagged with a warning icon in the Node Library section of the Visual Scripting tab in the Project Settings window. To find the affected packages, do the following: Go to Edit > Project Settings. In the Project Settings window, select the Visual Scripting tab. On the Visual Scripting tab expand the Node Library section. A yellow warning flag is displayed next to any affected packages as shown in the following screenshot. Resolution To resolve this issue, go through your graphs and replace nodes that correspond to the API mentioned in the error message until you find the error no longer occurs."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-events-reference.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-events-reference.html",
    "title": "Events node | Cacher Game",
    "summary": "Events node Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. Scripting nodes listen for events. They are the starting point for all scripts and appear as special green nodes in graphs. There are many kinds of events, grouped in sub-categories under the root Events category (fuzzy finder > Events). Two simple common events are Start and Update, both located under Lifecycle. Start is called once when the graph or event handler is first created. Update is called at every frame while the graph or event handler is active. New script machines start with both these events by default. Inputs & Outputs All events have a single Trigger control output that starts the script when they are triggered. Value inputs are options that influence when the event is triggered. For example, some events have a Target setting that determines which object is listening to the event. Most often, you'll leave this setting at its default value of Self. The value outputs on events are arguments that are passed from the event, giving you more information about what actually happened. For example, on the On Trigger Enter event, the other collider that is involved in the collision is an output. Custom Events There is a special type of event, the Custom Event that triggers custom events across graphs, along with their custom arguments. For example, to create a custom event called On Damage that gets called so the character loses health, the event should have one integer argument that indicates the amount of damage to inflict. Listen to the event by creating a Custom Event node (under Events). Set the name to On Damage. The set the argument count, below the name, to 1. Note Indices are zero-based, so the first argument is labeled Arg. 0. To trigger the event from elsewhere, use the Trigger Custom Event node, located right under the Custom Event node in the fuzzy finder. Enter the name of the event exactly as it is sensitive to case and whitespace. For example, to create a script machine on a boulder that could hit the player, use the force of the impact as the damage. The collider that hit with the boulder is the target of our trigger; the On Damage event is triggered on all machines attached to that collider. Use the damage value to subtract health from the receiver object. Custom events do not require a receiver and do not cause an error if there isn't a listener to handle them. Animation Events Use animation events to trigger Bolt graphs when you reach a certain point in your animation. Select an object with a machine and an animator. Then, from the animation window, add an animation event. With the event selected, choose TriggerAnimationEvent as the function from the inspector. Use any parameter from the inspector. In your script graph, add an Animation Event node (under Events >Animation). There are two types of events: a global animation event, and a named animation event. The difference is that the first type listens to all animation events on the object and return the string parameter. The second type's trigger is the string parameter that is equal to the specified name input. Unity Events Use Unity Events to trigger events that have been setup from the inspector. These are commonly found in GUI components like buttons, but they can also be created in your custom scripts. Configure them by selecting an object with a machine and select the Trigger Unity Event method. In the string field, type the event name to listen to in the graph and in the graph, add a UnityEvent node with a matching name. Additional arguments are not supported on Unity events. Events API Visual scripting provides a simple API to trigger custom events from C# script. Add the following usings to your C# script to access the API. using Unity.VisualScripting Triggering API A single method call is needed to trigger a custom event. Pass as many arguments as required. CustomEvent.Trigger(targetGameObject, argument1, argument2, ...) For example, this custom event node: Can be triggered with this line of code. CustomEvent.Trigger(enemy, \"Damage\", 30);"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-events.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-events.html",
    "title": "Events API | Cacher Game",
    "summary": "Events API Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. Visual scripting provides a simple API to trigger custom events from C# script. Usings Add the following usings to your C# script to access the API. using Unity.VisualScripting; Triggering A single method call is needed to trigger a custom event. Pass as many arguments as required. CustomEvent.Trigger(targetGameObject, argument1, argument2, ...) For example, this custom event node: Can be triggered with this line of code. CustomEvent.Trigger(enemy, \"On Damage\", 30);"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-formula.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-formula.html",
    "title": "Formula node | Cacher Game",
    "summary": "Formula node Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. Formula is a powerful node that evaluates logical and mathematical expressions directly via a textual Formula and a list of Arguments. Important Due to the binary tree traversal overhead (despite caching attempts), performance in using the formula node is significantly slower than using the operator nodes individually. It is preferable to avoid using this node at every frame. Although a formula can return either a boolean for logic, or a number for math, formulas can return any type of value. The first text field in the header is the formula itself. The second text field is the number of arguments. It's set to 2 by default, giving us A and B as inputs. Formulas can have up to 10 arguments, which are always ordered alphabetically. If more are required, they are called B, C, D, E, and so forth. For example, this formula returns a boolean indicating: whether, at a minimum, 10 seconds have elapsed since the start of the game and the current object's name is Player. Arguments Variable Names Variable names can be directly used in the formula. For example, a graph variable named health can return a boolean just by typing the formula health > 50. The argument names are evaluated in the following order of priority: Alphabetical argument names (a - z) Graph variable names Object variable names Scene variable names Application variable names Saved variable names Properties and Methods Retrieve the value of a property on an argument or variable by using the [arg.prop] notation. For example, if position is a Vector 3 object variable, check if it is equal to zero with: [position.x] = 0. Get the return value of parameterless methods with the [arg.Method()] notation. Note: Accessing properties and methods is not guaranteed to be compatible with AOT platforms, because the AOT pre-build cannot generate stubs for members that are only accessed by name. Literals Use the following literals for assigning fixed values. Literal Description Example Number An integer or float. 3.5 String A piece of text between apostrophes. \"Hello World!\" Boolean A boolean value. true, false Null The null constant. a != null Delta Time The Unity frame delta time. 30 * dt Invert Delta Time The inverse of the delta time. 30 / second Operators Every common logical and mathematical operator can be used in formulas, as well as the ones defined through custom operator overloading in script. Operator Operation Rank Result Example not, ! Logical Negation Unary The opposite of the operand. not true - Numerical Negation Unary The negative of the operand. -5 and, && Logical And Binary True if both operands are true. (a < 5) and (b > 3) or, || Logical Or Binary True if either operand is true (a < 5) or (b > 3) =, == Equality Binary True if the two operands are equal. a = b !=, <> Inequality Binary True if the two operands are not equal. a != b <, <=, >, >= Numeric Comparison Binary The result of a numeric comparison a >= 10 + Addition Binary The sum of the two operands. a + 5 - Subtraction Binary The difference between the two operands. b - 3 * Multiplication Binary The product of the two operands. 12 * a / Division Binary The quotient of the two operands. b / 2 % Modulo Binary The remainder of the division of the two operands. a % 2 ?: If Ternary The left operand if the condition is true, otherwise the right operand. (health > 0) ? \"Alive\" : \"Dead\" All common bitwise operators like ~ and >> are also supported. Functions You can also use any function from the following table. Name Result Example abs The absolute value of a specified number. abs(-1) acos The angle whose cosine is the specified number. acos(1) asin The angle whose sine is the specified number. asin(0) atan The angle whose tangent is the specified number. atan(0) ceiling The smallest integer greater than or equal to the specified number. ceiling(1.5) cos The cosine of the specified angle. cos(0) exp e raised to the specified power. exp(0) floor The largest integer less than or equal to the specified number. floor(1.5) log The logarithm of a specified number. log(1, 10) log10 The base 10 logarithm of a specified number. log10(1) max The larger of two specified numbers. max(1, 2) min The smaller of two numbers. min(1, 2) pow A specified number raised to the specified power. pow(3, 2) round Rounds a value to the nearest integer or specified number of decimal places. round(3.222, 2) sign 1 if the number is positive, -1 is if it negative. sign(-10) sin The sine of the specified angle. sin(0) sqrt The square root of a specified number. sqrt(4) tan The tangent of the specified angle. tan(0) truncate The integral part of a number. truncate(1.7) v2 Creates a 2D vector. v2(0, 0) v3 Creates a 3D vector. v3(0, 0, 0) v4 Creates a 4D vector. v4(0, 0, 0, 0)"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-graph-machine-types.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-graph-machine-types.html",
    "title": "Script Machines and State Machines | Cacher Game",
    "summary": "Script Machines and State Machines A Script Machine is a GameObject component that lets you use a Script Graph in an application. You can't use a Script Graph unless it's attached to a Script Machine. For more information on components, see Introduction to components in the Unity User Manual. Script Machines can either link to a graph asset, or they can contain an embedded Script Graph asset. A State Machine is the same as a Script Machine, except it contains a State Graph. For more information on the difference between a Script Graph and a State Graph, see Graphs. Add a Script Machine or State Machine component to a GameObject and Visual Scripting automatically adds a Variables component. The Variables component holds any Object variables that you define in a Script Graph or State Graph attached to the GameObject. For more information on variables, see Variables. For more information on how to add a Script Machine or State Machine to a GameObject and attach a graph file, see Attach a graph file to a Script Machine or State Machine Source types Script Machines and State Machines have two options for their Source: a graph file (Graph), or an embedded asset (Embed). Set the Source for a Script Machine or State Machine at any time. If you switch the Source from Graph to Embed, the graph file still exists as a separate file from the State Machine or Script Machine inside of your project. Caution If you switch your Source from Embed to Graph, you will lose the embedded graph asset. You can copy the nodes from an embedded graph to a graph asset to avoid data loss. Other features of Visual Scripting, such as transitions, Super States, and Subgraphs, also have these source type options. The Graph source type Use the Graph source type to make your graphs faster to load and easier to maintain. Any changes made to a graph file apply to every Script Machine or State Machine that links to that graph file, even if those GameObjects don't use the same Prefab. To use the same graph across multiple GameObjects, use a Graph source type. You might encounter some situations where an embedded graph works best. The Embed source type An Embed graph exists only in the scene where it's created, if it isn't attached to a Prefab. This can cause problems with source control systems. If you delete a GameObject with an Embed graph asset, you will lose your graph. Changes made to an embedded graph aren't saved while the Editor is in Play mode. Use the Embed source type if: You need references to GameObjects from the current scene in the graph and the graph isn't on a Prefab. The graph is on a Prefab that you plan to instantiate in the application during runtime. You only need to use the logic in the graph once in the application. You can't reuse an embedded graph across multiple GameObjects unless the graph is on a Prefab. An embed graph only exists on the Script Machine or State Machine where you created it. This means you can share the graph across instances of a Prefab, but not on more than one GameObject. For more information about Prefabs, see Prefabs in the User Manual."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-graph-types.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-graph-types.html",
    "title": "Graphs | Cacher Game",
    "summary": "Graphs A graph is a Visual Scripting asset that contains a visual representation of logic in an application. Visual Scripting has two different types of graphs: Script Graphs and State Graphs. You can use either graph type in specific situations to define and change how GameObjects in an application behave. Script Graphs and State Graphs must be attached to a Script Machine or State Machine to be used in a project. For more information on Script Machines and State Machines, see Script Machines and State Machines. Script Graphs Script Graphs control and connect specific actions and values. The actions in a Script Graph happen in a specific order. Actions can happen every frame, or when a specific event occurs. Visual Scripting represents the actions in a Script Graph through nodes. Connect nodes together with edges to tell your application what to do, and in what order. Script Graphs can access a large collection of nodes, which correspond to different features and functionality in the Unity Editor. Access these nodes through the fuzzy finder. Script Graphs define the specifics of what a GameObject does while your application runs. State Graphs A State Graph has states and gives the logic for when your application moves between states, through connections called transitions. Use State Graphs to design AI behavior or define scene and level structures. A state is any set of behaviors that you want a GameObject to perform, represented as a Script Graph. Visual Scripting represents states in State Graphs through State nodes. A State node can link to a Script Graph with logic for your application to follow, or give another State Graph with additional transitions and State nodes. States and transitions in a State Graph tell your application when to change its behavior, based on an event or after it fulfills a condition. For example, you might have an enemy character with Patrol and Chase states. The enemy character's actions can change from the actions in the Script Graph for the Patrol state to the actions for the Chase state after it detects the player character. The detection event for the enemy character triggers the transition between the two states. State Graphs don't use the fuzzy finder. They use a specific set of State nodes, which are in the Visual Scripting context menu: Script States contain a Script Graph. When an application triggers a Script State, Visual Scripting runs the logic in a Script State's attached Script Graph. Script States use On Enter State Event, On Update Event, and On Exit State Event nodes to control logic based on the current state. Super States contain another, nested State Graph. A Super State can help you better organize a State Graph, and reuse states and transitions across multiple graphs. Any States serve as a placeholder for any other state in a State Graph. You can use an Any State node and create a single transition to a new state, rather than create multiple transitions from other states. Transitions connect Script States, Any States, and Super States. Transitions contain Script Graphs that tell your application when to switch from one state to the next. For more information, see Transitions. You can set any Script State node or Super State node as a Start State. Any state marked as a Start State is automatically active when Visual Scripting runs a State Graph. You can also have multiple Start States in a single graph. The Super State, Start, and Script State nodes in the following example are all Start States."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-groups.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-groups.html",
    "title": "Create node groups | Cacher Game",
    "summary": "Create node groups You can organize the nodes in your Script Graphs and State Graphs with node groups. Create a new group To create a new group: Open the graph where you want to create a new group. In an empty area of the Graph Editor, Ctrl+click (macOS: Cmd+click) and drag to create a selection. Release the mouse to create the group. After you create a group, you can: Change the group name Add a comment to the group Change the color of the group Resize the group Move the group Change a group name To change the name of the group in your graph: In the group header, click Group. Enter a new name for the group. Press Enter to save your changes. Add a comment to a group To add a comment to a group in a graph: Select the group where you want to add a comment. Open the Graph Inspector. In the (Comment) field in the Graph Inspector, enter comments or information about the group. Note Group comments are only visible in the Graph Inspector. To add comments to a graph that are always visible, use a Sticky Note. Change the color of a group To change the color of a group in a graph: Select the group you want to edit. Open the Graph Inspector. In the Graph Inspector, select the Color field. Select a new color for your group through one of the following methods: Use the color picker. Use the sliders or RGBA value fields. Enter a hexadecimal color value. Select the eyedropper icon and select a color from anywhere on your screen. Resize a group To resize a group in a graph: Click and drag from any edge or corner on the group. Move a group To move a group and its nodes: Click and drag the group's header to a new location in the Graph Editor. Note You can also move a group without moving any of the nodes inside, but the required input changes based on your chosen control scheme. For more information, see Choose a control scheme Next steps After you've created a node group, you can add nodes to your Script Graph, create and add variables, or add a Subgraph. You can also add a Sticky Note to add comments to a graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-input-nodes.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-input-nodes.html",
    "title": "Input Event nodes | Cacher Game",
    "summary": "Input Event nodes Input nodes are an Event node type that can read input from Unity's Input Manager or Input System package for use in a Script Graph. For more information about how to read and capture input in Visual Scripting, see Capture user input in an application. Input System package nodes The following nodes read and interact with Events from the Input System package: Node Description On Input System Event Button The On Input System Event Button node listens for a specific Input Action from a Player Input component. It doesn't send or read any other data. On Input System Event Float The On Input System Event Float node listens for a specific Input Action from a Player Input component. The node can output a single float value. On Input System Event Vector 2 The On Input System Event Vector 2 node listens for a specific Input Action from a Player Input component. The node can output two values as a Vector 2. Input Manager nodes The following nodes read and interact with Events from Unity's Input Manager: Node Description On Button Input The On Button Input node listens for a specified action on a virtual button from your Input Manager configuration. On Keyboard Input The On Keyboard Input node listens for a specified action on a keyboard key. On Mouse Down The On Mouse Down node listens for a mouse click action on a specific GameObject in your application. On Mouse Drag The On Mouse Drag node listens for a mouse click and hold on a specific GameObject in your application. It triggers the next node connected to it as long as the mouse button is held down on that GameObject. On Mouse Enter The On Mouse Enter node listens for the user's mouse pointer location to enter the Collider of a specified GameObject. When the mouse enters the Collider or GUI element, the node triggers the next node connected to it. On Mouse Exit The On Mouse Exit node listens for the user's mouse pointer location to exit the Collider of a specified GameObject. When the mouse exits the Collider or GUI element, the node triggers the next node connected to it. On Mouse Input The On Mouse Input node listens for a specific action on a user's mouse. The action doesn't need to happen on a specific GameObject's Collider. On Mouse Over The On Mouse Over node listens for a user's mouse to land over a specified GameObject's Collider. While the user's mouse is over the Collider, it triggers the next node connected to it once every frame. On Mouse Up As Button The On Mouse Up As Button node listens for a user to release their mouse button after they click a Collider in your application. To trigger the On Mouse Up As Button node, the user must release their mouse button over the same Collider they clicked. On Mouse Up The On Mouse Up node listens for a user to release their mouse button after they click a Collider in your application. The user can release their mouse button anywhere in your application to trigger the On Mouse Up node. Additional resources Capturing input in your application Capture input using the Input System package Capture input using the Input Manager"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-interface-overview.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-interface-overview.html",
    "title": "The interface | Cacher Game",
    "summary": "The interface Visual Scripting's main window is the Graph window. The Graph window has five main elements: The Graph Editor, where you create, arrange, and connect nodes. The fuzzy finder, which you can use to find nodes and add them to your graph. The Graph toolbar, where you can change settings specific to your view in the Graph Editor and perform some common layout operations. The Graph Inspector, where you can view detailed information about your nodes and configure additional settings for your graph. The Blackboard, where you can define and edit variables to use in your graphs. The Graph Editor The Graph Editor is the center editing area of the Graph window. You can use the Graph Editor to create your Visual Scripting graphs. You can create nodes and connect them with edges. You can change some default shortcuts and behaviors in the Graph Editor through your control scheme. For more information on the available control schemes in Visual Scripting, see Choose a control scheme. The fuzzy finder The fuzzy finder is a searchable menu that lists every node available in Visual Scripting. Right-click anywhere in the Graph Editor to open the fuzzy finder. Search for a node by name with the Search bar, or open a category from the list to view related nodes. For example, nodes related to the creation or manipulation of variables are in the Variables category. You can add new nodes to Visual Scripting from your own code, from other packages, or from other Unity features. For more information on how to add nodes to the fuzzy finder, see Configure project settings. The Graph toolbar The Graph toolbar lets you display or hide the Graph Inspector and Blackboard. The Graph toolbar also includes a breadcrumb trail for navigation through nested graphs that displays your current location. Select a graph from the trail to return to that graph file. You can also configure some additional settings that control how nodes display in the Graph Editor. Property Description Lock Lock the current Script Graph or State Graph to the Graph window. Visual Scripting keeps the current graph open, even if you select another GameObject with a graph file in the Hierarchy window. Graph Inspector Display or hide the Graph Inspector. Blackboard Display or hide the Blackboard. Breadcrumb Location Displays the name of the current graph. If you open a Subgraph or State Unit, or a State node inside a State Graph, use the breadcrumbs to navigate back to the parent graph. Zoom Set a zoom level for your view of the Graph Editor. Relations Enable Relations to display inner flow connections for Script Graph nodes. For example, on a standard Multiply node, the Relations setting draws a line from each input port that merges into a single line on the output port. The lines display the flow of data inside the node. Disable Relations to hide these inner connections. Values Enable Values to display the input and output values sent between nodes while the Unity Editor is in Play mode. This can make it easier to debug your scripts. Disable Values to hide input and output values while in Play mode. For more information on Play mode, see The Game view in the Unity User Manual. NOTE This setting corresponds to the Show Connection Values setting in the Preferences window for Visual Scripting. For more information on this preference, see Configure your preferences. Dim Enable Dim to dim any nodes in the Graph Editor that aren't yet connected to the control flow in your graph. The Dim setting provides you with a visual cue that a node isn't used in the current configuration of your graph. Disable Dim to display all nodes as active regardless of their connection state. NOTE This setting corresponds to the Dim Inactive Nodes setting in the Preferences window for Visual Scripting. For more information on this preference, see Configure your preferences. Carry Enable Carry to move all connected child nodes when you move a parent node. Disable Carry to only move the currently selected node. NOTE This setting corresponds to the Carry Children setting in the Preferences window for Visual Scripting. For more information on this preference, see Configure your preferences. Align Choose an alignment option to align any nodes in your current selection. Align Left Edges Align all nodes in the selection based on their left edge. Align Centers Align all nodes in the selection based on their vertical centers. Align Right Edges Align all nodes in the selection based on their right edges. Align Top Edges Align all nodes in the selection based on their top edges. Align Middles Align all nodes in the selection based on their horizontal middles. Align Bottom Edges Align all nodes in the selection based on their bottom edges. Distribute Choose a distribution option to evenly distribute space between any nodes in your current selection. Distribute Left Edges Distribute all nodes in the selection to leave an equal distance between the left edges of each node. Distribute Centers Distribute all nodes in the selection to leave an equal distance between the vertical centers of each node. Distribute Right Edges Distribute all nodes in the selection to leave an equal distance between the right edges of each node. Distribute Horizontal Gaps Distribute all nodes in the selection to leave an equal-sized horizontal gap between each node. This distribution affects the space between the left and right edges of nodes. Distribute Top Edges Distribute all nodes in the selection to leave an equal distance between the top edges of each node. Distribute Middles Distribute all nodes in the selection to leave an equal distance between the horizontal middles of each node. Distribute Bottom Edges Distribute all nodes in the selection to leave an equal distance between the bottom edges of each node. Distribute Vertical Gaps Distribute all nodes in the selection to leave an equal-sized vertical gap between each node. This distribution affects the space between the top and bottom edges of nodes. Overview Select Overview to automatically pan and zoom to fit all elements of your current graph within the Graph Editor. Full Screen Select Full Screen when the Graph window is docked in the Unity Editor to maximize the Graph window to the full size of the Editor window. Your Visual Scripting preferences can change some settings in the Graph toolbar or change how these settings behave. For example, you can control how fast the Graph Editor zooms in and out when you set a zoom level. For more information, see Configure your preferences. The Graph Inspector The Graph Inspector provides additional information about an open graph, or about any node you select in the Graph Editor. If a node requires additional configuration, you can use the Graph Inspector to set these values. To display or hide the Graph Inspector, select Graph Inspector () from the toolbar. To move the Graph Inspector to the other side of the Graph window, select either Dock Right () or Dock Left (). The Blackboard The Blackboard provides options to configure and manage variables in a graph. The Blackboard divides variables into five distinct scopes, across five tabs: Graph, Object, Scene, App, and Saved. For more information on the available variable scopes in Visual Scripting, see Variables. To display or hide the Blackboard, select Blackboard () from the toolbar. To move the Blackboard to the other side of the Graph window, select either Dock Right () or Dock Left ()."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-live-edit-runtime.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-live-edit-runtime.html",
    "title": "Live edit during runtime | Cacher Game",
    "summary": "Live edit during runtime Live editing in visual scripting goes beyond adjusting values in real-time. Live editing also includes the ability to add and remove nodes as well as connectors; you can code while the game is playing and immediately affect the gameplay. Remember that: Changes you make to embed graphs are reverted when you exit play mode; they live inside components. Changes you make to graphs are saved when you exit play mode; they live inside assets. Graph variables are saved when not in an embed graph. The following variables are not saved: Object Scene App Saved Note If you’ve used an embed graph and do not want to lose your modifications, copy all the changes you made to the embed graph before exiting Play mode. Paste them back in when in edit mode. You can’t do this for any changed variables. As a visual aid, connectors in Live mode display their execution flow with animated directional droplets going in the direction of execution. The speed and number of droplets does not represent the frequency or speed of execution. To adjust the graph during runtime With a graph open do any or all of the following: In the Inspector, click in any field to change a component’s value. The values are not persistent and won’t save when you leave Play mode. Right-click in an empty spot in the graph and add a node. Connect nodes. Delete any connectors. Add an extension. Add and link Debug nodes. Change values directly in a node. Tip Select any GameObject that contains a script graph to see and work with the values of the selected GameObject during runtime. Note When you modify anything after a Start event during runtime you won’t get the update on the GameObject during that session. You need to restart the session for Unity to execute the new logic after the start event. The changes you make to a graph are instantly shared across all instances of that saved graph asset."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-live.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-live.html",
    "title": "Live edit | Cacher Game",
    "summary": "Live edit Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. Visual Scripting supports live editing. In live editing you can create and edit graphs while in play mode and see the Visual Scripting updates in real time. This provides a fast way to iterate and test ideas without the need to recompile project changes. Working in live edit Live editing is not limited to tweaking values — you can add and remove nodes, connections (edges), etc while live. Anything that can be done in a normal edit, can be done in a live edit. In accordance with the Unity convention: Changes made to embeds are reverted when you exit play mode - the changes live inside components. Changes made to graphs are saved when you exit play mode - the changes live inside assets Tip To preserve the changes made to a component graph, copy the modified nodes before exiting play mode. You'll then be able to paste back while in edit mode. When in live mode, Visual Scripting is displayed the flow as droplets on connections. To disable these animations on either the value connections, the control connections, or both, uncheck the Animate Control Connections or the Animate Value Connections from the editor preferences window (Unity > Preferences > Visual Scripting > Script Graphs). Saving changes through persistence Visual Scripting graphs automatically saves the changes made during play mode. Propagation across graphs Changes made to graphs are instantly shared across all instances of that graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nesting-add-state-unit.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nesting-add-state-unit.html",
    "title": "Add a State Unit to a Script Graph | Cacher Game",
    "summary": "Add a State Unit to a Script Graph Add a State Unit to a Script Graph to trigger a change of state. A state is any set of behaviors that you want a GameObject to perform. For more information on state in Visual Scripting, see Graphs. You can add a new State Graph to a State Unit node, or use an existing State Graph from the project. For more information on the State Unit node, see State Unit node. Add a new State Graph as a State Unit node To add a new blank State Graph as a State Unit node to a Script Graph: [!include[with-graph-open-ff](./snippets/vs-with-graph-open-ff.md)] Go to Nesting. Select State Unit to add a State Unit node to the graph. Open the Graph Inspector. In the Graph Inspector, choose the source for the State Unit: Embed: The State Graph only exists on the State Unit node. You can only change the State Graph from the node in its parent graph. Graph: The State Graph exists in a separate file. You can change the State Graph outside of its parent graph and reuse the graph in other areas of an application. If you chose Graph: In the Graph Inspector, select New. Enter a name for the graph file. Choose where you want to save the graph file in the project. Select Save. Add an existing State Graph as a State Unit node To add an existing State Graph file as a State Unit node in a Script Graph: With a Script Graph open in the Graph window, right-click on an empty space in the Graph Editor to open the fuzzy finder. Go to Nesting. Select State Unit to add a State Unit node to the graph. Open the Graph Inspector. In the Graph Inspector, set the Source to Graph. Do one of the following: In the Graph field, select the object picker (circle icon) and choose a compatible State Graph from the project. Click and drag a State Graph file from the Project window and release on the Graph field. Tip For a faster way to add a State Graph as a State Unit node: Click and drag a State Graph asset from the Project window into the Graph Editor to automatically create a State Unit node. Right-click to open the fuzzy finder. Go to Graphs and select a graph file. Next steps Select Edit Graph in the Graph Inspector to edit the graph. For more information on how to create a State Graph, see Develop logic transitions with State Graphs."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nesting-add-subgraph.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nesting-add-subgraph.html",
    "title": "Add a Subgraph to a Script Graph | Cacher Game",
    "summary": "Add a Subgraph to a Script Graph A Subgraph is a Script Graph nested inside of another Script Graph. A Subgraph appears as a single node inside a parent Script Graph. For more information on the Subgraph node, see Subgraph node. You can add a Subgraph to a Script Graph in two ways: create a new Script Graph, or add an existing Script Graph file. Add a new Subgraph to a Script Graph To add a new blank Subgraph to an existing Script Graph: [!include[with-graph-open-ff](./snippets/vs-with-graph-open-ff.md)] Go to Nesting. Select Subgraph to add a Subgraph node to the graph. Open the Graph Inspector. In the Graph Inspector, choose the source for the Subgraph: Embed: The Subgraph only exists on the Subgraph node. You can only change the Subgraph from the node in its parent graph. Graph: The Subgraph exists in a separate file. You can change the Subgraph outside of its parent graph and reuse the graph in other areas of an application. If you chose Graph: In the Graph Inspector, select New. Enter a name for the graph file. Choose where you want to save the graph file in the project. Select Save. Add an existing Script Graph as a Subgraph To add an existing graph file as a Subgraph in a Script Graph: Note You can't nest a Script Graph as a Subgraph in its own graph file. With a Script Graph open in the Graph window, right-click on an empty space in the Graph Editor to open the fuzzy finder. Go to Nesting. Select Subgraph to add the Subgraph node to the graph. Open the Graph Inspector. In the Graph Inspector, set the Source to Graph. Do one of the following: In the Graph field, select the object picker (circle icon) and choose a compatible Script Graph from the project. Click and drag a Script Graph file from the Project window and release on the Graph field. Tip For a faster way to add a Script Graph as a Subgraph: Click and drag a Script Graph asset from the Project window into the Graph Editor to automatically create a Subgraph node. Right-click to open the fuzzy finder. Go to Graphs and select a graph file. Next steps To open the new Subgraph and edit the graph, select Edit Graph. After you've added a Subgraph to a Script Graph, define its ports. For more information, see Add a Trigger or Data port to a Script Graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nesting-add-triggers-data-graph.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nesting-add-triggers-data-graph.html",
    "title": "Add a Trigger or Data port to a Script Graph | Cacher Game",
    "summary": "Add a Trigger or Data port to a Script Graph A Script Graph used as a Subgraph can receive data and logic from its parent graph. Add and define ports on a graph to choose what data graphs can send and receive. For more information about Subgraphs, see Subgraphs and State Units. Add ports from a graph To add a Trigger Input, Trigger Output, Data Input, or Data Output port to a Script Graph: Open the Script Graph you want to edit in the Graph window. With no nodes or groups selected in the graph, open the Graph Inspector. Select Add (+) under the port type you want to add: Trigger Inputs Trigger Outputs Data Inputs Data Outputs In the Key field, enter a unique key name for the port. The Key value can't match the Key of any existing ports on the current Script Graph. NOTE If two Key values are the same on the same graph, Visual Scripting ignores the second port definition and displays a warning in the Graph Inspector. If you change the Key value for a port after you've made a connection to that port in a graph, the connections break and you must reconnect them. In the Label field, enter a label to display for the port. The label displays on the Subgraph node and its Input or Output node. NOTE If you don't set a Label, Visual Scripting uses the value from the Key field. In the Summary field, enter a brief summary of the port to display in the Graph Inspector when you select the Subgraph node, Input node, or Output node. Toggle Hide Label to do the following: Enable Hide Label to hide the port label on any Subgraph node, Input node, or Output node. Disable Hide Label to display the data from the Label field. (Data Inputs and Data Outputs Only) Set a data type for the port: Select the Type list to open the Type menu. Select a data type from the list to set the data type the port accepts. (Data Inputs Only) Enable Has Default Value to display the Default Value field. Disable Has Default Value to hide the Default Value field. In the Default Value field, enter the default value the port uses if it doesn't receive a data input while the Script Graph runs. Add ports with Input and Output nodes You can also use an Input node or an Output node to define ports on a Script Graph: Open the Script Graph you want to edit in the Graph window. [!include[open-fuzzy-finder](./snippets/vs-open-fuzzy-finder.md)] Go to Nesting. Do one of the following: To add a Trigger Input or Data Input port to the graph, select Input. To add a Trigger Output or Data Output port to the graph, select Output. Select the new Input or Output node in the graph. Open the Graph Inspector. In the Key field, enter a unique key name for the port. The Key value can't match the Key of any existing ports on the current Script Graph. NOTE If two Key values are the same on the same graph, Visual Scripting ignores the second port definition and displays a warning in the Graph Inspector. If you change the Key value for a port after you've made a connection to that port in a graph, the connections break and you must reconnect them. In the Label field, enter a label to display for the port. The label displays on the Subgraph node and its Input or Output node. NOTE If you don't set a Label, Visual Scripting uses the value from the Key field. In the Summary field, enter a brief summary of the port to display in the Graph Inspector when you select the Subgraph node, Input node, or Output node. Toggle Hide Label to do the following: Enable Hide Label to hide the port label on any Subgraph node, Input node, or Output node. Disable Hide Label to display the data from the Label field. (Data Inputs and Data Outputs Only) Set a data type for the port: Select the Type list to open the Type menu. Select a data type from the list to set the data type the port accepts. (Data Inputs Only) Enable Has Default Value to display the Default Value field. Disable Has Default Value to hide the Default Value field. In the Default Value field, enter the default value the port uses if it doesn't receive a data input while the Script Graph runs. Next steps Add the Script Graph as a Subgraph in another Script Graph. For more information on how to add a Script Graph as a Subgraph, see Add a Subgraph to a Script Graph. For more information on the port types on a Script Graph, see Subgraph node. The defined Trigger and Data ports affect the ports on the Input and Output nodes in a Script Graph. For more information, see Input node and Output node."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nesting-input-node.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nesting-input-node.html",
    "title": "Input node | Cacher Game",
    "summary": "Input node Use an Input node to control the flow of logic and data from a Script Graph's Subgraph node. An Input node takes data from a parent graph and makes it available to a Subgraph. For more information on Subgraphs, see Subgraphs and State Units and Subgraph node. For more information on Script Graphs, see Graphs. Fuzzy finder category The Input node is in the Nesting category in the fuzzy finder. Available outputs By default, an Input node has no ports. An Input node can only have output ports. Define the number and specific data type for the output ports with the Graph Inspector. For more information on how to define ports on a Script Graph, see Add a Trigger or Data port to a Script Graph. Port Type Description Trigger Input A control port. Make a connection to this port to tell Visual Scripting what node to run next in the graph. Visual Scripting triggers any node to this port after the matching Trigger Input port triggers on the Subgraph node in the parent Script Graph. Data Input A data port. Make a connection to this port to send a value or other data to another node in the graph. The data source is the matching Data Input port on the Subgraph node in a parent Script Graph. Example graph usage In the following example, the Character Move Subgraph uses an Input node to receive data from a parent graph. The Input node has one Trigger Input port and three Data Input ports. It uses the values from the parent graph and the values from two Input Get Axis nodes to create a new Vector 3 value that it sends back to its parent graph. The parent graph sends three values from the current GameObject's Transform component to the Input node. The Subgraph reduces the number of nodes in the parent graph. Related nodes Use an Input node with the following nodes: Subgraph node Output node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nesting-nodes.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nesting-nodes.html",
    "title": "Nesting nodes | Cacher Game",
    "summary": "Nesting nodes Use the following nodes to work with nesting Subgraphs and State Units in a Script Graph. For more information on Subgraphs and State Units, see Subgraphs and State Units. Node Description Input node Use an Input node to control the flow of logic and data from a Script Graph's Subgraph node. An Input node takes data from a parent graph and makes it available to a Subgraph. Output node Use an Output node to control the flow of logic and data from a Script Graph's Subgraph node. An Output node sends data from a Subgraph and makes it available to a parent graph. State Unit node Use a State Unit node like a Subgraph. The node references and triggers a State Graph as a State Unit inside a Script Graph. Subgraph node Use a Subgraph node to reference and trigger another Script Graph's logic from inside a parent Script Graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nesting-output-node.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nesting-output-node.html",
    "title": "Output node | Cacher Game",
    "summary": "Output node Use an Output node to control the flow of logic and data from a Script Graph's Subgraph node. An Output node sends data from a Subgraph and makes it available to a parent graph. For more information on Subgraphs, see Subgraphs and State Units and Subgraph node. For more information on Script Graphs, see Graphs. Fuzzy finder category The Output node is in the Nesting category in the fuzzy finder. Available inputs By default, an Output node has no ports. The Output node can only have input ports. Define the number and specific data type for the input ports with the Graph Inspector. For more information on how to define ports on a Script Graph, see Add a Trigger or Data port to a Script Graph. Port Type Description Trigger Output A control port. Make a connection to this port to tell Visual Scripting which node triggers its exit from the Subgraph and the return to the logic in a parent graph. After the Output node runs, Visual Scripting starts any connections made to the matching Trigger Output port on the Subgraph node. Data Output A data port. Make a connection to this port to send data from a Subgraph to its parent graph. Visual Scripting returns any value from a node connected to this port to any node connected to the matching Data Output port on the Subgraph node. Example graph usage In the following example, the Character Move Subgraph uses an Input node to receive data from a parent graph. The Subgraph uses three values from the parent graph and the values from two Input Get Axis nodes to create a new Vector 3 value. The graph sends the new Vector 3 value to the Output node and back to the parent Script Graph. The Subgraph reduces the number of nodes in the parent graph. The parent graph receives the Vector 3 value from the Output node. The parent graph uses that value to set a new position on the current GameObject's Transform component. Related nodes Use an Output node with the following nodes: Subgraph node Input node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nesting-state-unit-node.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nesting-state-unit-node.html",
    "title": "State Unit node | Cacher Game",
    "summary": "State Unit node Use a State Unit node like a Subgraph. The node references and triggers a State Graph inside a Script Graph. A State Unit node: Can't send or receive any data from ports. Can only trigger its associated State Graph or other nodes inside its parent Script Graph. Can't change its number or type of ports. For more information on Subgraphs and State Units, see Subgraphs and State Units. For more information on State Graphs and Script Graphs, see Graphs. Fuzzy finder category The State Unit node is in the Nesting category in the fuzzy finder. You can go to the Graphs category and select any State Graph to create a State Unit node. For more information on how to create a State Unit node, see Add a State Unit to a Script Graph. Inputs The State Unit node has the following input ports: Name Type Description Start Input Trigger The first execution Input Trigger for the node. The connection made to this port indicates when Visual Scripting runs the nested State Graph. Visual Scripting makes all states marked as Start States in the State Graph active. Stop Input Trigger The second execution Input Trigger for the node. The connection made to this port indicates when Visual Scripting stops the nested State Graph. Visual Scripting makes all states and transitions in the State Graph inactive. Outputs The State Unit node has the following output ports: Name Type Description Started Output Trigger The first execution Output Trigger for the node. The connection made to this port indicates what Visual Scripting runs after the nested State Graph starts. Stopped Output Trigger The second execution Output Trigger for the node. The connection made to this port indicates what Visual Scripting runs after the nested State Graph stops. Example graph usage Tip A State Unit node can use a new blank State Graph or an existing State Graph from a project. For more information, see Add a State Unit to a Script Graph. In the following example, a State Unit node triggers when the Script Graph's GameObject enters a specific Collider marked as a trigger. After the State Unit node starts, the Script Graph uses a Debug Log node to log Started new state! to the console. When the GameObject leaves the Collider, the State Unit node stops, and the Script Graph uses another Debug Log node to log Exited state to the console."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nesting-subgraph-node.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nesting-subgraph-node.html",
    "title": "Subgraph node | Cacher Game",
    "summary": "Subgraph node Use a Subgraph node to reference and trigger another Script Graph's logic from inside a parent Script Graph. For more information on Subgraphs, see Subgraphs and State Units. For more information on Script Graphs, see Graphs. Fuzzy finder category The Subgraph node is in the Nesting category in the fuzzy finder. You can go to the Graphs category and select any Script Graph to create a Subgraph node. For more information on how to create a Subgraph, see Add a Subgraph to a Script Graph. Available ports By default, a Subgraph node has no ports. Use the Graph Inspector to specify the following on a Script Graph: Trigger Inputs. Trigger Outputs. Data Inputs. Data Outputs. These determine the type and number of ports available on its Subgraph node. For more information on how to define ports on a Script Graph, see Add a Trigger or Data port to a Script Graph. Port type Description Trigger Input Adds a control input port to the Subgraph node for the Script Graph. Use a Trigger Input to choose which node or nodes from a parent graph triggers Visual Scripting to run the logic in the Subgraph. Trigger Output Adds a control output port to the Subgraph node for the Script Graph. Use a Trigger Output to choose which node or nodes Visual Scripting triggers after the logic contained in the Subgraph finishes. Data Input Adds a data input port to the Subgraph node for the Script Graph. Use a Data Input to receive data from a parent graph. Data Output Adds a data output port to the Subgraph node for the Script Graph. Use a Data Output to send data back to a parent graph. Example graph usage Tip A Subgraph node can use a new blank Script Graph or an existing Script Graph from a project. For more information, see Add a Subgraph to a Script Graph. In the following example, the Subgraph node Character Move references a graph that makes a GameObject move based on a user's input. It has the following: One Trigger Input port. One Trigger Output port. Three Data Input ports. One Data Output port. After every Update Event in the application, the Character Move Subgraph node triggers and takes the X, Y, and Z coordinates of the current GameObject's Transform component. The Subgraph node then outputs a new Vector 3 value, which the parent graph assigns to the current GameObject with a Transform Set Position node. The Subgraph node reduces the number of nodes in the parent graph. Tip To see the Script Graph attached to the Subgraph node in this example, see either Input node or Output node. Related nodes Use a Subgraph node with the following nodes: Input node Output node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nesting-subgraphs-state-units.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nesting-subgraphs-state-units.html",
    "title": "Subgraphs and State Units | Cacher Game",
    "summary": "Subgraphs and State Units In a Script Graph, you can add a node that links directly to another Script Graph or State Graph. A nested Script Graph is a Subgraph. A nested State Graph is a State Unit. A nested Script Graph or State Graph helps you to organize and reuse logic across an application. A Subgraph or State Unit can exist as the node that adds it to a graph, or it can link to an external graph file. Subgraphs A Subgraph nests a Script Graph inside another Script Graph. Use a Subgraph node to reuse a set of logic across Script Graphs in an application. A Subgraph node can take inputs or send outputs back to its parent graph. Add ports to configure what data a Subgraph and its parent graph send to each other. Subgraph inputs and outputs With the Graph Inspector, you can choose and define the ports that appear when you use a Script Graph as a Subgraph. The port definitions for a Script Graph appear in the Graph Inspector when you have no other items selected in a graph. Defined ports appear on any Subgraph node that uses that Script Graph. In the following image, the Subgraph Rotate the Cube has: A Trigger Input port. An Data Input port. An Trigger Output port. An Data Output port. A port definition also changes the Input and Output nodes for a Subgraph. These nodes control the execution and flow between a Subgraph and its parent graph. In the following image, the Input and Output nodes have the same ports as the Rotate the Cube Subgraph node from the previous example. Note You can only use a single Input node and a single Output node in a Script Graph. If you add more Input or Output nodes, Visual Scripting only uses the first Input and Output nodes you added to the graph. For more information on how to add ports to a Script Graph, see Add a Trigger or Data port to a Script Graph. For more information on the different types of ports, see Subgraph node. For more information on how to use a Subgraph, see Add a Subgraph to a Script Graph. State Units A State Unit starts a State Graph from a Script Graph. You can't change the ports that appear on a State Unit node or send data between the State Graph and its parent Script Graph. The State Unit node starts different logic in a Script Graph, at different times in code execution: When the nested State Graph starts to run. While the nested State Graph runs. When the nested State Graph stops. After the nested State Graph stops. When you start a State Unit node's Start and Started ports in a parent graph, Visual Scripting marks all Start states inside the node's State Graph as active. When you start the Stop and Stopped ports, Visual Scripting marks all Start states as inactive. For more information on State Graphs and Start states, see State Graphs. For more information on the State Unit node, see State Unit node and Add a State Unit to a Script Graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-input-system-button.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-input-system-button.html",
    "title": "On Input System Event Button node | Cacher Game",
    "summary": "On Input System Event Button node Note The On Input System Event Button node is an Input System package node. For more information about how to use the Input System package in Visual Scripting, see Capture user input in an application. The On Input System Event Button node listens for a specific Input Action from a Player Input component. It doesn't send or read any other data. Use this node when you want to read user input but don't require any other data from an Input Action. Fuzzy finder category The On Input System Event Button node is in the Events > Input category in the fuzzy finder. Inputs The On Input System Event Button node has the following input ports: Name Type Description Target Player Input The Player Input component that Visual Scripting uses to display a list of input actions. The default is This, which is the Player Input component attached to the GameObject where Visual Scripting runs the Script Graph. You can also connect a node that outputs a Player Input component. Input Action Input Action An input action. Use the dropdown to select an input action from the Player Input component specified in Player Input, or connect a node that outputs an input action. Controls The On Input System Event Button node has the following controls: Name Type Description Input Action Change Type Input Action Change Option Set an Input Action Change Type to choose the interaction type that triggers the node. On Pressed The node triggers when a user presses the button from the selected Input Action input asset. On Hold The node triggers when a user holds the button from the selected Input Action input asset. On Released The node triggers when a user releases the button from the selected Input Action input asset. You can also set this control from the Graph Inspector. Additional node settings The On Input System Event Button node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Input System Event Button node has one output port: Name Type Description [!include[nodes-input-system-output-trigger-port](./snippets/input-system/nodes-input-system-output-trigger-port.md)] Example graph usage In the following example, an On Input System Event Button node counts how many times the user has pressed a button from the Fire Input Action and logs the result to the console. When a user presses a button associated with the Fire Input Action, Visual Scripting gets the current value of the Count Object variable with a Get Variable node. The Get Variable node sends Count's current value to an Add Inputs node's A port. Then, the Float literal node sends a value of 1 to the Add Inputs node's B port. The On Input System Event Button node triggers the Set Variable node and assigns the value from the Add Inputs node's Sum port as the New Value of Count. The Set Variable node logs the value of Count to the console with the Debug Log node: Related nodes The following nodes are related or similar to the On Input System Event Button node: On Input System Event Float node On Input System Event Vector 2 node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-input-system-float.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-input-system-float.html",
    "title": "On Input System Event Float node | Cacher Game",
    "summary": "On Input System Event Float node Note The On Input System Event Float node is an Input System package node. For more information about how to use the Input System package in Visual Scripting, see Capture user input in an application. The On Input System Event Float node lists for a specific Input Action from a Player Input component. The node can output a single float value. Use this node when you want to read user input and return a single value, such as an axis value or input from a trigger on a controller. Fuzzy finder category The On Input System Event Float node is in the Events > Input category in the fuzzy finder. Inputs The On Input System Event Float node has the following input ports: Name Type Description Target Player Input The Player Input component that Visual Scripting uses to display a list of input actions. The default is This, which is the Player Input component attached to the GameObject where Visual Scripting runs the Script Graph. You can also connect a node that outputs a Player Input component. Input Action Input Action An input action. Use the dropdown to select an input action from the Player Input component specified in Player Input, or connect a node that outputs an input action. Controls The On Input System Event Float node has the following controls: Name Type Description Input Action Change Type Input Action Change Option Set an Input Action Change Type to choose the interaction type that triggers the node. On Pressed The node triggers when a user presses the button from the selected Input Action input asset. On Hold The node triggers when a user holds the button from the selected Input Action input asset. On Released The node triggers when a user releases the button from the selected Input Action input asset. You can also set this control from the Graph Inspector. Additional node settings The On Input System Event Float node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Input System Event Float node has the following output ports: Name Type Description [!include[nodes-input-system-output-trigger-port](./snippets/input-system/nodes-input-system-output-trigger-port.md)] Float Value Float A float output port. Visual Scripting uses your chosen Input Action and its configuration in your Input Actions asset to determine the float value returned by this port. See the Example graph usage section for an example. For more information about how to configure Input Action settings and use an Input Action asset, see Input Action Assets in the Input System package documentation. Example graph usage In the following example, an On Input System Event Float node uses the bindings assigned to the Lift Input Action. When a user presses any key from the Lift binding, Visual Scripting takes the float value it receives from the Input System and sends it as an input to the Vector 3 Create node's Y input port. At the same time, Visual Scripting triggers the Transform Set Position node and uses the output from the Vector 3 Create node to set a new position for the Script Machine's GameObject. For this example, Lift uses a Right Trigger from a Gamepad input device as a binding. When a user presses the Right Trigger, the Y value of the GameObject's transform increases, which makes the GameObject move upwards in the scene. Related nodes The following nodes are related or similar to the On Input System Event Float node: On Input System Event Button node On Input System Event Vector 2 node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-input-system-vector2.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-input-system-vector2.html",
    "title": "On Input System Event Vector 2 node | Cacher Game",
    "summary": "On Input System Event Vector 2 node Note The On Input System Event Vector 2 node is an Input System package node. For more information about how to use the Input System package in Visual Scripting, see Capture user input in an application. The On Input System Event Vector 2 node listens for a specific Input Action from a Player Input component. The node can output two values as a Vector 2. Use this node when you want to read input and return two values, such as a joystick or mouse position. Fuzzy finder category The On Input System Event Vector 2 node is in the Events > Input category in the fuzzy finder. Inputs The On Input System Event Vector 2 node has the following input ports: Name Type Description Target Player Input The Player Input component that Visual Scripting uses to display a list of input actions. The default is This, which is the Player Input component attached to the GameObject where Visual Scripting runs the Script Graph. You can also connect a node that outputs a Player Input component. Input Action Input Action An input action. Use the dropdown to select an input action from the Player Input component specified in Player Input, or connect a node that outputs an input action. Controls The On Input System Event Vector 2 node has the following controls: Name Type Description Input Action Change Type Input Action Change Option Set an Input Action Change Type to choose the interaction type that triggers the node. On Pressed The node triggers when a user presses the button from the selected Input Action input asset. On Hold The node triggers when a user holds the button from the selected Input Action input asset. On Released The node triggers when a user releases the button from the selected Input Action input asset. You can also set this control from the Graph Inspector. Additional node settings The On Input System Event Vector 2 node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Input System Event Vector 2 node has the following output ports: Name Type Description [!include[nodes-input-system-output-trigger-port](./snippets/input-system/nodes-input-system-output-trigger-port.md)] Vector 2 Value Vector 2 A Vector 2 output port. Visual Scripting uses your chosen Input Action and its configuration in your Input Actions asset to determine the Vector 2 value returned by this port. See the Example graph usage section for an example. For more information about how to configure Input Action settings and use an Input Action asset, see Input Action Assets in the Input System package documentation. Example graph usage In the following example, an On Input System Event Vector 2 node uses the bindings assigned to the Move Input Action. When a user presses a button from the Move binding, Visual Scripting takes the Vector 2 value it receives from the Input System and sends it as an input to the Transform Set Position node's Value input port. The Vector 2 value changes the position of the GameObject associated with the Target transform. For this example, Move uses the W, A, S, and D keys. The GameObject moves up in the scene when the user presses W, moves down when the user presses S, and moves left or right when the user presses A or D. Related nodes The following nodes are related or similar to the On Input System Event Vector 2 node: On Input System Event Button node On Input System Event Float node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-on-button-input.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-on-button-input.html",
    "title": "On Button Input node | Cacher Game",
    "summary": "On Button Input node Note The On Button Input node is an Input Manager node. For more information about how to use the Input Manager with Visual Scripting, see Capture user input in an application. The On Button Input node listens for a specified action on a virtual button from your Input Manager configuration. It triggers the next node connected to it after the action occurs in the application. It doesn't send or receive any other data. Fuzzy finder category The On Button Input node is in the Events > Input category in the fuzzy finder. Inputs The On Button Input node has the following input ports: Name Type Description Name String The name of the button the node listens to for an Input event, as it appears in the Input Manager. Action Press State The specific press state of the button that the node listens for. Hold The user holds down the button. Down The user presses the button. Up The user releases the button. Additional node settings The On Button Input node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Button Input node has one output port: Name Type Description [!include[nodes-input-output-trigger](./snippets/input-manager/nodes-input-output-trigger.md)] Example graph usage In the following example, the On Button Input node listens for the user to press the button or key assigned to the Jump axes in the Input Manager. When the user presses the button, the On Button Input node triggers the Rigidbody Add Force node, which adds an Impulse Force to the Rigidbody's Y axis: The Add Force node makes the Target Rigidbody lift into the air. Related nodes The following nodes are related or similar to the to the On Button Input node: On Keyboard Input node On Mouse Down node On Mouse Drag node On Mouse Enter node On Mouse Exit node On Mouse Input node On Mouse Over node On Mouse Up node On Mouse Up As Button node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-on-keyboard-input.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-on-keyboard-input.html",
    "title": "On Keyboard Input node | Cacher Game",
    "summary": "On Keyboard Input node Note The On Keyboard Input node is an Input Manager node. For more information about how to use the Input Manager with Visual Scripting, see Capture user input in an application. The On Keyboard Input node listens for a specified action on a keyboard key. It triggers the next node connected to it after the action occurs in the application. It doesn't send or receive any other data. Fuzzy finder category The On Keyboard Input node is in the Events > Input category in the fuzzy finder. Inputs The On Keyboard Input node has the following input ports: Name Type Description Key Key Code The name of the keyboard key the node listens to for an Input event. For a list of all available keys, see the KeyCode page's Properties section in the Unity User manual. Action Press State The specific press state of the key that the node listens for. Hold The user holds down the key. Down The user presses the key. Up The user releases the key. Additional node settings The On Keyboard Input node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Keyboard Input node has one output port: Name Type Description [!include[nodes-input-output-trigger](./snippets/input-manager/nodes-input-output-trigger.md)] Example graph usage In the following example, the On Keyboard Input node listens for when the user presses the Space key. When the user presses Space, the On Keyboard Input triggers the Transform Translate node and lifts the GameObject along its Y coordinate by 5 units. This makes the GameObject jump. Related nodes The following nodes are related or similar to the the On Keyboard Input node: On Button Input node On Mouse Down node On Mouse Drag node On Mouse Enter node On Mouse Exit node On Mouse Input node On Mouse Over node On Mouse Up node On Mouse Up As Button node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-on-mouse-down.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-on-mouse-down.html",
    "title": "On Mouse Down node | Cacher Game",
    "summary": "On Mouse Down node Note The On Mouse Down node is an Input Manager node. For more information about how to use the Input Manager with Visual Scripting, see Capture user input in an application. The On Mouse Down node listens for a mouse click action on a specific GameObject in your application. It triggers the next node connected to it after the action occurs in the application. It doesn't send or receive any other data. Fuzzy finder category The On Mouse Down node is in the Events > Input category in the fuzzy finder. Inputs The On Mouse Down node has one input port: Name Type Description Target GameObject The GameObject that the user needs to click with their mouse to trigger the On Mouse Down node. Additional node settings The On Mouse Down node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Mouse Down node has one output port: Name Type Description [!include[nodes-input-output-trigger](./snippets/input-manager/nodes-input-output-trigger.md)] Example graph usage In the following example, the On Mouse Down node listens for a click action on the GameObject where the graph runs. When a user clicks the GameObject, the On Mouse Down node triggers the GameObject Instantiate node. The Instantiate node creates a new GameObject, based on the Ball Prefab. It creates the Ball at a specific Position. It uses the Transform Get Local Rotation to match the new GameObject's Rotation to the GameObject where the Script Graph runs. Then, the graph adds a Rigidbody component to the new GameObject, and uses a Rigidbody Add Force node to add an Impulse force. When the user clicks the mouse button, the Script Graph creates a new Ball GameObject and sends it towards the camera. Related nodes The following nodes are related or similar to the On Mouse Down node: On Button Input node On Keyboard Input node On Mouse Drag node On Mouse Enter node On Mouse Exit node On Mouse Input node On Mouse Over node On Mouse Up node On Mouse Up As Button node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-on-mouse-drag.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-on-mouse-drag.html",
    "title": "On Mouse Drag node | Cacher Game",
    "summary": "On Mouse Drag node Note The On Mouse Drag node is an Input Manager node. For more information about how to use the Input Manager with Visual Scripting, see Capture user input in an application. The On Mouse Drag node listens for a mouse click and hold on a specific GameObject in your application. It triggers the next node connected to it as long as the mouse button is held down on that GameObject. It doesn't send or receive any other data. Fuzzy finder category The On Mouse Drag node is in the Events > Input category in the fuzzy finder. Inputs The On Mouse Drag node has one input port: Name Type Description Target GameObject The GameObject the user needs to click and hold with their mouse to trigger the On Mouse Drag node. Additional node settings The On Mouse Drag node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Mouse Drag node has one output port: Name Type Description [!include[nodes-input-output-trigger](./snippets/input-manager/nodes-input-output-trigger.md)] Example graph usage In the following example, the On Mouse Drag node triggers a Camera Screen To World Point node. When the user clicks and holds their mouse button over the Target GameObject from the On Mouse Drag node, the Script Graph gets the user's current mouse position with an Input Get Mouse Position node. The graph uses the X and Y values from the Get Mouse Position node's Vector 3 result to create a new Vector 3 value, with a fixed Z value. The Screen To World Point node uses the new Vector 3 and the camera saved in the Main Camera Scene variable to set the position of the Target GameObject's transform. The Script Graph allows the user to drag the Target GameObject around the scene when hold down their mouse button. Related nodes The following nodes are related or similar to the On Mouse Drag node: On Button Input node On Keyboard Input node On Mouse Down node On Mouse Enter node On Mouse Exit node On Mouse Input node On Mouse Over node On Mouse Up node On Mouse Up As Button node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-on-mouse-enter.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-on-mouse-enter.html",
    "title": "On Mouse Enter node | Cacher Game",
    "summary": "On Mouse Enter node Note The On Mouse Enter node is an Input Manager node. For more information about how to use the Input Manager with Visual Scripting, see Capture user input in an application. The On Mouse Enter node listens for the user's mouse pointer location to enter the Collider of a specified GameObject. When the mouse enters the Collider or GUI element, the node triggers the next node connected to it. It doesn't send or receive any other data. Fuzzy finder category The On Mouse Enter node is in the Events > Input category in the fuzzy finder. Inputs The On Mouse Enter node has one input port: Name Type Description Target GameObject The GameObject with the Collider that triggers the On Mouse Enter node. Additional node settings The On Mouse Enter node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Mouse Enter node has one output port: Name Type Description [!include[nodes-input-output-trigger](./snippets/input-manager/nodes-input-output-trigger.md)] Example graph usage In the following example, the On Mouse Enter node triggers the Instantiate GameObject node when the user's mouse enters the Collider on the Script Machine's GameObject. The Instantiate node creates an instance of the Light Prefab, at the Prefab's Position and with the Prefab's Rotation. The graph saves the new instance of the GameObject to a Scene variable, Spotlight, so it can interact with the GameObject again later. The result is a spotlight that appears over the On Mouse Enter node's Target GameObject, when the user's mouse enters the Collider. Related nodes The following nodes are related or similar to the On Mouse Enter node: On Button Input node On Keyboard Input node On Mouse Down node On Mouse Drag node On Mouse Exit node On Mouse Input node On Mouse Over node On Mouse Up node On Mouse Up As Button node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-on-mouse-exit.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-on-mouse-exit.html",
    "title": "On Mouse Exit node | Cacher Game",
    "summary": "On Mouse Exit node Note The On Mouse Exit node is an Input Manager node. For more information about how to use the Input Manager with Visual Scripting, see Capture user input in an application. The On Mouse Exit node listens for the user's mouse pointer location to exit the Collider of a specified GameObject. When the mouse exits the Collider or GUI element, the node triggers the next node connected to it. It doesn't send or receive any other data. Fuzzy finder category The On Mouse Exit node is in the Events > Input category in the fuzzy finder. Inputs The On Mouse Exit node has one input port: Name Type Description Target GameObject The GameObject with the Collider that triggers the On Mouse Exit node. Additional node settings The On Mouse Exit node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Mouse Exit node has one output port: Name Type Description [!include[nodes-input-output-trigger](./snippets/input-manager/nodes-input-output-trigger.md)] Example graph usage In the following example, continued from the example from the On Mouse Enter node, the On Mouse Exit node triggers a Destroy GameObject node when the user's mouse exits the Collider on the Script Machine's GameObject. The Destroy GameObject node destroys the GameObject assigned to the Spotlight Scene variable. The GameObject was created and assigned to the variable elsewhere in the graph. When the user's mouse leaves the Collider, the Target GameObject no longer has a spotlight. Related nodes The following nodes are related or similar to the On Mouse Exit node: On Button Input node On Keyboard Input node On Mouse Down node On Mouse Drag node On Mouse Enter node On Mouse Input node On Mouse Over node On Mouse Up node On Mouse Up As Button node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-on-mouse-input.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-on-mouse-input.html",
    "title": "On Mouse Input node | Cacher Game",
    "summary": "On Mouse Input node Note The On Mouse Input node is an Input Manager node. For more information about how to use the Input Manager with Visual Scripting, see Capture user input in an application. The On Mouse Input node listens for a specific action on a user's mouse. The action doesn't need to happen on a specific GameObject's Collider. It triggers the next node connected to it after the action occurs in the application. It doesn't send or receive any other data. Fuzzy finder category The On Mouse Input node is in the Events > Input category in the fuzzy finder. Inputs The On Mouse Input node has the following input ports: Name Type Description Button Mouse Button The name of the mouse button that triggers the On Mouse Input node. Action Press State The specific state of the mouse button that the node listens for. Hold The user holds down the mouse button. Down The user presses the mouse button. Up The user releases the mouse button. Additional node settings The On Mouse Input node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Mouse Input node has one output port: Name Type Description [!include[nodes-input-output-trigger](./snippets/input-manager/nodes-input-output-trigger.md)] Example graph usage In the following example, the On Mouse Input node listens for the user to hold the right mouse button and triggers an Instantiate Camera node. The Instantiate node clones the camera saved as the Camera1 Scene variable and assigns it to the NewCamera Scene variable. It sets a new position for the cloned camera with a Transform Set Position node, before it switches which camera renders in the Game view with the Camera Render node. When the application runs, the default view in the Game view displays all three spheres in the scene. When the user holds the right mouse button and triggers the On Mouse Input node, the Game view changes to focus on the middle sphere. Related nodes The following nodes are related or similar to the On Mouse Input node: On Button Input node On Keyboard Input node On Mouse Down node On Mouse Drag node On Mouse Enter node On Mouse Exit node On Mouse Over node On Mouse Up node On Mouse Up As Button node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-on-mouse-over.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-on-mouse-over.html",
    "title": "On Mouse Over node | Cacher Game",
    "summary": "On Mouse Over node Note The On Mouse Over node is an Input Manager node. For more information about how to use the Input Manager with Visual Scripting, see Capture user input in an application. The On Mouse Over node listens for a user's mouse to land over a specified GameObject's Collider. While the user's mouse is over the Collider, it triggers the next node connected to it once every frame. It doesn't send or receive any other data. Fuzzy finder category The On Mouse Over node is in the Events > Input category in the fuzzy finder. Inputs The On Mouse Over node has one input port: Name Type Description Target GameObject The GameObject with the Collider that triggers the On Mouse Over node. Additional node settings The On Mouse Over node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Mouse Over node has one output port: Name Type Description [!include[nodes-input-output-trigger](./snippets/input-manager/nodes-input-output-trigger.md)] Example graph usage In the following example, the On Mouse Over node triggers a Timer node when the user moves their mouse over the Target GameObject. The Timer runs for 2 seconds and triggers a Color Lerp node. For every Tick of the Timer node, the Color Lerp node uses the Elapsed value to calculate a new Color between Color A and Color B to make a smooth transition between colors. The Material Set Color node uses the Result from the Color Lerp node to set a new Color on the Object material. While the user's mouse is over the Target GameObject, the objects that use the Object material in the scene transition from red to blue over two seconds. The transition repeats until the user's mouse leaves the Target's Collider. Related nodes The following nodes are related or similar to the On Mouse Over node: On Button Input node On Keyboard Input node On Mouse Down node On Mouse Drag node On Mouse Enter node On Mouse Exit node On Mouse Input node On Mouse Up node On Mouse Up As Button node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-on-mouse-up-button.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-on-mouse-up-button.html",
    "title": "On Mouse Up As Button node | Cacher Game",
    "summary": "On Mouse Up As Button node Note The On Mouse Up As Button node is an Input Manager node. For more information about how to use the Input Manager with Visual Scripting, see Capture user input in an application. The On Mouse Up As Button node listens for a user to release their mouse button after they click a Collider in your application. It triggers the next node connected to it after the action occurs in the application. It doesn't send or receive any other data. To trigger the On Mouse Up As Button node, the user must release their mouse button over the same Collider they clicked. If you want the user to trigger the node after they release their mouse button at any location in your application, use the On Mouse Up node instead. Fuzzy finder category The On Mouse Up As Button node is in the Events > Input category in the fuzzy finder. Inputs The On Mouse Up As Button node has one input port: Name Type Description Target GameObject The GameObject the user must click and release with their mouse button to trigger the node. Additional node settings The On Mouse Up As Button node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Mouse Up As Button node has one output port: Name Type Description [!include[nodes-input-output-trigger](./snippets/input-manager/nodes-input-output-trigger.md)] Example graph usage In the following example, the On Mouse Up As Button node runs as a coroutine to load a new scene after the user clicks and releases their mouse button over the Target GameObject. The Script Graph loads the scene, makes the graph wait until the scene loads, then sets the loaded scene as the active scene in the application. When the application starts, the active scene contains a plane with three spheres. After the Script Graph runs, the scene changes to a plane with a single cube. Related nodes The following nodes are related or similar to the On Mouse Up As Button node: On Button Input node On Keyboard Input node On Mouse Down node On Mouse Drag node On Mouse Enter node On Mouse Exit node On Mouse Input node On Mouse Over node On Mouse Up node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-on-mouse-up.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-events-on-mouse-up.html",
    "title": "On Mouse Up node | Cacher Game",
    "summary": "On Mouse Up node Note The On Mouse Up node is an Input Manager node. For more information about how to use the Input Manager with Visual Scripting, see Capture user input in an application. The On Mouse Up node listens for a user to release their mouse button after they click a Collider in your application. It triggers the next node connected to it after the action occurs in the application. It doesn't send or receive any other data. The user can release their mouse button anywhere in your application to trigger the On Mouse Up node. If you want the node to trigger after the user releases the mouse button over the same Collider specified in the node's Target, use the On Mouse Up As Button node instead. Fuzzy finder category The On Mouse Up node is in the Events > Input category in the fuzzy finder. Inputs The On Mouse Up node has one input port: Name Type Description Target GameObject The GameObject the user needs to click with their mouse button to have the On Mouse Up node listen for a mouse button release action. The user can release their mouse button anywhere to trigger the On Mouse Up node, but they must click the GameObject specified as the Target. Additional node settings The On Mouse Up node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Mouse Up node has one output port: Name Type Description [!include[nodes-input-output-trigger](./snippets/input-manager/nodes-input-output-trigger.md)] Example graph usage In the following example, the On Mouse Up node adds a force to a GameObject based on the user's mouse position when they release their mouse button. The On Mouse Up node triggers a Camera Screen To World Point node to get the user's mouse position, before it sends the X value of the mouse to a Rigidbody Add Force node to move the GameObject. When the user clicks on the sphere in the middle of the scene and releases their mouse button, the sphere moves towards their mouse location. Related nodes The following nodes are related or similar to the On Mouse Up node: On Button Input node On Keyboard Input node On Mouse Down node On Mouse Drag node On Mouse Enter node On Mouse Exit node On Mouse Input node On Mouse Over node On Mouse Up As Button node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-reference.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes-reference.html",
    "title": "Node reference | Cacher Game",
    "summary": "Node reference Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. Nodes are the most basic element of computation in visual scripting. Nodes display the required information as text, but editing is done via the Inspector. To edit them, select any node and edit its properties in the Inspector. This node The This node returns the game object that owns the machine in which the graph runs. Control nodes Control nodes branch, loop and merge the flow. Time nodes Time nodes include timer, cooldown and wait nodes. Events Scripting nodes listen for events. They are the starting point for all scripts and appear as special green nodes in graphs. Variables These nodes get, set, and check variables. Nulls Nodes that deal with the nulls, a.k.a. \"nothing\" value. Formulas Formula evaluates logical and mathematical expressions directly via a textual Formula and match with multiple arguments."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nodes.html",
    "title": "Nodes | Cacher Game",
    "summary": "Nodes Nodes are the most basic part of scripts in Visual Scripting. A node can listen for events, get the value of a variable, modify a component on a GameObject, and more. Nodes appear as blocks in the Graph Editor. You can arrange and connect these blocks with edges to create logic for an application. Add nodes with the fuzzy finder. Click and drag a node to move it in the Graph Editor. Node anatomy Visual Scripting highlights nodes in your current selection. All nodes have a header, which displays the node's name. Some node headers might contain additional information or controls. Select a node in your graph, the Visual Scripting Graph Inspector displays the following information: The node's name and type icon. A brief description of what the node does, if available. The current warning messages or errors for the node. The additional settings for the node, if available. The required type for each input port and a brief description, if available. The type for each output port and a brief description, if available. Connections and ports Connect a port from one node to a compatible port on another node to create an edge. Edges form the logic flow in a Visual Scripting graph. Click any port to create a new edge. Edges are color-coded: edges that control the logic flow in your graph are white. Data edges are colored based on their type. For more information about types, see Object types. When you create a new edge, Visual Scripting highlights ports on any other nodes in a graph where you can make a valid connection. If you enable Dim Incompatible Nodes, Visual Scripting also dims any nodes or ports without a valid connection. Ports on the left side of a node are Input Ports. Ports on the right side of a node are Output Ports. An input port or output port can be a Control Port or a Data Port: Control Ports control the logical flow in a graph. They tell Visual Scripting what order to execute the nodes in a graph, from left to right. The icon for a control port is always an arrow. These arrows display the direction of the flow of logic in a graph. Data Ports send and receive data, such as number values or GameObjects, between nodes. They have colors that correspond to the specific type they expect to receive as inputs, or send as outputs. Their icons change based on their type. You can make multiple connections to or from the same port, with some restrictions: You can connect a single Data Output port to multiple Data Input ports. You can't connect multiple Data Output ports to a single Data Input port. Visual Scripting can't choose which value to use. You can connect multiple Control Output ports a single Control Input port. You can't connect a single Control Output port to multiple Control Input ports. Visual Scripting can't choose which node to run first. For more information on how to connect nodes, see Connect nodes in a Script Graph. More complex nodes can have more complex or specialized ports, outside of the ports described here. Node controls and inline values A node might have additional controls that display on its header or in the Graph Inspector. Controls can change the available ports or behavior of a node. Some ports might also use inline values. Element Example Description Control A control appears as a dropdown option on the header of a node. For example, a Container Type control might tell a node to expect to receive a GameObject instead of a Script Machine. Inline Value An inline value appears as an object picker field next to a port. You can use an inline value instead of a node connection to specify a value for a node. Not all Visual Scripting types support inline values. ## Node overloads Variations of a Visual Scripting node are called overloads. Overloads change the input and output data that a node can accept, and can change the number of input or output data ports on a node. For example, the Add node has four overloads, as shown in the following image of the fuzzy finder after a search for Add. You can distinguish each overload through its subcategory in the fuzzy finder. The Add node is a part of the Math category, but each overload is a part of a different subcategory: Generic, Scalar, Vector 2, Vector 3, or Vector 4. The specific node overload changes what input and output data the Add node can accept. While a Generic Add node can input and output any object type in Visual Scripting, a Vector 3 Add node can only take 3D vectors as an input, and can only output a single 3D vector: The default type and number of ports on the Add node stays consistent across its overloads. For the Rotate node, the type and number of ports varies. Based on the Rotate node you select, you might be able to specify the angle of rotation as a vector, as separate float values, or as an angle relative to each axis. You can also choose whether the node rotates the GameObject relative to itself, or relative to the center of the scene's world space."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nulls.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-nulls.html",
    "title": "Nulls node | Cacher Game",
    "summary": "Nulls node Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. Null nodes deal with the null value, which is scripting lingo for \"nothing\". The null node The null node always returns null as a value. Leaving a Unity object reference field empty (\"None\") automatically means null. Null Check The null check is a shortcut for a branch on an equality comparison with null. It can be useful to direct the flow in different directions depending on whether a value is null. For example, it can be used to handle a situation differently whether a transform has a parent in the hierarchy or not. Null Coalesce The null coalesce node provides a fallback value in case the original input is null. For example, the null coalesce node defines a default fallback audio clip in case the one on the audio source is missing."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-open-graph-edit.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-open-graph-edit.html",
    "title": "Open a graph file | Cacher Game",
    "summary": "Open a graph file You can open a graph file from multiple locations, based on the graph type and its source type. For information on how to create a new graph file, see Create a new graph file. From the Project window To open a graph from the Project window: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Find the location in your Project window's folders where you saved the graph file you want to edit. Double-click the graph file to open it in the Graph window. From the Graph Inspector If you have a nested or embedded graph inside another graph file, you can open it from the Graph Inspector. In the Graph window, select the node that represents the graph you want to edit. This node could be a transition, Super State, Subgraph, or State Unit. Open the Graph Inspector. In the Graph Inspector, select Edit Graph. The graph opens in the same Graph window. From a Script Machine or State Machine If you've attached or embedded a graph in a Script Machine or State Machine on a GameObject, you can open the graph from the component on the GameObject: Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window. In the Hierarchy window, select the GameObject that has the Script Machine or State Machine with the graph you want to edit. With the GameObject selected in the Hierarchy window, go to Window > General > Inspector, or press Ctrl+3 (macOS: Cmd+3) to open the Inspector window. On the Script Machine or State Machine component, select Edit Graph. Next steps After you open a graph file, you can add a node to the graph. For more information on how to add a node to a Script Graph, see Add a node to a Script Graph. For more information on how to edit a State Graph, see Develop logic transitions with State Graphs. You can also add a Sticky Note to add comments to a graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-refactor-add-attribute.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-refactor-add-attribute.html",
    "title": "Add the RenamedFrom attribute to a C# script | Cacher Game",
    "summary": "Add the RenamedFrom attribute to a C# script To use nodes generated from a custom C# script in a project after you rename a member, class, struct, type, or enum, add the [RenamedFrom] attribute to the relevant API element in the script file. For more information on the [RenamedFrom] attribute, see Refactor a C# script with Visual Scripting. To add the attribute to a C# script: [!include[open-project-window](./snippets/vs-open-project-window.md)] In the Project window, double-click the C# script file you want to refactor. Unity opens the file in the program you specified in your preferences, under External Script Editor. NOTE For more information on script editors in Unity, see Integrated development environment (IDE) support in the Unity User Manual. In your external editor, do the following: Add the [RenamedFrom] attribute above the definition of the part of the script you want to rename. Add the element's old name as a string to the [RenamedFrom] attribute, as its parameter. For example: using UnityEngine; using Unity.VisualScripting; [RenamedFrom(\"Character\")] public class Player : MonoBehaviour { [RenamedFrom(\"InflictDamage\")] public void TakeDamage(int damage) { //... } } [!include[save-script](./snippets/vs-save-script.md)] [!include[return-unity](./snippets/vs-return-unity.md)] [!include[regen-node-library](./snippets/vs-regen-node-library.md)] Note If you change the namespace or namespaces used in your script, you must include the old namespace or namespaces to use the [RenamedFrom] attribute. Next steps Unity recommends that you leave the attribute in the script file, even after a successful recompile. Nodes that use your C# script no longer have errors related to a missing member, class, struct, type, or enum. Additional resources Refactor a C# script with Visual Scripting Configure project settings Add or remove types from your Type Options Custom C# nodes Custom events"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-refactoring.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-refactoring.html",
    "title": "Refactor a C# script with Visual Scripting | Cacher Game",
    "summary": "Refactor a C# script with Visual Scripting Visual Scripting creates nodes from methods, fields, and properties from C# script in your project. Visual Scripting creates these nodes after you regenerate your Node Library and add any relevant types to your Type Options. For example, Visual Scripting created the following Take Damage node from a custom C# script that defines the Player class. Visual Scripting generated the node with the following code, which creates a Player class with a TakeDamage member. using UnityEngine; public class Player : MonoBehaviour { public void TakeDamage(int damage) { //... } } Tip You can create your own custom node or create a custom event to customize the ports and information displayed on your nodes. If you change the name of the TakeDamage member in the C# script, Visual Scripting displays an error in Script Graphs that use the Take Damage node. To rename a member, type, class, struct, enum, or other API element that a Visual Scripting node uses in a project, add the [RenamedFrom] attribute to the relevant API element in the script file. To avoid issues with Unity's serialization, the [RenamedFrom] attribute tells Visual Scripting that an API or one of its elements has been renamed. For more information on how to add the [RenamedFrom] attribute to a C# script, see Add the RenamedFrom attribute to a C# script. Additional resources Add the RenamedFrom attribute to a C# script Configure project settings Add or remove types from your Type Options Custom C# nodes Custom events"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-relations.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-relations.html",
    "title": "Use relations to debug | Cacher Game",
    "summary": "Use relations to debug Relations are a useful tool to understand the dependencies between each port of a node. For example, to get the result of A + B with the Add node, you need to provide a value for A and B. Likewise, before invoking the Log node, you should provide a value for its Message input port. Visual scripting uses this information in the background for Predictive Debugging. For example, if you tried to get the value of A + B without providing a value for A, the node would show up as orange to indicate that it fails in play mode. When that happens, you can use the warnings shown in the Graph Inspector to know what is missing. Relations can also help understand the ports that are required and which ports are optional. For example, in the Get Child node (under fuzzy finder Codebase > Unity Engine > Transform), there is no need to connect the control ports if the goal is to get the transform value output. Enable the Relations toggle in the toolbar for the inner connections of each node to be displayed. Note You cannot edit relations. They are predefined for each type of node."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-script-graphs-intro.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-script-graphs-intro.html",
    "title": "Develop application logic with Script Graphs | Cacher Game",
    "summary": "Develop application logic with Script Graphs Use Script Graphs to create interactions and logic in your project. Create a graph file Create a graph file to get started. For more information, see Create a new graph file. Add and connect nodes After you have a graph file, add a node or connect nodes together to build logic. Create Subgraphs Reuse logic with Subgraphs. Debug your graphs You can use relations to help you debug your scripts, or use Visual Scripting's predictive debugging to help you catch problems."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-scripts-reference.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-scripts-reference.html",
    "title": "Script Graph nodes | Cacher Game",
    "summary": "Script Graph nodes Visual scripting has four nodes that you can use to identify and manipulate the Script Graphs assigned to a GameObject and its Script Machines: Set Script Graph Has Script Graph Get Script Graph Get Script Graphs Set Script Graph You can use the Set Script Graph node to assign a Script Graph to a specific Script Machine, or to the first Script Machine attached to a specific GameObject. Item Description Node Parameters Container Type Specifies whether the Target is a GameObject or Script Machine. Input Ports Enter (Input Trigger) The execution input trigger for the node. Target (GameObject or Script Machine) The GameObject or Script Machine where the node sets the Graph. Graph (Script Graph Asset) The Script Graph the node sets on the Target. Output Ports Exit (Output Trigger) The execution output trigger. Graph (Script Graph Asset; Optional) Outputs the Graph. Setting the required node parameters and inputs The Set Script Graph node has one required input parameter, called Container Type, which is set using the dropdown in the node's header. The Container Type specifies what component type the node should expect as an input for its Target: If you choose GameObject, the node expects to receive a GameObject, and assigns the graph to the first Script Machine attached to that GameObject. If you choose Script Machine, the node expects to receive a Script Machine, and you can specify the exact Script Machine where you want to set your Script Graph. Depending on which Container Type you select, the icon displayed next to the Target input port on the node changes: Container Type Target Icon GameObject Script Machine The node has three input ports, located on the left side. The first port, Enter, connects to the node that should start the execution of the Set Script Graph node. The other two ports collect the Set Script Graph node's required input data: The Target, or the GameObject or Script Machine where you want to set a Script Graph. The Graph, or the Script Graph to assign to the GameObject or Script Machine. Outputs The Set Script Graph node has two output ports, located on the right side. The first port, Exit, establishes the connection to the node that should execute after the Set Script Graph node has finished. The second port, Graph, can output the Script Graph that you assigned using the node. Has Script Graph The Has Script Graph node allows you to determine whether a GameObject or Script Machine has a specific Script Graph assigned to it. Item Description Node Parameters Container Type Specify whether the Target is a GameObject or Script Machine. Input Ports Enter (Input Trigger) The execution input trigger for the node. Target (GameObject or Script Machine) The GameObject or Script Machine where the node should check for the Graph. Graph (Script Graph Asset) The Script Graph to search for on the GameObject or Script Machine. Output Ports Exit (Output Trigger) The execution output trigger, which starts execution of the next node in the flow after checking for the specified Script Graph. Has Graph (Boolean) Outputs true if the node found the specified Script Graph, false if not. Setting the required node parameters and inputs The Has Script Graph node has one required input parameter, called Container Type, which is set using the dropdown in the node's header. The Container Type specifies what component type the node should expect as an input for its Target: If you choose GameObject, the node expects to receive a GameObject, and checks for the graph on the first Script Machine attached to that GameObject. If you choose Script Machine, the node expects to receive a Script Machine, and you can specify the exact Script Machine where you want to check for the Script Graph. Depending on which Container Type you select, the icon displayed next to the Target input port on the node changes: Container Type Target Icon GameObject Script Machine The node has three input ports, located on the left side. The first port, Enter, connects to the node that should start the execution of the Has Script Graph node. The other two ports collect the Has Script Graph node's required input data: The Target, or the GameObject or Script Machine where you want to check for a Script Graph. The Graph, or the Script Graph to search for on the GameObject or Script Machine. Outputs The Has Script Graph node returns true if it finds the specified Script Graph. Otherwise, it returns false. You can use a control node connected to the Has Script Graph's output port to change what your script does next, based on the result from Has Script Graph. For more information about control nodes, see Control nodes. Get Script Graph The Get Script Graph node returns the first Script Graph set on a GameObject. Item Description Input Ports GameObject (GameObject) The GameObject where the node should retrieve a set Script Graph. Output Ports Graph (Script Graph Asset) Outputs the first or only Script Graph set on the GameObject, or null if there is no set Script Graph. Setting the required node parameters and inputs The Get Script Graph node is a data node. It can't control any logic in your script, and is only used to return data. The node has a single input port, located on the left side, which collects the node's required input data: The GameObject where the node should retrieve the Script Graph. You can choose a specific GameObject, or leave the default selection as This to use the GameObject where your script is currently running. Outputs The Get Script Graph node has a single output port, located on the right side. The output port returns the GameObject's first set Script Graph, or null, if there is no set Script Graph. Note The Get Script Graph node returns only the first Script Graph set on a GameObject. To return all Script Graphs set on a GameObject, use the Get Script Graphs node. Get Script Graphs The Get Script Graphs node returns a list of all Script Graphs set on a GameObject. Item Description Input Ports GameObject (GameObject) The GameObject where the node should retrieve a list of set Script Graphs. Output Ports Graphs (List of Script Graph Assets) Outputs a list of all Script Graphs set on the GameObject, or an empty list if there are no set Script Graphs. Setting the required node parameters and inputs The Get Script Graphs node is a data node. It can't control any logic in your script, and is only used to return data. The node has a single input port, located on the left side, which collects the node's required input data: The GameObject where the node should retrieve a list of Script Graphs. You can choose a specific GameObject, or leave the default selection as This to use the GameObject where your script is currently running. Outputs The Get Script Graphs node has a single output port, located on the right side. The output port returns a list of all set Script Graphs for the GameObject, or an empty list, if there are no set Script Graphs."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-self.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-self.html",
    "title": "This node | Cacher Game",
    "summary": "This node Use a This node to return a GameObject with a Script Machine component that has the Script Graph. If the Script Machine uses an Graph source and multiple GameObjects use the same graph, the returned GameObject can change. Many nodes default their target to This. For example, the following Transform nodes are the same: Not all nodes support the This inline value. Any node that doesn't support the This inline value displays None instead of This in the default value field. For example, the Destroy node displays None. In these cases, manually specify the connection if you want to use This. You can use the This node in a graph even if the graph isn't yet assigned to a GameObject. The This node represents the GameObject that owns the graph at runtime."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-set-preferences.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-set-preferences.html",
    "title": "Configure your preferences | Cacher Game",
    "summary": "Configure your preferences You can configure specific preferences in Visual Scripting to control the behavior of the Graph window and your nodes. To configure your preferences for Visual Scripting: Go to Edit > Preferences. Select Visual Scripting. Core preferences The following preferences control general behaviors across all graph types in Visual Scripting. Preference Description Dim Inactive Nodes Enable Dim Inactive Nodes to dim any nodes in the Graph Editor that aren't connected to the logic flow in a graph. This provides you with a visual cue that a dimmed node isn't used in the graph in its current configuration. Disable Dim Inactive Nodes to display all nodes as active, regardless of their connection state. NOTE You can also control this preference from the Graph toolbar. For more information, see The interface. Dim Incompatible Nodes Enable Dim Incompatible Nodes to dim all nodes that don't have a compatible connection port when you create a new edge. Disable Dim Incompatible Nodes to display all nodes as active for a new edge. Show Variables Help Enable Show Variables Help to display a brief explanation of the selected variable scope in the Blackboard. Disable Show Variables Help to hide these explanations. Create Scene Variables Enable Create Scene Variables to automatically create a Scene Variables GameObject with a Variables component and a Scene Variables script component after you create a Scene variable. A GameObject with these components is required to use Scene variables in a project. Disable Create Scene Variables to create these components on a GameObject manually. Show Grid Enable Show Grid to display a grid on the background of the Graph Editor. Disable Show Grid to hide the grid. Snap to Grid Enable Snap to Grid to force nodes to stick or snap to points on a grid in the Graph Editor. Disable Snap to Grid to move nodes freely and disable the snap-to-point behavior. Pan Speed Set a Pan Speed to control how quickly the view in the Graph Editor moves when you pan vertically with the scroll wheel. Drag Pan Speed Set a Drag Pan Speed to control how quickly the view in the Graph Editor moves when you move a node to the edge of the Graph window. Zoom Speed Set a Zoom Speed to control how quickly the Graph Editor zooms in or zooms out while you change the zoom level in the Graph window. For more information on how to change the zoom level in the Graph Editor, see Choose a control scheme. Overview Smoothing Set an Overview Smoothing to control how gradually the Graph Editor zooms or pans after you select the Overview option in the Graph toolbar. Carry Children Enable Carry Children to move all connected child nodes when you move a parent node in the Graph Editor. Disable Carry Children to only move the currently selected node in the Graph Editor. NOTE You can also change this setting from the Graph toolbar in the Graph window. For more information, see The interface. Disable Playmode Tint Enable Disable Playmode Tint to display all nodes in the Graph window as normal while the Unity Editor is in Play mode. Disable Disable Playmode Tint to add a tint to all nodes in the Graph window while the Editor is in Play mode. For more information on Play mode, see The Game view in the Unity User Manual. Control Scheme Select a Visual Scripting control scheme. For more information, see Choose a control scheme. Default Use the Default Visual Scripting control scheme. Alternate Use the Alternate Visual Scripting control scheme. Clear Graph Selection Enable Clear Graph Selection to clear any graph displayed in the Graph window after you select a GameObject with no set graph or graphs. Disable Clear Graph Window to keep the last displayed graph if the selected GameObject has no set graph assets. NOTE Visual Scripting always updates the Graph window to display the set graph on a selected GameObject, regardless of your chosen Clear Graph Selection setting. Human Naming Enable Human Naming to convert all displayed method names from camel case to title case. For example, camelCase becomes Camel Case. Disable Human Naming to leave all names in camel case. Max Search Results Set a Max Search Results value to specify the maximum number of search results returned by the fuzzy finder after you use the search bar. Group Inherited Members Enable Group Inherited Members to group together inherited nodes from a parent or base class to your current search term in the fuzzy finder. For example, an Audio Source is a Component: it has its own specific methods and nodes, but you can interact with it as a Component with Component nodes. While you perform a search in the fuzzy finder, Visual Scripting groups the nodes inherited from Component and displays them in grey. Disable Group Inherited Members to display nodes in the search results without grouping these inherited nodes. Developer Mode Enable Developer Mode to display additional preferences in the Preferences window and add additional features in the Graph window and other areas of the Unity Editor. For more information on the additional Developer Mode preferences, see Additional Developer Mode preferences. AOT Safe Mode Enable AOT Safe Mode to exclude nodes from search results in the fuzzy finder that might cause problems for platforms that require ahead of time (AOT) compilation. For example, Visual Scripting excludes nodes that use the Generic type. Disable AOT Safe Mode to display all nodes and types in the fuzzy finder. Script Graphs preferences The following preferences change the behavior of Script Graphs in the Graph window. Preference Description Update Nodes Automatically NOTE This feature is experimental. Enable Update Nodes Automatically to let Visual Scripting automatically update your Node Library when it detects a change in any script inside your project's Assets folder. Disable Update Nodes Automatically to manually regenerate your Node Library after you make a change to a script. For more information on how to regenerate your Node Library, see Configure project settings. Predict Potential Null References A predictive debugging feature. Enable Predict Potential Null References to display warnings about potential null value inputs in your graphs. Disable Predict Potential Null References to disable these warnings. NOTE Sometimes, predictive debugging might return false positive results when you enable this setting. Predict Potential Missing Components A predictive debugging feature. Enable Predict Potential Missing Components to display warnings about potential missing components in your graphs, such as a missing node input. Disable Predict Potential Missing Components to disable these warnings. NOTE Sometimes, predictive debugging might return false positive results when you enable this setting. Show Connection Values Enable Show Connection Values to display the input and output values sent between nodes while the Editor is in Play mode. This can make it easier to debug your scripts. Disable Show Connection Values to hide these value labels while in Play mode. For more information on Play mode, see The Game view in the User Manual. NOTE You can also control this preference from the Graph toolbar. For more information, see The interface. Predict Connection Values Enable Predict Connection Values to have the Graph Editor predict what input and output values your graph sends between nodes while the Unity Editor is in Play mode. For example, Visual Scripting would display the value currently set for a variable in your script, though that value might change before it's used by a node. Disable Predict Connection Values to hide these predicted input and output values. Hide Port Labels Enable Hide Port Labels to hide the name labels for node input and output ports. Disable Hide Port Labels to display these name labels. Animate Control Connections Enable Animate Control Connections to display a droplet animation across node control port edges while the Editor is in Play mode. Disable Animate Control Connections to disable the animations. For more information about the different node port types and edges, see Nodes. For more information on Play mode, see The Game view in the User Manual. Animate Value Connections Enable Animate Value Connections to display a droplet animation across node data port edges while the Editor is in Play mode. Disable Animate Value Connections to disable the animations. For more information about the different node port types and edges, see Nodes. For more information on Play mode, see The Game view in the User Manual. Skip Context Menu Enable Skip Context Menu to always open the fuzzy finder when you right-click in the Graph Editor. To access the context menu, use Shift+right-click. Disable Skip Context Menu to open the fuzzy finder when you right-click with no nodes or groups selected in the Graph Editor. The context menu opens when you right-click with a node or group selected. State Graphs preferences The following preferences change the behavior of State Graphs in the Graph window. Preference Description States Reveal Use the dropdown to choose when a Script State node displays a list of events from its graph. If you have many Script State nodes in a State Graph, you might want to change this setting. Never Script State nodes never display their list of events. Always Script State nodes always display their list of events. On Hover Script State nodes only display their list of events when you hover over the node in the Graph window. On Hover with Alt Script State nodes only display their list of events when you hover over the node while you hold Alt. When Selected Script State nodes only display their list of events when you select the node in the Graph window. On Hover or Selected Script State nodes display their list of events when you hover over the node, or when you select the node in the Graph window. On Hover with Alt or Selected Script State nodes display their list of events when you hover over the node while you hold Alt, or when you select the node in the Graph window. Transitions Reveal Use the dropdown to choose when a transition displays a list of events from its graph. If you have many transitions in a State Graph, you might want to change this setting. Never Transitions never display a list of events. Always Transitions always display a list of events. On Hover Transitions only display a list of events when you hover over the transition in the Graph window. On Hover with Alt Transitions only display a list of events when you hover over the transition while you hold Alt. When Selected Transitions only display a list of events when you select the transition in the Graph window. On Hover or Selected Transitions display a list of events when you hover over the transition, or when you select the transition in the Graph window. On Hover with Alt or Selected Transitions display a list of events when you hover over the transition while you hold Alt, or when you select the transition in the Graph window. Transitions End Arrow Enable Transitions End Arrow to add an arrow to the end of each transition edge in a State Graph. Disable Transitions End Arrow to display edges between transitions as simple lines. If you have many transitions in your State Graphs, you might want to disable this setting. Animate Transitions Enable Animate Transitions to display a droplet animation across transition edges when the Editor is in Play mode. Disable Animate Transitions to disable the animations. For more information on Play mode, see The Game view in the User Manual. Additional Developer Mode preferences Note You can only access the following preferences after you have enabled *Developer Mode in your Core preferences. These Developer Mode preferences provide help with developing extensions or custom nodes for Visual Scripting. Their continued support in the Visual Scripting package isn't guaranteed. Preference Description Debug Enable Debug to add additional logging and visual overlays to help you debug element rendering in the Graph window. For example, if you created a custom node, use this setting to help debug your UI. Disable Debug to disable the logging and hide these overlays. Track Metadata State Enable Track Metadata State to add more information to logging. This can assist in debugging. Disable Track Metadata State to hide this additional information. Debug Inspector UI Enable Debug Inspector UI to add more overlays and additional details. The information available is greater than what Visual Scripting provides with the Debug setting, and affects more areas of the Editor's UI. Only enable this setting if you need more in-depth debugging feedback. Disable Debug Inspector UI to hide this information."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-state-graphs-intro.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-state-graphs-intro.html",
    "title": "Develop logic transitions with State Graphs | Cacher Game",
    "summary": "Develop logic transitions with State Graphs You can use State Graphs to change behaviors of GameObjects based on specific conditions. Create a new state After you create a new graph file for a State Graph, you can create states to tell Visual Scripting what a GameObject does, and when. Create a transition Use transitions to tell Visual Scripting when a GameObject changes states. There's no restriction on how many transitions you can create. State Unit nodes You can use a State Unit node to nest a State Graph inside a Script Graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-states-reference.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-states-reference.html",
    "title": "State Graph nodes | Cacher Game",
    "summary": "State Graph nodes Visual scripting has four nodes that you can use to identify and manipulate the State Graphs assigned to a GameObject and its State Machines: Set State Graph Has State Graph Get State Graph Get State Graphs Set State Graph You can use the Set State Graph node to assign a State Graph to a specific State Machine, or to the first State Machine attached to a specific GameObject. Item Description Node Parameters Container Type Specifies whether the Target is a GameObject or State Machine. Input Ports Enter (Input Trigger) The execution input trigger for the node. Target (GameObject or State Machine) The GameObject or State Machine where the node sets the Graph. Graph (State Graph Asset) The State Graph the node sets on the Target. Output Ports Exit (Output Trigger) The execution output trigger. Graph (State Graph Asset; Optional) Outputs the Graph. Setting the required node parameters and inputs The Set State Graph node has one required input parameter, called Container Type, which is set using the dropdown in the node's header. The Container Type specifies what component type the node should expect as an input for its Target: If you choose GameObject, the node expects to receive a GameObject, and assigns the graph to the first State Machine attached to that GameObject. If you choose State Machine, the node expects to receive a State Machine, and you can specify the exact State Machine where you want to set your State Graph. Depending on which Container Type you select, the icon displayed next to the Target input port on the node changes: Container Type Target Icon GameObject State Machine The node has three input ports, located on the left side. The first port, Enter, connects to the node that should start the execution of the Set State Graph node. The other two ports collect the Set State Graph node's required input data: The Target, or the GameObject or State Machine where you want to set a State Graph. The Graph, or the State Graph to assign to the GameObject or State Machine. Outputs The Set State Graph node has two output ports, located on the right side. The first port, Exit, establishes the connection to the node that should execute after the Set State Graph node has finished. The second port, Graph, can output the State Graph that you assigned using the node. Has State Graph The Has State Graph node allows you to determine whether a GameObject or State Machine has a specific State Graph assigned to it. Item Description Node Parameters Container Type Specify whether the Target is a GameObject or State Machine. Input Ports Enter (Input Trigger) The execution input trigger for the node. Target (GameObject or State Machine) The GameObject or State Machine where the node should check for the Graph. Graph (State Graph Asset) The State Graph to search for on the GameObject or State Machine. Output Ports Exit (Output Trigger) The execution output trigger, which starts execution of the next node in the flow after checking for the specified State Graph. Has Graph (Boolean) Outputs true if the node found the specified State Graph, false if not. Setting the required node parameters and inputs The Has State Graph node has one required input parameter, called Container Type, which is set using the dropdown in the node's header. The Container Type specifies what component type the node should expect as an input for its Target: If you choose GameObject, the node expects to receive a GameObject, and checks for the graph on the first State Machine attached to that GameObject. If you choose State Machine, the node expects to receive a State Machine, and you can specify the exact State Machine where you want to check for the State Graph. Depending on which Container Type you select, the icon displayed next to the Target input port on the node changes: Container Type Target Icon GameObject State Machine The node has three input ports, located on the left side. The first port, Enter, connects to the node that should start the execution of the Has State Graph node. The other two ports collect the Has State Graph node's required input data: The Target, or the GameObject or State Machine where you want to check for a State Graph. The Graph, or the State Graph to search for on the GameObject or State Machine. Outputs The Has State Graph node returns true if it finds the specified State Graph. Otherwise, it returns false. You can use a control node connected to the Has State Graph's output port to change what your script does next, based on the result from Has State Graph. For more information about control nodes, see Control nodes. Get State Graph The Get State Graph node returns the first State Graph set on a GameObject. Item Description Input Ports GameObject (GameObject) The GameObject where the node should retrieve a set State Graph. Output Ports Graph (State Graph Asset) Outputs the first or only State Graph set on the GameObject, or null if there is no set State Graph. Setting the required node parameters and inputs The Get State Graph node is a data node. It can't control any logic in your script, and is only used to return data. The node has a single input port, located on the left side, which collects the node's required input data: The GameObject where the node should retrieve the State Graph. You can choose a specific GameObject, or leave the default selection as This to use the GameObject where your script is currently running. Outputs The Get State Graph node has a single output port, located on the right side. The output port returns the GameObject's first set State Graph, or null, if there is no set State Graph. Note The Get State Graph node returns only the first State Graph set on a GameObject. To return all State Graphs set on a GameObject, use the Get State Graphs node. Get State Graphs The Get State Graphs node returns a list of all State Graphs set on a GameObject. Item Description Input Ports GameObject (GameObject) The GameObject where the node should retrieve a list of set State Graphs. Output Ports Graphs (List of State Graph Assets) Outputs a list of all State Graphs set on the GameObject, or an empty list if there are no set State Graphs. Setting the required node parameters and inputs The Get State Graphs node is a data node. It can't control any logic in your script, and is only used to return data. The node has a single input port, located on the left side, which collects the node's required input data: The GameObject where the node should retrieve a list of State Graphs. You can choose a specific GameObject, or leave the default selection as This to use the GameObject where your script is currently running. Outputs The Get State Graphs node has a single output port, located on the right side. The output port returns a list of all set State Graphs for the GameObject, or an empty list, if there are no set State Graphs."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-sticky-notes.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-sticky-notes.html",
    "title": "Add comments to a graph | Cacher Game",
    "summary": "Add comments to a graph Use Sticky Notes to add comments to a graph. Sticky Notes can: Describe how a section of your graph works. Leave a note for yourself or others who might work on your Unity project. You can add text to the title and body of a Sticky Note. You can use Sticky Notes in Script Graphs and State Graphs. Add a Sticky Note to a graph To add a Sticky Note to a graph: Open a graph file in the Graph window. Do one of the following: Right-click anywhere in the Graph Editor to open the fuzzy finder. Select Sticky Note. With no items selected in the graph, right-click an empty space in the Graph Editor. Select Create Sticky Note. Edit a Sticky Note To edit text in the title or body of a Sticky Note: Open a graph file in the Graph window. Do one of the following: To edit the title of the Sticky Note, double-click the title. To edit the body of the Sticky Note, double-click the body. Enter the new text for the Sticky Note. Click anywhere in the Graph Editor to close the Sticky Note text editor. Tip You can also edit the text in a Sticky Note with the Graph Inspector: Select the Sticky Note you want to edit. Select Graph Inspector () from the toolbar. Do one of the following: To edit the title of the Sticky Note, select the title. To edit the body of the Sticky Note, select (Body). Enter the new text for the Sticky Note. Move a Sticky Note To move a Sticky Note to a new location in a graph: Open a graph file in the Graph window. Click and drag the Sticky Note to a new location. Delete a Sticky Note To delete a Sticky Note from a graph: Open a graph file in the Graph window. Do one of the following: Right-click a Sticky Note and select Delete. Select a Sticky Note and press Delete (Del). Resize a Sticky Note To change the size of a Sticky Note in a graph: Open a graph file in the Graph window. Click and drag a corner of a Sticky Note. Change the color of a Sticky Note To change the color theme for a Sticky Note: Open a graph file in the Graph window. Select the Sticky Note you want to edit. Select Graph Inspector () from the toolbar. Select a Color Theme: Classic Black Dark Orange Green Blue Red Purple Teal"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-time.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-time.html",
    "title": "Time nodes | Cacher Game",
    "summary": "Time nodes Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. Time nodes include timer, cooldown and wait nodes. Wait Wait nodes delay the execution of the rest of the script. The delay can be a set amount of seconds or a condition that must be fulfilled before moving on. Asynchronicity (delayed execution) in Unity is handled by coroutines (not multithreading). You need to inform visual scripting to run the script as a coroutine in order to support wait nodes. To do this enable the Coroutine checkbox on the initial event that starts the script. Do this in the graph inspector. A small dual-arrow icon appears on the event, indicating that it runs as a coroutine. If the coroutine checkbox is not enabled, an error at runtime indicates a port 'can only be triggered in a coroutine' when reaching a wait node. All wait nodes are also used inside loops and sequences. Wait For Seconds The Wait For Seconds node is the simplest and most common wait node. It delays the execution by a certain number of seconds. Wait Until The Wait Until node stops execution until a given condition is met. For example, you could wait until an object is close enough. Wait While The Wait While node is the opposite of the Wait Until node: it stops execution as long as a given condition is met. For example, you can wait while an object is out of range. Wait For Frame As the name implies, Wait For End Of Frame and Wait For Next Frame nodes delays execution until a specific point in Unity's update loop is met. For more information, see: Execution Order of Events. Wait For Script The Wait For Script node delays execution until all input scripts have been entered at least once. It's a useful way of grouping conditions that occur over multiple events or frames. In other languages, this concept is sometimes called \"promises\". Cooldown The Cooldown node implements a time restriction when the input script can only be triggered a limited number of times. When the cooldown is available, the input script gets transferred to the Ready port. When it is not, it gets transferred to the Not Ready port. The Duration port determines how long it takes for the cooldown to become available again. Checking Unscaled makes it ignore the time scale. The Tick port gets called at every frame while a cooldown is active. It is a good place to update any GUI code that show an indicator of the remaining duration until the action can be called again. In order to get that value, you have two options: Remaining, which returns the number of seconds until ready, and Remaining %, which returns a value between 0 and 1, respectively from ready to not ready. As soon as the cooldown is ready, the Completed port is triggered. There is no need to constantly pass input script for this port to get triggered. Finally, you can force the cooldown to become ready and reset its internal timer by triggering the Reset port. For example, a simple cooldown firing mechanic with a masked sprite and text that indicates how much time is remaining until it can fire again. Timer The Timer node implements and monitors a time pausable progression. The Duration port determines how long it takes for the cooldown to become available again. Checking Unscaled makes it ignore the time scale. A timer is started by triggering the Start input, which in turn triggers the Started output. It can be paused and resumed with the Pause and Resume inputs, or it can alternate between these states with the Toggle input. The Tick port gets called at every frame while a timer is active. In order to get the time measurements, you have two options: Elapsed, which returns the time since the timer was started, or Remaining, which returns the time until the timer completes. You can get each of these measurements in absolute number of seconds, or in %, which returns a value between 0 and 1. This is useful for lerping. As soon as the timer finishes, the Completed port is triggered. For example, a simple autodestroy mechanic on a sprite that is progressively colored red before being destroyed."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-transitions.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-transitions.html",
    "title": "Transitions | Cacher Game",
    "summary": "Transitions A transition is a connection between State nodes in a State Graph. A transition has a Script Graph that tells Visual Scripting when to switch states in a State Graph. A special transition type, called a self transition, can make a state transition to itself. You can embed the Script Graph for a transition in the Transition node itself, or link to an external graph asset file. Use Event nodes and a Trigger Transition node in the Script Graph you attach to a transition. These nodes specify which event or events must occur to trigger a change of state in your parent State Graph. For example, the following transition Script Graph switches states after a GameObject with the Player tag enters a trigger Collider. Any transition nodes with a transition Script Graph display the name of the event in the graph that triggers the state change. For example, the following parent State Graph displays the graph from the previous example as an On Trigger Enter Transition node. If you've assigned a name to a transition Script Graph, the assigned name appears on the Transition node. Tip To reduce the space taken up by transition nodes in a State Graph, you can hide their name labels. For more information, see Configure your preferences. You can create any number of transitions between states in a State Graph. For more information on how to create transitions, see Create a transition between states."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-types.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-types.html",
    "title": "Object types | Cacher Game",
    "summary": "Object types All scripting in Unity is based on the C# programming language. C# is a \"strongly typed\" language. This means that all data and objects in Visual Scripting have a specific type. For example, a variable can be a number with an integer type, or the object provided by a node's output port can be a GameObject. Types help the computer run Visual Scripting code. Visual Scripting's behavior might not depend on the object type you give a node as an input, but sometimes, an object's type is important. For example, to add a new variable in the Blackboard, you must specify the variable's type to assign it a value. When you make a new edge in the Graph Editor, some nodes might have ports that only allow a connection if the data input is the correct type. Choose the type for an object with the Type menu. For example, you can choose the type for a Data Input port on a Script Graph with the Type menu from the Graph Inspector. Enter a search term in the Type menu to find a specific object type. You can also navigate through the namespaces listed in the Type menu to find a type. Visual Scripting identifies namespaces in the Type menu with an arrow (>). Select any namespace to view the other namespaces or available types within that namespace. Common object types Unity has hundreds of types. You can also add your own custom types. For more information on custom types, see Custom types. The following table includes some commonly used types in Visual Scripting. Type Description Float A float is a numeric value, with or without decimal places. For example, 0.25 or 13.1. Integer An integer is a numeric value without decimal places. For example, 3 or 200. Boolean A Boolean is a true or false value. Use a Boolean to create logic in a Script Graph and for toggles. For example, a Script Graph can trigger an event only if a condition is true. String A string is a sequence of characters or piece of text. For example, string, string123, and s. Char A char is a single alphanumeric character from a string. For example, s or 1. Enum An enum is a finite enumeration of options. Enums are usually represented as dropdowns. For example, a Force Mode enum can have a value of either Force, Impulse, Acceleration, or Velocity Change. Vector A vector represents a set of float coordinates. Unity uses vectors for positions or directions. Vector 2 A Vector 2 has X and Y values. You can use a Vector 2 for coordinates in 2D spaces. Vector 3 A Vector 3 has X, Y, and Z values. You can use a Vector 3 for coordinates in 3D spaces. Vector 4 A Vector 4 has X, Y, Z, and W values. You can use a Vector 4 for coordinates in 4D spaces, such as parameters for shaders. GameObject A GameObject is the basic entity used in Unity scenes. All GameObjects have a name, a transform for their position and rotation in the scene, and a list of components. List A list is an ordered collection of elements. The elements in a list can each have their own type or all have the same type. Visual Scripting indexes items in a list with the first position at 0. This means that the first element of a list is at the 0 index of the list. The second item is at the 1 index, the third is at the 2 index, and so on. Dictionary A dictionary is a collection of elements. Each element has a unique key and a value. Use a key to access and assign the values for an element in a dictionary. For example, you can use a dictionary to organize the names and ages of a group of people. The person's name is the key to the value of their age. A single element in the dictionary can be John and 33. Object An Object is a special type in Unity. If a data input port on a node has its type set to Object, the node doesn't need a specific type as an input. Supported type conversions Visual Scripting can automatically convert some data types passed between nodes. For example, the following graph gets the Transform from a child GameObject of the current GameObject, and triggers an Animator Controller to play an animation. Visual Scripting converts the Transform component sent by the Transform Get Child node to the Animator Controller component on the same GameObject. Visual Scripting can automatically perform the following type conversions: Number to Number (for example, you can convert an integer to a float, such as 5 to 5.0, or 5.0 to 5) Base class to child class Child class to base class Custom operators (for example, you can convert a Vector 2 to a Vector 3) GameObject to a component (for example, a GameObject to its Rigidbody component) Component to GameObject (for example, a Rigidbody component to its GameObject) Component to component on the same GameObject (for example, a Rigidbody component to a Transform component) Enum to array Enum to list"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-update.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-update.html",
    "title": "Update Visual Scripting | Cacher Game",
    "summary": "Update Visual Scripting Tip Back up your data before you update to a new version of Visual Scripting. For more information on how to back up your Visual Scripting assets and settings, see Create or restore a backup. Before you update, confirm that the version of Visual Scripting is compatible with your current project and needs. For example, you shouldn't use a Preview version of Visual Scripting in a production environment. For more information on package states and the package lifecycle in Unity, see the Package state and lifecycle in the Unity User Manual. To update your current version of Visual Scripting: Go to Window > Package Manager. In the Packages drop-down menu, select In Project. In your list of packages, select Visual Scripting. Select Update to X.X.X, where X.X.X is the newest available version of Visual Scripting."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-using-custom-types.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-using-custom-types.html",
    "title": "Use a custom type | Cacher Game",
    "summary": "Use a custom type Visual Scripting supports every class and struct type available in Unity. By default, the most common are available in the fuzzy finder. Add additional Unity assemblies, such as custom types and classes, through your project settings. You must write some additional code to use a custom type or class in a graph. You can't assign a value to a variable with a custom type from Unity's Inspector window, or initialize it from inside the Unity Editor if this additional code isn't available. You must assign a default value for a custom type through the Inspector window to use that type for a variable in Visual Scripting. You have two options to enable variable assignment and initialization: If you have access to the source code, you can add the [Inspectable] attribute to the classes and fields that you want to display and modify in the Editor. If you don't have access to the source code, you must create a custom PropertyDrawer and generate the required property provider scripts. Add the [Inspectable] attribute Add the [Inspectable] attribute to the code for your custom class to display its available properties in the Inspector window and Visual Scripting's Graph Inspector. You can't view your classes and fields in the Inspector window without the [Inspectable] attribute. Unity provides a basic UI for your types in the Inspector window, which might not give the aesthetic results you want. If you or your users want to configure a property for a custom type with a slider, for example, don't use the [Inspectable] attribute method. For more information on how to add the [Inspectable] attribute to a custom class, see Add the Inspectable attribute to the source code for a custom type. Create a custom PropertyDrawer Create a custom PropertyDrawer to choose how to display each property for a custom class in the Inspector window. Without access to the source code, you must create a PropertyDrawer to interact with custom-typed variables in Visual Scripting. If you see an error in the Unity Editor's Inspector window when you try to use a type from a third-party package, you must create a custom PropertyDrawer. Note If you are a package developer, or plan to provide your custom classes and types to other users and want those types to be available in Visual Scripting, create a custom PropertyDrawer to get the best results for your users. For more information on how to create a custom PropertyDrawer, see Create a custom PropertyDrawer for a custom type. After you create a custom PropertyDrawer for a custom type, you must generate the necessary property provider scripts. For more information, see the Generate option in Configure project settings."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-variables-api.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-variables-api.html",
    "title": "Variables API | Cacher Game",
    "summary": "Variables API Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. Visual scripting provides an easy API to handle variables, to get or set their value and verify if they are defined. All these operations are available from the Variables class. For example: Variables.Application.Set(\"score\", 100); Usings Add the following usings to your C# script to access the API: using Unity.VisualScripting; Scopes Graph To access variables on a graph, create a graph reference. This is basically a path to the nested graph from its root machine. To get the root graph on a machine: var graphReference = GraphReference.New(flowMachine, true); To access nested graphs, pass their parent nodes as additional parameters: var graphReference = GraphReference.New(flowMachine, new IGraphParentElement[] { subGraph }, true); To pass a graph reference: Variables.Graph(graphReference) Object To access variables on an object: Variables.Object(gameObject) Scene To access scene variables, do one of the following: Variables.Scene(scene) Or: Variables.Scene(gameObjectInScene) Or: Variables.ActiveScene Application To access application variables: Variables.Application Saved To access saved variables: Variables.Saved Operations In these examples, the lowercase scope refers to one of the previous scopes. Get To get the value of a variable, use the Get method with a name parameter: scope.Get(\"name\"); Note that variables are not strongly typed; they need to be cast manually. For example: int health = (int)Variables.Object(player).Get(\"health\") Set To set the value of a variable, use the Set method with the name and value parameters: scope.Set(\"name\", value); For example: Variables.Object(player).Set(\"health\", 100); Because variables are not strongly typed, pass any value to the second parameter, even if the variable currently is of a different type. Note Using the set method with a variable name that does not yet exist defines a new variable. Is Defined To check if a variable is defined, use the IsDefined method with a name parameter: scope.IsDefined(\"name\"); For example: if (Variables.Application.IsDefined(\"score\")) { // ... }"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-variables-reference.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-variables-reference.html",
    "title": "Variables node | Cacher Game",
    "summary": "Variables node Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. There are six kinds of variable nodes. Each of these variable nodes has three object nodes: Get, to retrieve the value of the variable Set, to assign a new value to the variable Is Defined, to check whether the variable is defined They are located under the Variables category in the fuzzy finder. Variable nodes are teal colored. Dynamic Typing For get / set nodes, variables are not statically typed, meaning their type can change at runtime. Their type displays as an object when defined from the blackboard window. Get Variable The get variable node requires the name of the variable as an input and returns the Value as an output. Set Variable The set variable nodes require the name of the variable and the new value assigned to it as inputs. For convenience in layouting, it returns this same value as an output. Connect the control input port to indicate when the variable should be assigned and, optionally, the control output port to indicate what to do after. Using a set node with a variable name that doesn't yet exist creates the variable. Has Variable The Has Variable nodes require the name of the variable as an input and returns an Is Defined boolean as an output. They're useful to check if a variable has been created, and often, provide a fallback value if it hasn't. Do the same thing more easily by checking the Fallback box in the graph inspector for a Get Variable node. This adds a Fallback input to the node that is returned if the variable hasn't been defined: Dynamic Variables As the name of the variable is a standard value input port, connect it to any other port that returns a string. Refer to \"dynamic variables\", that is, variables whose reference might change during play mode. Object Variables Object variable nodes require an additional input for the Source. That port indicates which game object the variable you're referring to is defined. When left to its default value, they look on the current object (self). For example, the Get Variable node gets the value of the health variable on the player2 object. Dropdowns The kind and the name dropdowns can quickly configure the variable nodes. The name suggestions are contextual and are based on the existing variables of this kind and on the other variable nodes in the current graph. Drag and Drop Drag and drop items from the blackboard window directly into the graph to create matching nodes. By default, a Get node is created. If the Alt key is held, a Set node is created. If the Shiftkey is held, an Is Defined node is created. Variables API Visual scripting provides an easy API to handle variables, to get or set their value and verify if they are defined. All these operations are available from the Variables class. For example: Variables.Application.Set(\"score\", 100); Usings Add the following usings to your C# script to access the API: using Unity.VisualScripting; Scope Graph To access variables on a graph, create a graph reference. This is basically a path to the nested graph from its root machine. To get the root graph on a machine: var graphReference = GraphReference.New(flowMachine, true); To access nested graphs, pass their parent nodes as additional parameters: var graphReference = GraphReference.New(flowMachine, new IGraphParentElement[] { superUnit }, true); To pass a graph reference: Variables.Graph(graphReference) Object To access variables on an object: Variables.Object(gameObject) Scene To access scene variables, do one of the following: Variables.Scene(scene) Or: Variables.Scene(gameObjectInScene) Or: Variables.ActiveScene Application To access application variables: Variables.Application Saved To access saved variables: Variables.Saved Operations In these examples, the lowercase scope refers to one of the previous scopes. Get To get the value of a variable, use the Get method with a name parameter: scope.Get(\"name\"); Note that variables are not strongly typed; they need to be cast manually. For example: int health = (int)Variables.Object(player).Get(\"health\") Set To set the value of a variable, use the Set method with the name and value parameters: scope.Set(\"name\", value); For example: Variables.Object(player).Set(\"health\", 100); Because variables are not strongly typed, pass any value to the second parameter, even if the variable currently is of a different type. Note Using the set method with a variable name that does not yet exist defines a new variable. Is Defined To check if a variable is defined, use the IsDefined method with a name parameter: scope.IsDefined(\"name\"); For example: if (Variables.Application.IsDefined(\"score\")) { // ... }"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-variables.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-variables.html",
    "title": "Variables | Cacher Game",
    "summary": "Variables Variables act as a container for a piece of information that might change as an application runs. To define a variable, you need to provide: A name for the variable, such as MyVariable. The type of data the variable holds, such as int or string . A value for the variable, such as 1 or cat. In Visual Scripting, you can give a node the name of a variable, instead of a fixed value or text. Your Script Graph uses the variable's name to access its value. For example, you can use a variable called Count, with an int type and a value of 1. You can use an Add node in Visual Scripting to add 1 to the value of Count, and save the new value in Count to use again in another part of your Script Graph, or a different Script Graph. Variables also have scopes. A variable's scope determines what parts of your Script Graph can access which variables to read or modify their values. The scope can also decide whether another Script Graph can access a variable. You can create and manage variables in a graph from the Blackboard. For more information on the Blackboard, see The Blackboard. For more information on how to use variables, see Create and add a variable to a Script Graph. Variable scopes Each variable scope has its own tab on the Blackboard, except Flow variables. Visual Scripting has six variable scopes. Variable Scope Property Flow Variables Flow variables are like local variables in a scripting language: they have the smallest scope. You can't use a Flow variable if: The Flow variable doesn’t have a direct or indirect connection to the nodes where you want to use its value. The node where the variable is defined must be a part of the logical flow where you want to use its value. The Flow variable hasn’t been set before Visual Scripting tries to run any logic that needs its value. The node where the variable is defined must come before any other logic in your graph. You can't create a Flow variable from the Blackboard - you can create one with a Set Variable node and set the Scope to Flow. Graph Variables Graph variables belong to a specific Script Graph. You can't access or modify Graph variables outside the specific Script Graph where they're defined. You also can't create a new Graph variable unless you have a Script Graph open in the Graph window. Object Variables Object variables belong to a specific GameObject. You can edit an Object variable from the Unity Editor's Inspector for the GameObject, and the Object variable is accessible in all graphs attached to the GameObject. You can't create a new Object variable unless you've opened your Script Graph from a Script Machine component on a GameObject. Scene Variables Scene variables belong to the current scene. Visual Scripting creates a new GameObject in your scene to hold references to your Scene variables. You can access your Scene variables from any Script Graph attached to a different GameObject in a single scene, but can't access a Scene variable in another scene in your project. App or Application Variables Application variables belong to your entire application. You can access an Application variable across multiple scenes while your application runs, and the Application variable would hold your changes. Any values held in an Application variable reset to their default values after your application quits. Saved Variables Saved variables are like Application variables, but they persist even after your application quits. You can use a Saved variable as a simple but powerful save system. Unity stores Saved variables in its PlayerPrefs, and they don't refer to Unity objects, like GameObjects and components. For more information on PlayerPrefs, see PlayerPrefs in the Unity User Manual Scripting Reference. Note You can still access the Blackboard and create new variables with a State Graph open in the Graph window, but you can't add a variable node and use it inside a State Graph. For Saved variables, there are two additional tabs on the Blackboard: Initial and Saved: Values defined in the Initial tab apply to all new instances of your application as default values. Values defined in the Saved tab are the last modified values for those variables, based on when you last ran your application. You can edit them manually, or delete the values to reset them to the values defined in the Initial tab."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-version-control.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Documentation~/vs-version-control.html",
    "title": "Version control systems | Cacher Game",
    "summary": "Version control systems To avoid any problems with automatically generated files, exclude some Visual Scripting files from your version control solution. To exclude files from version control, include a file or configure your settings to specify which files and folders to exclude: Create a new file at the root of your project directory. Tip The root of your project directory is at the level above your Assets folder. Name the file based on your chosen version control system: Git: .gitignore. For more information, see Git's documentation on gitignore. Unity Collab: .collabignore. For more information, see the Unity User Manual. Subversion: Ignore the files from your svn:ignore property or runtime configuration options. For more information, see Subversion's documentation on Ignoring Unversioned Items. Open the file in a text editor. Add the appropriate files or file patterns to your ignore file or configuration. For an example and more information, see Ignore file template. Note If you have an issue when you try to create a .gitignore file on Windows, refer to Microsoft's documentation on how to create a .gitignore file from the command line. Ignore file template The following template ignores all core Visual Scripting files, but preserves your project settings and variables. It also includes the standard Unity ignore directives for files that you can exclude from version control. For more information, see the Unity.gitignore file included in GitHub's gitignore template repository. Refer to the comments in the template for which lines to comment or remove. # Optionally exclude these transient (generated) files, # because they can be easily re-generated by the package Assets/Unity.VisualScripting.Generated/VisualScripting.Flow/UnitOptions.db Assets/Unity.VisualScripting.Generated/VisualScripting.Flow/UnitOptions.db.meta Assets/Unity.VisualScripting.Generated/VisualScripting.Core/Property Providers Assets/Unity.VisualScripting.Generated/VisualScripting.Core/Property Providers.meta ## Unity # From: https://github.com/github/gitignore/blob/master/Unity.gitignore /[Ll]ibrary/ /[Tt]emp/ /[Oo]bj/ /[Bb]uild/ /[Bb]uilds/ /[Ll]ogs/ /[Uu]ser[Ss]ettings/ # MemoryCaptures can get excessive in size. # They also could contain extremely sensitive data /[Mm]emoryCaptures/ # Asset meta data should only be ignored when the corresponding asset is also ignored !/[Aa]ssets/**/*.meta # Uncomment this line if you want to ignore the asset store tools plugin # /[Aa]ssets/AssetStoreTools* # Autogenerated Jetbrains Rider plugin /[Aa]ssets/Plugins/Editor/JetBrains* # Visual Studio cache directory .vs/ # Gradle cache directory .gradle/ # Autogenerated VS/MD/Consulo solution and project files ExportedObj/ .consulo/ *.csproj *.unityproj *.sln *.suo *.tmp *.user *.userprefs *.pidb *.booproj *.svd *.pdb *.opendb *.VC.db # Unity3D generated meta files *.pidb.meta *.pdb.meta *.mdb.meta # Unity3D Generated File On Crash Reports sysinfo.txt # Builds *.apk *.aab *.unitypackage # Crashlytics generated file crashlytics-build.properties # Packed Addressables /[Aa]ssets/[Aa]ddressable[Aa]ssets[Dd]ata/*.*.bin* # Temporary auto-generated Android Assets /[Aa]ssets/[Ss]treamingAssets/aa.meta /[Aa]ssets/[Ss]treamingAssets/aa/* Remove previously committed files If you committed any files to a version control solution that you want to exclude: See Git's documentation on the git-rm command. See Subversion's documentation on the svn delete command."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/LICENSE.html",
    "title": "| Cacher Game",
    "summary": "com.unity.visualscripting copyright © 2020 Unity Technologies Licensed under the Unity Package Distribution License (see https://unity3d.com/legal/licenses/Unity_Package_Distribution_License ). Unless expressly provided otherwise, the software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/README.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/README.html",
    "title": "Visual Scripting (com.unity.visualscripting) | Cacher Game",
    "summary": "Visual Scripting (com.unity.visualscripting) Visual Scripting, previously known as BOLT, is an alternative workflow to design behaviours. Instead of the classic method of writing a C# script, visual scripting offers a way to design behaviours intuitively without code, by connecting events, actions, and data together in a graph. Both programmers and non-programmers can use node-based graphs to design final logic or to quickly create prototypes. This package also features an API that programmers can use for more advanced tasks, or to create custom nodes that can be used by other team members. Required Software Unity: Supported versions include 2021.1 Documentation Documentation is available here. For further discussion, visit the Discord or the Visual Scripting forum."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.1/Third Party Notices.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.1/Third Party Notices.html",
    "title": "| Cacher Game",
    "summary": "This package contains third-party software components governed by the license(s) indicated below: Component Name: AQN Parser License Type: Microsoft Public License Copyright © 2013 Christophe Bertrand https://www.codeproject.com/Tips/624300/AssemblyQualifiedName-Parser This license governs use of the accompanying software. If you use the software, you accept this license. If you do not accept the license, do not use the software. Definitions The terms \"reproduce,\" \"reproduction,\" \"derivative works,\" and \"distribution\" have the same meaning here as under U.S. copyright law. A \"contribution\" is the original software, or any additions or changes to the software. A \"contributor\" is any person that distributes its contribution under this license. \"Licensed patents\" are a contributor's patent claims that read directly on its contribution. Grant of Rights (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create. (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software. Conditions and Limitations (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks. (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, your patent license from such contributor to the software ends automatically. (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution notices that are present in the software. (D) If you distribute any portion of the software in source code form, you may do so only under this license by including a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object code form, you may only do so under a license that complies with this license. (E) The software is licensed \"as-is.\" You bear the risk of using it. The contributors give no express warranties, guarantees or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular purpose and non-infringement. Component Name: Deep Copy License Type: MIT Copyright © 2014 Alexey Burtsev https://github.com/Burtsev-Alexey/net-object-deep-copy Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. Component Name: DotNetZip License Type: Microsoft Public License Copyright © 2017 Ionic https://dotnetzip.codeplex.com/ This license governs use of the accompanying software. If you use the software, you accept this license. If you do not accept the license, do not use the software. Definitions The terms \"reproduce,\" \"reproduction,\" \"derivative works,\" and \"distribution\" have the same meaning here as under U.S. copyright law. A \"contribution\" is the original software, or any additions or changes to the software. A \"contributor\" is any person that distributes its contribution under this license. \"Licensed patents\" are a contributor's patent claims that read directly on its contribution. Grant of Rights (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create. (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software. Conditions and Limitations (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks. (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, your patent license from such contributor to the software ends automatically. (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution notices that are present in the software. (D) If you distribute any portion of the software in source code form, you may do so only under this license by including a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object code form, you may only do so under a license that complies with this license. (E) The software is licensed \"as-is.\" You bear the risk of using it. The contributors give no express warranties, guarantees or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular purpose and non-infringement. Component Name: FatCow Icons License Type: Creative Commons Attribution 3.0 Copyright © 2017 FatCow Web Hosting https://www.fatcow.com/free-icons THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS CREATIVE COMMONS PUBLIC LICENSE (\"CCPL\" OR \"LICENSE\"). THE WORK IS PROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE OF THE WORK OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS PROHIBITED. BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND AGREE TO BE BOUND BY THE TERMS OF THIS LICENSE. TO THE EXTENT THIS LICENSE MAY BE CONSIDERED TO BE A CONTRACT, THE LICENSOR GRANTS YOU THE RIGHTS CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF SUCH TERMS AND CONDITIONS. Definitions \"Collective Work\" means a work, such as a periodical issue, anthology or encyclopedia, in which the Work in its entirety in unmodified form, along with one or more other contributions, constituting separate and independent works in themselves, are assembled into a collective whole. A work that constitutes a Collective Work will not be considered a Derivative Work (as defined below) for the purposes of this License.\"Derivative Work\" means a work based upon the Work or upon the Work and other pre-existing works, such as a translation, musical arrangement, dramatization, fictionalization, motion picture version, sound recording, art reproduction, abridgment, condensation, or any other form in which the Work may be recast, transformed, or adapted, except that a work that constitutes a Collective Work will not be considered a Derivative Work for the purpose of this License. For the avoidance of doubt, where the Work is a musical composition or sound recording, the synchronization of the Work in timed-relation with a moving image (\"synching\") will be considered a Derivative Work for the purpose of this License.\"Licensor\" means the individual, individuals, entity or entities that offers the Work under the terms of this License.\"Original Author\" means the individual, individuals, entity or entities who created the Work.\"Work\" means the copyrightable work of authorship offered under the terms of this License.\"You\" means an individual or entity exercising rights under this License who has not previously violated the terms of this License with respect to the Work, or who has received express permission from the Licensor to exercise rights under this License despite a previous violation.2. Fair Use Rights. Nothing in this license is intended to reduce, limit, or restrict any rights arising from fair use, first sale or other limitations on the exclusive rights of the copyright owner under copyright law or other applicable laws. License Grant. Subject to the terms and conditions of this License, Licensor hereby grants You a worldwide, royalty-free, non-exclusive, perpetual (for the duration of the applicable copyright) license to exercise the rights in the Work as stated below: to reproduce the Work, to incorporate the Work into one or more Collective Works, and to reproduce the Work as incorporated in the Collective Works;to create and reproduce Derivative Works provided that any such Derivative Work, including any translation in any medium, takes reasonable steps to clearly label, demarcate or otherwise identify that changes were made to the original Work. For example, a translation could be marked \"The original work was translated from English to Spanish,\" or a modification could indicate \"The original work has been modified.\";;to distribute copies or phonorecords of, display publicly, perform publicly, and perform publicly by means of a digital audio transmission the Work including as incorporated in Collective Works;to distribute copies or phonorecords of, display publicly, perform publicly, and perform publicly by means of a digital audio transmission Derivative Works.For the avoidance of doubt, where the Work is a musical composition: Performance Royalties Under Blanket Licenses. Licensor waives the exclusive right to collect, whether individually or, in the event that Licensor is a member of a performance rights society (e.g. ASCAP, BMI, SESAC), via that society, royalties for the public performance or public digital performance (e.g. webcast) of the Work.Mechanical Rights and Statutory Royalties. Licensor waives the exclusive right to collect, whether individually or via a music rights agency or designated agent (e.g. Harry Fox Agency), royalties for any phonorecord You create from the Work (\"cover version\") and distribute, subject to the compulsory license created by 17 USC Section 115 of the US Copyright Act (or the equivalent in other jurisdictions).Webcasting Rights and Statutory Royalties. For the avoidance of doubt, where the Work is a sound recording, Licensor waives the exclusive right to collect, whether individually or via a performance-rights society (e.g. SoundExchange), royalties for the public digital performance (e.g. webcast) of the Work, subject to the compulsory license created by 17 USC Section 114 of the US Copyright Act (or the equivalent in other jurisdictions).The above rights may be exercised in all media and formats whether now known or hereafter devised. The above rights include the right to make such modifications as are technically necessary to exercise the rights in other media and formats. All rights not expressly granted by Licensor are hereby reserved. Restrictions. The license granted in Section 3 above is expressly made subject to and limited by the following restrictions: You may distribute, publicly display, publicly perform, or publicly digitally perform the Work only under the terms of this License, and You must include a copy of, or the Uniform Resource Identifier for, this License with every copy or phonorecord of the Work You distribute, publicly display, publicly perform, or publicly digitally perform. You may not offer or impose any terms on the Work that restrict the terms of this License or the ability of a recipient of the Work to exercise the rights granted to that recipient under the terms of the License. You may not sublicense the Work. You must keep intact all notices that refer to this License and to the disclaimer of warranties. When You distribute, publicly display, publicly perform, or publicly digitally perform the Work, You may not impose any technological measures on the Work that restrict the ability of a recipient of the Work from You to exercise the rights granted to that recipient under the terms of the License. This Section 4(a) applies to the Work as incorporated in a Collective Work, but this does not require the Collective Work apart from the Work itself to be made subject to the terms of this License. If You create a Collective Work, upon notice from any Licensor You must, to the extent practicable, remove from the Collective Work any credit as required by Section 4(b), as requested. If You create a Derivative Work, upon notice from any Licensor You must, to the extent practicable, remove from the Derivative Work any credit as required by Section 4(b), as requested.If You distribute, publicly display, publicly perform, or publicly digitally perform the Work (as defined in Section 1 above) or any Derivative Works (as defined in Section 1 above) or Collective Works (as defined in Section 1 above), You must, unless a request has been made pursuant to Section 4(a), keep intact all copyright notices for the Work and provide, reasonable to the medium or means You are utilizing: (i) the name of the Original Author (or pseudonym, if applicable) if supplied, and/or (ii) if the Original Author and/or Licensor designate another party or parties (e.g. a sponsor institute, publishing entity, journal) for attribution (\"Attribution Parties\") in Licensor's copyright notice, terms of service or by other reasonable means, the name of such party or parties; the title of the Work if supplied; to the extent reasonably practicable, the Uniform Resource Identifier, if any, that Licensor specifies to be associated with the Work, unless such URI does not refer to the copyright notice or licensing information for the Work; and, consistent with Section 3(b) in the case of a Derivative Work, a credit identifying the use of the Work in the Derivative Work (e.g., \"French translation of the Work by Original Author,\" or \"Screenplay based on original Work by Original Author\"). The credit required by this Section 4(b) may be implemented in any reasonable manner; provided, however, that in the case of a Derivative Work or Collective Work, at a minimum such credit will appear, if a credit for all contributing authors of the Derivative Work or Collective Work appears, then as part of these credits and in a manner at least as prominent as the credits for the other contributing authors. For the avoidance of doubt, You may only use the credit required by this Section for the purpose of attribution in the manner set out above and, by exercising Your rights under this License, You may not implicitly or explicitly assert or imply any connection with, sponsorship or endorsement by the Original Author, Licensor and/or Attribution Parties, as appropriate, of You or Your use of the Work, without the separate, express prior written permission of the Original Author, Licensor and/or Attribution Parties.5. Representations, Warranties and Disclaimer UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING, LICENSOR OFFERS THE WORK AS-IS AND ONLY TO THE EXTENT OF ANY RIGHTS HELD IN THE LICENSED WORK BY THE LICENSOR. THE LICENSOR MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE WORK, EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION, WARRANTIES OF TITLE, MARKETABILITY, MERCHANTIBILITY, FITNESS FOR A PARTICULAR PURPOSE, NONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OF ABSENCE OF ERRORS, WHETHER OR NOT DISCOVERABLE. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED WARRANTIES, SO SUCH EXCLUSION MAY NOT APPLY TO YOU. Limitation on Liability. EXCEPT TO THE EXTENT REQUIRED BY APPLICABLE LAW, IN NO EVENT WILL LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY FOR ANY SPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE OR EXEMPLARY DAMAGES ARISING OUT OF THIS LICENSE OR THE USE OF THE WORK, EVEN IF LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. Termination This License and the rights granted hereunder will terminate automatically upon any breach by You of the terms of this License. Individuals or entities who have received Derivative Works (as defined in Section 1 above) or Collective Works (as defined in Section 1 above) from You under this License, however, will not have their licenses terminated provided such individuals or entities remain in full compliance with those licenses. Sections 1, 2, 5, 6, 7, and 8 will survive any termination of this License.Subject to the above terms and conditions, the license granted here is perpetual (for the duration of the applicable copyright in the Work). Notwithstanding the above, Licensor reserves the right to release the Work under different license terms or to stop distributing the Work at any time; provided, however that any such election will not serve to withdraw this License (or any other license that has been, or is required to be, granted under the terms of this License), and this License will continue in full force and effect unless terminated as stated above.8. Miscellaneous Each time You distribute or publicly digitally perform the Work (as defined in Section 1 above) or a Collective Work (as defined in Section 1 above), the Licensor offers to the recipient a license to the Work on the same terms and conditions as the license granted to You under this License.Each time You distribute or publicly digitally perform a Derivative Work, Licensor offers to the recipient a license to the original Work on the same terms and conditions as the license granted to You under this License.If any provision of this License is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this License, and without further action by the parties to this agreement, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable.No term or provision of this License shall be deemed waived and no breach consented to unless such waiver or consent shall be in writing and signed by the party to be charged with such waiver or consent.This License constitutes the entire agreement between the parties with respect to the Work licensed here. There are no understandings, agreements or representations with respect to the Work not specified here. Licensor shall not be bound by any additional provisions that may appear in any communication from You. This License may not be modified without the mutual written agreement of the Licensor and You. Component Name: Full Serializer License Type: MIT Copyright © 2017 Jacob Dufault https://github.com/jacobdufault/fullserializer Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. Component Name: Iconmonstr Icons License Type: Bespoke Copyright (c) 2020 iconmonstr Alexander Kahlkopf https://iconmonstr.com This license agreement (the “Agreement”) sets forth the terms by which Alexander Kahlkopf, the owner of iconmonstr (the “Licensor”), shall provide access to certain Work (defined below) to you (the “Licensee”, “you” or “your”). This Agreement regulates the free use of the icons, fonts, images and other media content (collectively, the “Work”), which is made available via the website iconmonstr.com (the “Website”). By downloading or copying a Work, you agree to be bound by the following terms and conditions. Grant of Rights The Works on the Website are copyrighted property of Licensor. Licensor hereby grants Licensee a perpetual, non-exclusive, non-transferrable single-user license for the use of the Work based on the conditions of this Agreement. You agree that the Work serves as part of the design and is not the basis or main component of the product, template or application distributed by the Licensee. Furthermore, you agree not to sell, redistribute, sublicense, share or otherwise transfer the Work to other people or entities. Permitted Uses Licensee may use the Work in non-commercial and commercial projects, services or products without attribution.Licensee may use the Work for any illustrative purposes in any media, including, but not limited to, websites, web banners, newsletters, PDF documents, blogs, emails, slideshows, TV and video presentations, smartphones, splash screens, movies, magazine articles, books, advertisements, brochures, document illustrations, booklets, billboards, business cards, packages, etc.Licensee may use the Work in template or application without attribution; provided, however, that the Work serves as part of the design and is not the basis or main component of the product, template or application distributed by Licensee and is not used contrary to the terms and conditions of this Agreement.Licensee may adapt or change the Work according to his or her requirements. Prohibited Uses Licensee may not sell, redistribute, sublicense, share or otherwise transfer the Work to other people or entities.Licensee may not use the Work as part of a logo, trademark or service mark.Licensee may not use the Work for pornographic, infringing, defamatory, racist or religiously offensive illustrations. Additional Information on Rights Certain Works, such as logos or brands, are subject to copyright and require the agreement of a third party for the assignment of these rights. Licensee is responsible for providing all rights, agreements, and licenses for the use of the Work. Termination This Agreement shall automatically terminate without notice if you do not comply with the terms or conditions specified in this Agreement. If you yourself wish to terminate this Agreement, destroy the Work, all copies and derivatives of the Work and any materials related to it. Indemnification You agree to indemnify Licensor for any and all claims, liability performances, damages, costs (including attorney fees) or other liabilities that are caused by or related to a breach of this Agreement, which are caused by the use of the Website or Work, by the non-compliance of the use restrictions of a Work or which are caused by the claims of third parties regarding the use of a Work. Warranty and Liability The Website and the Works are provided “as is.” Licensor does not accept any warranty or liability regarding a Work, the Website, the accuracy of the information or rights described therein or the licenses, which are subject to this Agreement. Licensor is not liable for damages, costs, losses or claims incurred by you, another person or entity by the use of the Website or the Works. Component Name: MD4 Managed Implementation License Type: MIT Copyright (C) 2003 Motus Technologies Inc. (http://www.motus.com) Copyright (C) 2004-2005,2010 Novell, Inc (http://www.novell.com) Author: Sebastien Pouliot (sebastien@ximian.com) https://github.com/mono/mono/blob/master/mcs/class/Mono.Security/Mono.Security.Cryptography/MD4Managed.cs Permission is hereby granted, free of charge, to any person obtaininga copy of this software and associated documentation files (the\"Software\"), to deal in the Software without restriction, includingwithout limitation the rights to use, copy, modify, merge, publish,distribute, sublicense, and/or sell copies of the Software, and topermit persons to whom the Software is furnished to do so, subject tothe following conditions: The above copyright notice and this permission notice shall beincluded in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OFMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE ANDNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BELIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTIONOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTIONWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: Reorderable List License Type: MIT Copyright (c) 2013-2015 Rotorz Limited Author: Rotorz Limited https://bitbucket.org/rotorz/reorderable-list-editor-field-for-unity Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: SQLite License Type: Public Domain Copyright owner not applicable https://www.sqlite.org/index.html SQLite is in the public domain and does not require a license Component Name: SQLite .NET License Type: MIT Copyright (c) Krueger Systems Inc https://github.com/praeclarum/sqlite-net Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: YamlDotNet License Type: MIT Copyright (c) 2008, 2009, 2010, 2011, 2012, 2013, 2014 Antoine Aubry and contributors http://aaubry.net/pages/yamldotnet.html Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: Ensure.That License Type: MIT Copyright (c) 2015 Daniel Wertheim https://github.com/danielwertheim/Ensure.That Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: NCalc License Type: MIT Copyright (c) 2011 Sebastien Ros https://github.com/ncalc/ncalc Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: Antlr 3 Runtime License Type: BSD License Copyright (c) 2011 The ANTLR Project All rights reserved. https://github.com/antlr/antlrcs [The \"BSD license\"] Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  "Library/PackageCache/com.unity.xr.legacyinputhelpers@2.1.10/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.xr.legacyinputhelpers@2.1.10/CHANGELOG.html",
    "title": "Changelog | Cacher Game",
    "summary": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. [2.1.10] - 2022-07-26 Fixed a build error about a mismatch of the serialized fields between Editor and Player due to m_PoseProviderComponent. That field and its type is now always included, not just when ENABLE_AR or ENABLE_VR are defined. [2.1.9] - 2022-02-18 Fixed a build failure when building through script for a platform other than what is selected in the Editor UI as the current platform to build for. (1371347) [2.1.8] - 2021-05-04 Changed Tracked Pose Driver so it applies the pose to the Transform before the default time during the \"Just Before Render\" phase of the frame. This was already the case for Update, and is now also the case for Application.onBeforeRender callbacks. Use the BeforeRenderOrder attribute to specify a custom callback order lower than -30000 if your callback needs to execute before Tracked Pose Driver. Fixed issue with OpenXR and reacting to an invalid stage space on startup. [2.1.7] - 2020-12-09 Fixes XR Rig upgrade scenarios for when URP and HDRP are in the same project Tests agains URP and HDRP v11. [2.1.6] - 2020-10-28 Fixes error message when using the color camera Changes default near clip plane to 0.01f Fixes rig migration for URP and HDRP. [2.1.5] - 2020-10-14 Updates to latest yamato scripts. fixes CI isssues. [2.1.4] - 2020-04-23 Fix for URP and HDRP project migrating. [2.1.3] - 2020-04-08 Fixes incorrect documentation merge [2.1.2] - 2020-04-06 Better backcompat with 1.3.X streams [2.1.1] - 2020-03-27 Better backcompat with 1.3.X streams [2.1.0] - 2020-03-25 Roll up of 1.4.0, 1.4.1, 1.4.2 XR Management changes to the 2.X stream [2.0.8] - 2020-02-13 Roll up of fixes from 1.3.9->1.3.11 fix for UnityEngine.XR usage outside of ifdefs. fix for programatically added TPD's not saving Fixes for 2020.1 deprecation of features. [2.0.7] - 2019-12-18 Fixes for 2020.1 deprecation of features. (from 1.3.9) Fixes switch compile errors. (from 1.3.8) Fix for PS4 compile error. (from 1.3.7) [2.0.6] - 2019-07-25 Fix for incorrect selection logic (from 1.3.6) [2.0.5] - 2019-07-23 merges 1.3.5 into the mainline stream [2.0.4] - 2019-06-07 Update version number for Yamato. [2.0.3] - 2019-06-03 More fixes to compiler error on non XR platforms (thanks again @zilys!) fixes unit test. removes knuckles finger input bindings [2.0.2] - 2019-03-12 fixes compiler error on non XR platforms (thanks @zilys!) [2.0.1] - 2019-01-02 fixes standalone compile error / forward port of 1.3.2 fix [2.0.0] - 2019-01-02 breaking changes to API to allow pose data queries to indiciate what data was actually valid. this fixes the bug where position was being set to identity if only rotation was provided by the input system. Pose provider API has now changed to return a PoseDataFlags bitflag, the bitflag will indiciate what pieces of data was set on the output pose parameter. public abstract bool TryGetPoseFromProvider(out Pose output) is now public virtual PoseDataFlags GetPoseFromProvider(out Pose output) All pose providers in this package have been updated, as has the tracked pose driver code to correctly handle the returned bitflags. Any user derived users of this API will need to also update their code accordingly. New unit tests added for this case in the tracked pose driver [1.4.2] - 2020-03-24 removes incorrect comment. [1.4.1] - 2020-03-23 minor tweaks to version [1.4.0] - 2020-02-11 Updates for XR Management UX Flow changes, the correct version to use for XR mgt is 2.1.0 [1.3.11] - 2020-02-05 fix for UnityEngine.XR usage outside of ifdefs. [1.3.10] - 2019-12-05 fix for programatically added TPD's not saving [1.3.9] - 2019-11-12 Fixes for 2020.1 deprecation of features. [1.3.8] - 2019-10-21 Fixes switch compile errors. [1.3.7] - 2019-08-02 Fix for PS4 compile error. [1.3.6] - 2019-07-25 Fix for incorrect selection logic [1.3.5] - 2019-07-17 Minor changes to the TPD and its associated editor TPD defaults to \"Center Eye - HMD Reference\" and Reference Tracking off. Warnings for when center eye is not picked, if the TPD is on a camera \"Center Eye renamed\" to \"Center Eye - HMD Reference\" for clarity Adds XR Settings page when using com.unity.xr.management that allows automatic TPD attachment to cameras. [1.3.4] - 2019-07-07 Verified package for 2019.3 [1.3.2] - 2019-01-18 fixes standalone only compile error [1.3.1] - 2018-12-17 merges 1.0.3 into mainline branch. [1.3.0] - 2018-12-05 Adds arm model support for 3dof controllers. [1.2.1] - 2018-10-25 Makes the input settings menu pop up when you click the menu item [1.2.0] - 2018-10-15 Adds the XR Binding Input Asset Seeder and associated documentation and tests [1.1.0] - 2018-10-11 Moved some classes internal for cleaner docs. [1.0.3] - 2018-11-09 fixes enums erroneously removed [1.0.2] - 2018-10-25 fix for inconsistent line endings in trackedposedriver.cs [1.0.1] - 2018-10-10 ported API documentation from the engine [1.0.0] - 2018-10-09 release prep [0.0.4] - 2018-10-09 ci fixes [0.0.3] - 2018-10-08 fix for changelog values. [0.0.2] - 2018-10-08 updated to latest upm package template [0.0.1] - 2018-10-08 This is the first release of Unity Package XR Tools Initial move from XR Tools to Legacy Input Helper package"
  },
  "Library/PackageCache/com.unity.xr.legacyinputhelpers@2.1.10/Documentation~/ArmModels.html": {
    "href": "Library/PackageCache/com.unity.xr.legacyinputhelpers@2.1.10/Documentation~/ArmModels.html",
    "title": "Arm Models | Cacher Game",
    "summary": "Arm Models The com.unity.xr.legacyinputhelpers package contains three arm models. These are: Base Arm Model Swing Arm Model Transition Arm Model These arm models are based on the arm models from the Google daydream package. The original code can be found here. Using the Arm Models The arm model pose providers are intended to be used as a pose provider plugin to a tracked pose driver. Pose provider plugins are used to allow custom logic to be performed while still gaining the update and transform application utility of the tracked pose driver. For the arm models,we read rotation and acceleration data from the controller pose node, the Head position from the Head node, and calculate a position in session space based on a mathematical arm model. The following image shows how to use the arm model pose provider with a tracked pose driver: The above image shows that the arm model monobehaviour has been linked to the use pose provider field of the tracked pose driver The following section outlines the parameters that are found on the inspector of the arm model. Base Arm Model This section outlines how to configure and use the Base Arm Model The base arm model can be used for most situations that require pointing or throwing. The image below shows the base arm model component: The following table details the Arm Model inspector controls: Control Name Description Input Pose Source The Input pose source defines which XR Node will be used as controller tracking input source. The pose data, and gyro/angular acceleration data for this XR Node will be used to drive the arm model calculations. Head Position Source The head position source defines which XR Node will be used to drive the Head Position when calculating the arm model. Arm Extension Offset Offset applied to the elbow position as the controller is rotated upwards. Elbow Bend Ratio The ratio of the controllers rotation ato apply to the rotation of the elbow. The remaining rotation is applied to the wrist's rotation. Lock To Neck The Lock To Neck checkbox controls whether the Head Position Source is used to determined the model's neck position, or if the neck position is assumed to be Vector3's zero. Rest Position The rest position settings specify the joint positions of each part of the mathematical model of the arm relative to the head position, before the arm model is applied. The positions defined here are multiplied by -1 or 1 depending on if they are used as the left, or right arm. The positions are therefore relative to the center of the head. The table below details the Rest Position controls: Control Name Description Elbow Rest Position Position of the elbow joint relative to the head before the arm model is applied. Wrist Rest Position Position of the wrist joint relative to the head before the arm model is applied. Controller Rest Position Position of the controller joint relative to the head before the arm model is applied. Swing Arm Model The swing arm model has the same base settings as the Base Arm Model but also contains some additional extra parameters to deal with swinging motion. The swing arm model is intended to be used as a pose provider to a tracked pose driver in the same way as the base arm model. In the swing arm model, there is a second set of rotation ratio parameters that are applied when the controller is pointing towards the player (ie: backwards). the image below shows the swing arm model component: Control Name Description Joint Shift Angle The joint shift angle property specifies the min/max angle where the model will lerp from using the normal rotation ratio for the joint to the shifted rotation ratio.Below the min vale, the normal rotation ratio setting will be used, above the max value, the shifted rotation ratio will be used. The Shifted rotation ratio is intended to be used when the controller is facing backwards to the normal orientation, or towards the user. Joint Shift Exponent Exponent applied to the blend between the rotation ratio, and the shited rotation ratio. Rotation Ratio The rotation ratio section of the swing arm model allows the user to configure how much of the controller rotation is applied to different joints in the simulation. Shifted Rotation Ratio The shifted rotation ratio section of the swing arm model allows the user to configure how much of the controller rotation is applied to different joints in the simulation when the controller is backwards, or facing the user. The table blelow further explains the rotation ratio Inspector Controls: Control Name Description Shoulder Rotation Ratio Portion of the controller rotation applied to the shoulder joint. Elbow Rotation Ratio Portion of the controller rotation applied to the elbow joint. Wrist Rotation Ratio Portion of the controller rotation applied to the wrist joint. The table blelow further explains the shifted rotation ratio Inspector Controls: Control Name Description Shifted Shoulder Rotation Ratio Portion of the controller rotation applied to the shoulder joint when the controller is backwards. Shifted Elbow Rotation Ratio Portion of the controller rotation applied to the elbow joint when the controller is backwards. Shifted Wrist Rotation Ratio Portion of the controller rotation applied to the wrist joint when the controller is backwards. Transition Arm Model The transition arm model is used to transition between arm models at runtime. Changing the arm model at runtime will cause the newly requested arm model to be transitioned in using the angular acceleration of the transition Pose Source to control the blend rate. The image below shows the transition arm model component. Current Arm Model Component This field contains the current active arm model that will be used as the input to the tracked pose driver which is using the Transition arm model. The current arm model field is used during edit mode to indicate which arm model will be applied when entering play mode. Setting the current arm model field when in play mode will directly set the current arm model being applied, but will not override any arm model transitioning that is currently occuring. Transitions The Transitions field is a list of key/arm model pairs. The Queue function allows the passing of an arm model, or a string. If the string matches any of the transitions listed in the Transitions list, that arm model will begin transitioning in. Key A string key which will be used to identify the arm model to transition to. Arm Model The arm model that will be transitioned into if the transition arm model is queued using a string Key value. Using the Transition Arm Model The transition Arm Model, like the other arm models, is intended to be used as a pose provider plugin attached to a tracked pose driver. The transition arm model is intended to allow the user to transition between two, or more, arm models. When the application wishes to begin transitioning, the arm model that the application wishes to transition to is set via the Queue function. The transition arm model will then transition from the currently selected arm mode, to the arm model that has been queued. The transitioning between arm models is driven by the angular velocity of the transition pose source XR node. The more angular velocity expressed by this controller, the faster the transition arm model will transition towards to the queued arm model. For Example: Application starts with the current arm model field referencing a simple pointing arm model The user interacts with a ball, and the application scripts requests that the Transition Arm Model queue a swing arm model to allow the user to throw the ball. The user then throws the ball, as the ball is released, the application scripts request that the transtional arm model queue the original starting pointing arm model. The following image shows how the transition arm model would be configured to work with a number of arm models, and our example script found below: Here, the tracked pose driver is set to be driven by the transition arm model on this game object. The transition arm model has been configured to have a \"Current\" arm model that will be applied at startup. This is the same as the pointer arm model configured in the Transitions. The transitions section has two elements configured. One being the Swing Arm Model for swinging behaviours, and the other is the Pointing Arm model used for simple pointing. Our example monobehaviour has a reference to the transition arm model that it will control, as well as the names of the Arm Models that it will transition between. The code below shows the implementation of the example transition arm model monobehaviour public class ExampleTransitionArmModel : MonoBehaviour { [SerializeField] public UnityEngine.XR.LegacyInputHelpers.TransitionArmModel transitionArmModel; [SerializeField] public string swingArmModelName = \"SwingArmModel\"; [SerializeField] public string pointerArmModelName = \"PointerArmModel\"; float timeToNextButtonPress = 0.0f; int currentArmModel = 0; // Update is called once per frame void Update() { // this uses the Right Trigger on the controller. to seed the input asset with this action, please // consult the XR Input Seeding documentation if (timeToNextButtonPress <= 0.0f && Input.GetButton(\"XRI_Right_TriggerButton\")) { if(currentArmModel == 0) { transitionArmModel.Queue(swingArmModelName); } else { transitionArmModel.Queue(pointerArmModelName); } // flip which arm we're using currentArmModel = currentArmModel == 0 ? 1 : 0; timeToNextButtonPress = 1.0f; // wait a second before allowing another arm model to be queued } else { timeToNextButtonPress -= Time.deltaTime; } } }"
  },
  "Library/PackageCache/com.unity.xr.legacyinputhelpers@2.1.10/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.xr.legacyinputhelpers@2.1.10/Documentation~/TableOfContents.html",
    "title": "| Cacher Game",
    "summary": "Legacy Input Helpers Arm Models"
  },
  "Library/PackageCache/com.unity.xr.legacyinputhelpers@2.1.10/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.xr.legacyinputhelpers@2.1.10/Documentation~/index.html",
    "title": "About com.unity.xr.legacyinputhelpers | Cacher Game",
    "summary": "About com.unity.xr.legacyinputhelpers The com.unity.xr.legacyinputhelpers package contains a number of useful helpers for building XR Projects. These include the Tracked Pose Driver and the Input Asset XR Bindings Seed Utility. This document also contains sections on how to use, or migrate your project to, the XR Plugin Framework. Requirements This version of the XR Legacy Input Helpers package is compatible with the following versions of the Unity Editor: 2019.4 and later Installing com.unity.xr.legacyinputhelpers To install this package, follow the instructions in the Package Manager documentation. Using com.unity.xr.legacyinputhelpers The com.unity.xr.legacyinputhelpers package contains the following helpers for building XR Projects: Tracked Pose Driver XR Input Binding Seeder Arm Models Camera Offset XR Rig Explanation To use, or migrate your project to, the new XR Plugin Framework, see the Migrating to the XR Plugin Framework / XR Management section on this page. Tracked Pose Driver Use the Tracked Pose Driver component to update a GameObject’s transform to match that of a tracked device. A tracked device is any input device that can generate a Pose (such as a VR HMD, an AR device, or an MR tracked controller). The following section details the different settings and options available to the Tracked Pose Driver. Settings Device and Pose Source fields The Tracked Pose Driver updates a target transform using a pose source. The final pose source is identified using the Device and Pose Source fields. The Device field indicates which type of device the pose source will be obtained from. This field has the following options: Option Description Generic XR Device Represents VR HMDs and AR device poses. Generic XR Controller Represents VR controllers. Generic XR Remote Represents mobile-based remote devices. The following image shows the options above in the actual Tracked Pose Driver component. Once you set the Device field, Unity updates the Pose Source field with the available sources for that device. The table below lists all the possible sources. Device Source Description Usage Generic XR device Left Eye The pose of the left eye of the device. VR HMDs Right Eye The pose of the right eye of the device. VR HMDs Center Eye - HMD Reference The pose of the center eye of the device. VR HMDs Head The pose of the head of the device, if available. For most devices, the Head pose will be the same as the Center Eye. VR HMDs Color Camera The pose of the color camera on the device, if available. The color camera is intended for use with AR devices that support camera-based spatial mapping. AR devices Generic XR Controller Left Controller The left controller device pose, if available. This is intended to be used with 6 degrees of freedom style controllers commonly used with VR and MR devices. 6 and 3 degrees of freedom VR tracked controllers Right Controller The right controller device pose, if available. Zero if unavailable. This is intended to be used with 6 degrees of freedom style controllers commonly used with VR and MR devices. 6 and 3 degrees of freedom VR tracked controllers Generic XR remote Device Pose This pose is intended to be used with 3 degrees of freedom style controllers commonly used with mobile VR devices (for example, the Google Daydream Controller). Mobile 3 degrees of freedom tracked controllers If a requested source pose is not valid, Unity provides a position vector that consists of zeros and an identity quaternion. The following image shows the possible values for the Pose Source field when the Device is set to Generic XR Device. For camera or HMD tracking, use the Center Eye - HMD Reference value. For ease of use, this is the default setting of the Tracked Pose Driver. Tracking Type field Use the Tracking Type field to control how the tracked pose is applied to the target transform. This field has the following options: Option Description Position Only The Position part of the source pose will be applied to the target transform. Rotation Only The Rotation part of the source pose will be applied to the target transform. Both Position and Rotation The entire source pose will be applied to the target transform. This is the default setting. The screenshot below shows all of these options. Update Type field Use the Update Type field to control when the Tracked Pose Driver applies updates from the tracked pose source. You can select one of the following options: Update And Before Render Update Before Render The default and recommended option is Update And Before Render, especially in situations where a Tracked Pose Driver is driving a camera pose. To ensure user comfort and minimize latency, it is critically important to have the position of the camera updated as close to rendering as possible. The following table outlines when, during the frame, the Target Pose will be updated: Option Fixed Update Update Before Render Before Render Only No No Yes Update Only Yes Yes No Both Update and Before Render Yes Yes Yes The Update option causes the transform to be set in both Fixed Update (if happening that frame) and the start of the normal Update frame. This ensures that the target transform is in the correct location before executing any scripts during those phases. The screenshot below shows the options available for the Update Type field. Use Relative Transform option Note: This option will be deprecated in the future, please do not use. The Use Relative Transform option allows you to control how the pose source is applied to the target transform. For instructions on how to migrate your project to use the recommended XR Rig please see the Migrating to the XR Plugin Framework section in this document. If the Use Relative Transform option is: Enabled, the Tracked Pose Driver caches the original position of the transform internally. Unity then uses this position to offset any source pose values so they are correct in relation to the starting location of the object being controlled. Disabled, the Tracked Pose Driver will apply the source pose value directly to the target transform. This is useful when the target transform is part of a greater transform hierarchy. The screenshot below shows the Use Relative Transform option. This option was added to provide compatibility with the implicit camera control for VR cameras within Unity. Unity will deprecate this option, along with Reference Transform for implicit cameras, in a future release. Follow the best practices for Object Hierarchies to correctly reflect tracked objects in the appropriate space. Additional information The Tracked Pose Driver can only track one pose at a time. If the device and pose combination are not valid, the resulting transform will be zero position and identity rotation. You can change the tracked node at runtime via script. Special case behaviour when attached to cameras When attached to a camera, the implicit VR Device control of the camera transform is disabled, and the value generated by the Tracked Pose Driver is used instead. For information on how to configure the Tracked Pose Driver to track cameras, see the Device & Pose Source section of the document. Seeding XR input bindings Use the Seed XR Input Bindings tool to populate the Input Asset with a set of cross-platform bindings intended for use with XR Devices. To open the tool, after you load the Legacy Input Helpers package in your Project, go to Assets > Seed XR Bindings from Unity's main menu. Clicking this menu option seeds the Input Manager with the Unity Cross-Platform Input bindings. The XR Input Bindings will not replace any bindings which are already present in the Input Manager with the same name. Migrating to the XR Plugin Framework With the legacy built-in VR Device, Unity took control over any camera which was labeled with Main Camera and applied HMD tracking data to it. This is known as implicit camera tracking within Unity. While it was useful for simple HMD-only experiences, it proved confusing when users began to add controllers and other interactions. This was because implicit camera tracking functionality would cache the starting Local Position of the transform of the Main Camera, and would then apply tracking data on top of this transform. This transform was hidden from the user, and made handling of controllers and other complex scenarios difficult. With the move to the XR Plugin Framework, Unity no longer provides implicit camera tracking. Instead, you can use the Tracked Pose Driver component as an-out-of-the-box solution to apply tracking information from various input sources to GameObject transforms within your Scene. To migrate to the XR Plugin Framework, follow the migration steps outlined below. They cover two different scenarios: whether you're starting from a new Project or Scene, or migrating an existing one: Starting from a new Scene Starting from an existing Scene If you're already using the Tracked Pose Driver on your Main Camera or have your own tracking functionality, your current Scene is already configured correctly and you don't need to do anything else. Starting from a new Scene Follow the steps below if you're starting from a new Scene, or a scene that satisfies both of these conditions: There is only one camera in the Scene, and that camera is tagged as the Main Camera The camera in the Scene is at the root of the hierarchy From Unity's main menu, go to GameObject > XR > Add XR Rig. This attempts to transform your new Scene into one that correctly supports the XR Plugin Framework. For example, the following image shows a new Scene that can be converted using the Add AR Rig option: After you click the Add AR Rig option, this is the result: If there are no errors in the console log, you should now be able to press Play in your Scene to have the camera track against the device you have configured in the XR Plugin Management package. For more information on how to configure your Project for XR with XR Plugin Management, see documentation on the XR Plugin Framework. If your Scene can't be migrated correctly, the Unity console will display an error. If this happens, follow the instructions in the the Starting from an existing Scene section below. Starting from an existing Scene Migrating from an existing Scene has additional steps compared to migrating an empty Scene. As a result, there are different options depending on how your scene is configured. The overall goal is to have the Scene track in exactly the same way as it did before migrating to the XR Plugin Framework. Identify your Scene type Find the camera in your Scene which is tagged as the Main Camera. Unity uses this camera to render to the HMD or other main device. If the Main Camera GameObject is at the root of your Unity Hierarchy, follow the steps for Migrating a simple Scene. If the Main Camera GameObject is not at the root of your Unity Hierarchy, follow the steps for Migrating a complex Scene. Camera Offset The Camera Offset component is a Monobehaviour that the XR Rig uses to perform two tasks: Select which type of origin tracking the application wants to use At runtime, if the HMD is operating using a Device Tracking Origin, the Camera Offset component will apply a Y axis uplift to the specified component. This uplift simulates the height of the user. The camera needs to be uplifted in Device Tracking Origin modes because the tracking data returned by the HMD or device does not contain the height of the user, nor the height of the device from the ground. If the Requested Tracking Mode is set to Floor, the tracking data implicitly contains the height of the device from the floor, so you don't need to apply any additional uplift. It's important to apply this uplift between the XR Rig and any tracked camera or device, as this allows Unity to move the XR Rig as a unit without needing to account for any uplift when teleporting or locomoting. This also ensures that any other tracked devices which are reported in the same tracking space appear correctly in your Scene. This component is a simplified version of the XR Rig Component found in the XR Interaction Toolkit package. It is applied automatically when you: Click the Add XR Rig menu option. Create an instance of the XR Rig prefab. The following image shows the options for the Camera Offset component. Option Description Camera Floor Offset Object The GameObject, or transform, that will be shifted upwards in the Y axis in local space if the HMD is operating in Device Tracking Origin mode. Requested Tracking Mode The Requested Tracking Mode setting Use this option to request that the HMD (or other device) you're using operate in a specific mode. The options are: - Default: Lets the HMD or device pick the Tracking Origin mode it runs in. Different devices have different defaults or user selections. The Camera Offset component will apply a camera offset if necessary. - Device: Requests that the HMD or device use a Device Tracking Origin mode. If the HMD or device supports this, the GameObject or transform specified in the Camera Floor Offset Object field will be moved upwards in Y local space by the amount specified in the Camera Y Offset field. Floor Requests that the HMD or device use a Floor Tracking Origin. If the HMD or device supports this, no uplift will be applied to the Camera Floor Offset Object, because the tracking data returned by the device will implicitly contain the user's height. Camera Y Offset Specifies how far in the local Y axis the Camera Floor Offset Object will be moved, in meters. Migrating a simple Scene 1. Create an instance of the XR Rig prefab. Migrating a camera that was previously at the root of the Scene Hierarchy allows you to swap the existing camera to an XR Rig by instancing the XR Rig prefab that this package contains. You can find this prefab in the Packages/XR Legacy Input Helpers/Prefabs folder: Drag this prefab into your scene hierarchy to create a new instance of the prefab. 2. Move the XR Rig to match the location of the camera. Now that you have an instance of the XR Rig prefab, you need to configure the XR Rig GameObject so that the resulting camera positions will be correct when your application starts. Change the position and rotation of the XR Rig GameObject so that it matches the position of the current Main Camera. If you're applying a scale transformation to the Main Camera, make sure that you also apply this scale to the XR Rig GameObject. If you are going to scale the XR Rig, it's highly recommended to use a uniform scale across all three axes. 3. Replicate the position change, if necessary. If the Main Camera in your non-migrated SCene is above the floor (its Y component is > 0.0f), you need to replicate this position change. You can do this in a few different ways, depending on what the original position the change was intended to replicate. 3.1 - Uplift to simulate the height of the user If the previous Main Camera was raised above the floor to simulate the height of the user and the application is using a Device Tracking Origin (sometimes called \"Stationary\" Tracking Mode) then this additional uplift will be performed by the Camera Offset component. If this is not the case, see the next section. To configure the camera to have a vertical uplift when the application is being used in a Device Tracking Origin mode, set the following options on the Camera Offset component on the XR Rig GameObject. Option Value Requested Tracking Mode Device Camera Y Offset Set this option to the height at which the existing Main Camera was raised to simulate the user height. After you configure these options, change the XR Rig GameObject's Y Position to be what you would consider as the \"floor\" in your application (usually 0.0f). The Camera Offset component will add any additional uplift as needed. 3.2 - Uplift indicates camera position If your non-migrated Scene uses Floor Tracking Origin (historically referred to as \"Room Scale\" Tracking Mode), and the position of the Main Camera represents the user's starting point without including their height (that is, the camera is effectively on the logical \"floor\"), follow these steps to migrate your Scene correctly: Move the XR Rig to match the Main Camera's current position and rotation in Unity world space. If the application is using a Floor Tracking Origin, set the Requested Tracking Mode on the Camera Offset component to Floor. This ensures that the camera has the correct vertical offset. If the application isn't using a Floor Tracking Origin, set the Requested Tracking Mode on the Camera Offset component to Default. This applies the correct behavior regardless of the device tracking mode the application starts with. If you were previously using a different component to move the camera vertically and handle the difference between Device and Floor tracking origins, you might need to disable or modify this component so that the camera will not be incorrectly moved multiple times by different components. 4. Replace the XR Rig Main Camera with your Main Camera Now that the Camera Offset is correctly configured, you need to swap the XR Rig's Main Camera with your current Main Camera GameObject. If your current Main Camera: Doesn't have a Tracked Pose Driver component (or any other way of tracking the HMD) then you should copy the Tracked Pose Driver from XR Rig's Main Camera GameObject. Has a Tracked Pose Driver, make sure that the settings exactly match those for the XR Rig's Main Camera. Next, delete the Main Camera GameObject from the XR Rig instance, and parent your existing Main Camera GameObject to the Camera Offset GameObject. Make sure that the position and rotation of your Main Camera GameObject are both 0,0,0. Instead of changing the camera's position, always change the position of the XR Rig GameObject instead. Also, make sure that any GameObject, or Component links on any of the Components attached to your Main Camera, are still correct. 5. Configure XR Management See documentation on the XR Plugin Framework for details. 6. Press Play! Now that your Scene has been successfully migrated, press Play and make sure that the camera's starting location is the same as it was before migrating to the XR Plugin Framework. If it's not, see the Troubleshooting section below. Migrating a complex Scene If your current Scene is using the implicit camera tracking from the legacy VR system, and the Main Camera is part of GameObject hierarchy, follow these steps to migrate ]your legacy VR tracking system to the XR Plugin Framework. The Implicit camera update would update the local transform of the Main Camera GameObject twice each frame, which made the Main Camera GameObject moved relative to the position, scale and rotation of the hierarchy that it existed under. In this scenario, you have two options to migrate your Scene: Leave the existing hierarchy in place and add components to enable tracking in the current hierarchy Migrate the existing hierarchy to use the XR Rig structure. It's generally recommended to leave the existing hierarchy in place if your Scene has any functionality that relies on this hierarchy structure. If you have a relatively simple configuration, then you can migrate directly to the XR Rig. Leave in place This method involves the least amount of modifications to the existing Scene hierarchy to enable tracking within Unity, and involves adding a Tracked Pose Driver to the Main Camera in your Scene. This ensures that any other functionality that requires your current GameObject hierarchy continues to function as before. 1. Locate your Main Camera and add a Tracked Pose Driver to it Locate the Main Camera in the Scene. Add a Tracked Pose Driver, using the exact same settings that the XR Rig's Main Camera uses. The screenshot below shows a reference for these settings: Do this for all the Main Cameras in your Scene. If you need to track other devices within your Scene, see the Tracked Pose Driver settings for the correct options for your use case. 2. Configure XR Management See documentation on the XR Plugin Framework for details. 3. Press Play! Now that your Scene has been successfully migrated, press Play and make sure that the camera's starting location is the same as it was before migrating to the XR Plugin Framework. If it's not, see the Troubleshooting section below. Migrate to XR Rig Because there are an infinite number of possible hierarchies in use, Unity can't provide specific steps to migrate your current Scene hierarchy to use the XR Rig. Instead, the following section describes what the XR Rig is intended to represent, which will allow you to map your existing hierarchy to the concepts within the XR Rig. To configure your scene to use XR Management, see documentation on the XR Plugin Framework. If there are still issues, see the Troubleshooting section. XR Rig explanation The XR Rig GameObject represents the transform from tracking space to Unity worlds pace. GameObjects parented to the XR Rig effectively live in the tracking space. All devices that produce tracking data (HMDs, controllers, phones, etc.) report data relative to the same origin in the same tracking space. Camera offset is used to raise the entire tracking space when the tracking space is in Device Tracking Origin mode. This mode tracks the origin of the tracking space as a historical position of the tracked device, and is typically found in mobile AR, integrated VR, stationary VR, and wearable AR devices. It does not account for user height, which is why you need to lift the tracking volume to simulate user height. The Floor Tracking Origin mode tracks the origin of teh tracking space as the logical \"floor\" of the playspace. The tracking data provided in this mode implicitly contains the height of the device off the \"floor\". In this mode, you don't need to lift the tracking volume to have the camera placed correctly. All tracked devices (head, hands, cameras, trackers, etc.) reported by the same device should be children of the Camera Offset game object of the same XR Rig. This lets you move the user, or all tracked devices that represent the user, by translating or rotating the XR Rig GameObject. The actual location of objects within tracking space is unlikely to be at the origin of the tracking space. Teleporting the user requires some calculations to correctly orient the XR Rig in Unity world space so that the resulting HMD or camera position in Unity world space matches the intended result. The XR Interaction Toolkit package provides functionality which performs these calculations for you. If your Scene requires scale, it should only be applied to the XR Rig GameObject, only uniformly across all axes. All GameObjects that represent tracked devices must have some mechanism for updating their transform with their applicable device position and rotation. The Tracked Pose Driver covers this update. For HMDs, as a best practice, use the default settings. Note: When working within a hierarchy where a GameObject (for example, XR Rig) provides the transform from tracking space to world space, you must disable the Use Relative Transform option for the transform to work properly. The starting position of all tracked child objects of the XR Rig should be 0,0,0 position and 0,0,0 rotation, because the Tracked Pose Driver (or other tracking mechanism) will set the position of these objects. Troubleshooting Problem Possible resolution Camera is too high in the scene Is the Camera Offset Component's Requested Tracking Mode set correctly? Is the Camera Y Offset set too high? Document Revision History Date Reason February 21, 2018 Initial edit. September 13, 2018 Update to final release version, changed name to final October 8, 2018 Renamed to legacyinputhelpers October 15, 2018 Added section for seeding XR Input Bindings July 19, 2018 Added section for using this package with XR Management March 3, 2020 Added migration section + Camera Offset Section March 12, 2020 Technical writer review May 4, 2021 Updated Requirements section for compatible Unity Editor versions"
  },
  "Library/PackageCache/com.unity.xr.legacyinputhelpers@2.1.10/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.xr.legacyinputhelpers@2.1.10/LICENSE.html",
    "title": "| Cacher Game",
    "summary": "com.unity.xr.legacyinputhelpers copyright © 2019 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.xr.legacyinputhelpers@2.1.10/README.html": {
    "href": "Library/PackageCache/com.unity.xr.legacyinputhelpers@2.1.10/README.html",
    "title": "Legacy Input Helpers Package | Cacher Game",
    "summary": "Legacy Input Helpers Package This package is the new home of the Tracked Pose Driver monobehaviour. The Tracked Pose Driver is intended to make it easy to make Game Objects track input device data."
  },
  "Library/PackageCache/com.unity.xr.legacyinputhelpers@2.1.10/Third Party Notices.html": {
    "href": "Library/PackageCache/com.unity.xr.legacyinputhelpers@2.1.10/Third Party Notices.html",
    "title": "| Cacher Game",
    "summary": "This package contains third-party software components governed by the license(s) indicated below: Component Name: ArmModel.cs, SwingArmModel.cs, TransitionArmModel.cs License Type: \"Apache 2.0\" // Copyright 2016 Google Inc. All rights reserved. // // Licensed under the Apache License, Version 2.0 (the \"License\"); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \"AS IS\" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License."
  },
  "Library/PackageCache/com.unity.xr.management@4.4.0/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.xr.management@4.4.0/CHANGELOG.html",
    "title": "Changelog | Cacher Game",
    "summary": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. [4.4.0] - 2023-03-30 Added Created AndroidManifestProcessor as an Android manifest management system for XR packages and providers that target platforms based on Android. Removed AndroidManifest.xml is no longer deleted after each Android build. [4.3.3] - 2023-02-14 Fixed Settings and Loader names with numbers will now keep the numbers for the generated asset names. [4.3.2] - 2023-02-06 Fixed Incompatibility with com.unity.testframework.graphics [4.3.1] - 2022-10-14 Fixed Clean up AndroidManifest.xml every XR build to prevent conflicts with other configurations. Remove a spurious error when no XR providers were selected Changes Removed dependency on com.unity.subsystemregistration package for supported editors (2022.2+) [4.2.2] - 2022-04-08 Fixed Related Bug: FB 1378643. Fixed an issue where packages that contained XRGeneralSettingsPerBuildTarget assets could potentially fail to reimport. Fixed an issue where m_RegisteredLoaders list would not get populated on Awake at runtime in a built player. Changes Updated documentation with new sections Manual Lifecycle Handling, Initializing a Specific Loader, Changing the Loader List, and add examples for the new documentation sections. [4.2.1] - 2021-12-09 Fixed Resolve FB 1378643 by enforcing creation of XRGeneralSettingsPerBuildTarget using a new API XRGeneralSettingsPerBuildTarget.GetOrCreate() [4.2.0] - 2021-10-05 Added Resolve FB 1369638 by adding five new APIs to XRGeneralSettingsPerBuildTarget for scripting settings checking and creation : HasSettingsForBuildTarget CreateDefaultSettingsForBuildTarget HasManagerSettingsForBuildTarget CreateDefaultManagerSettingsForBuildTarget ManagerSettingsForBuildTarget Changes Resolve FB 1346567 by updating docs around initialization timing, especially around manual initialization. Ensure cached package setting editors are destroyed when the management window is closed. Fixes Fix 1348587 and 1357482 by changing the package initialization to be loaded ondemand instead of loading on static initialization. [4.1.0] - 2021-08-04 Changes Messaging and removing the Lumin platform in 2021.1+. Support is still maintained for Unity 2020 LTS and 2019 LTS. Fixes Fix 1343655 by adding an API for getting all package metadata so that users can use the correct information when dealing with package metadata store. [4.1.0-pre.2] - 2021-07-26 Fixes More public API changes for 1343655. [4.1.0-pre.1] - 2021-07-09 Fixes Fix 1343655 by adding an API for getting all package metadata so that users can use the correct information when dealing with package metadata store. [4.0.7] - 2021-07-01 Fixed an issue where object from deleted asset got reused, when upgrading setting asset Fixed an issue where the ProjectSettings folder may not have been created prior to Initialization of settings. [4.1.0-exp.1] - 2021-06-29 Updates Initial test release to Candidates [4.0.6] - 2021-05-18 Fixes Fix issue where XR was not being started when entering play mode if the settings UI was never displayed. Fixed an issue where custom XR packages would not get registered when running the Unity Editor using the -batchmode argument. Added Added additional documentation explaining that manual XR Initialization should only be called from Start or later as calling it from Awake or OnEnable can cause issues if graphics initialization hasn't finished yet. [4.0.5] - 2021-05-06 Fixes Fix issue with changelog. [4.0.4] - 2021-05-04 Fixes Fix issue with analytics on some platforms. [4.0.3] - 2021-04-22 Fixes Minor fix to deprecation messaging for Windows Mixed Reality. [4.0.2] - 2021-04-16 Fixes When using XRLoaderHelper, Subsystems are now correctly removed from the cached subsystems map once they are destroyed. Fixed an issue where a NullReferenceException could be thrown if a Package Manager query failed but returned completed when updating known packages. Fixed an issue where Plug-in Provider user interface documentation link redirected to an old version of the documentation. Fixed an issue where TryAddLoader could ignore the safety checks when modifying the registered loaders in the editor during playmode. Fixed an issue where TryRemoveLoader could remove a registered loader even if the loader is still in the list of currentLoaders. Changes Add Open XR to the list of known plug-in providers when on Unity version 2020.3 and above. Added additional safety checks to the behaviour of TryAddLoader and TryRemoveLoader in the editor. Both now user EditorApplication.isPlaying instead of Application.IsPlaying when determining whether the editor is in play mode. [4.0.1] - 2021-01-22 Changed activeLoaders to instead of returning a shallow copy, it will now just return a read only list to prevent additional garbage collection. Changed the behavior of TryRemoveLoader to return true if the loader is no longer present in the list even if it wasn't present to begin with. [4.0.0] - 2021-01-21 Added API for surfacing package information notification icons in the XR Plug-in Management editor window. Fix issue that enabled users to ask for loaders to be assigned/removed during Play mode. Update dependency on com.unity.xr.legacyinputhelpers to version 2.1.7. Fix issue where the internal list of loaders could modified at runtime in an invalid way. Now, the list of loaders returns a shallow copy of the list at runtime and any modifications using the new TryAddLoader, TryRemoveLoader, and TrySetLoaders methods will be validated to ensure the incoming modifications are legal modifications for the internal loader list before applying them. Fix issue where XRGeneralSettings would be included in a build when it held no loaders. Fix issue involving attempts to modify the loader list while in play mode. That should no longer be actionable and should report an error on attempt. [4.0.0-pre.3] - 2020-12-17 Fix documentation validation issues. [4.0.0-pre.2] - 2020-12-11 Update Legacy Input Helpers dependency. [4.0.0-pre.1] - 2020-12-10 Package pre-release for OpenXR. [4.0.0-exp.2] - 2020-12-07 OpenXR specific UI prototype work [3.2.17] - 2020-11-03 Change how startup settings are written on build. Fix issue with domain reload during play that caused a crash on next play. Immediately persist created assets when initializing packages. CI changes to expand testing. [3.2.16] - 2020-09-23 Fix issue that was causing the UI to gray out with the \"Querying Package Manager for currently installed packages...\" message. Add documentation to clarify the differences and requirements around plug-in packages and Unity packages. Clarify some issues around loader and initialization. [3.2.15] - 2020-09-03 Fix issue with file being included in built package that shouldn't be there. [3.2.14] - 2020-08-31 Document link underlining is correct. Fix an issue where, after Play In Editor completed, settings were reset to default. Clear subsystem instance map on de-initialize so that stale instances aren't being retrieved on restarts. Fix and issue where invalid package IDs were not being handled when attempting package installs. [3.2.13] - 2020-07-01 Package installation is only for verified packages now. Removed progress dialogs and reduced the number of blocking API calls required over lifetime. Fix stacking calls to Client.List that was causing incorrect error reporting about API timeout. Auto create settings for plug in packages if missing. [3.2.12] - 2020-06-05 Fix testing definitions to allows us to remove tests as separate packages. [3.2.11] - 2020-06-04 Documentation updates for clarity and correctness. Block use of deprecated APIs on 2020.2 and later. [3.2.11-preview.1] - 2020-05-15 Fix FB 1242581 : Fix a number of issue around cache rebuilding and persistent UI display of cache rebuilding even though nothing was happening. Fix FB 1245181 : Fix null deref access of settings manager instance. [3.2.10] - 2020-04-24 Release 3.2.10 [3.2.10-preview.1] - 2020-04-20 Fix Unity Frame Debugger by not stopping loaders on Pause / Stop. Don't stop loaders when XRGeneralSettings is disabled. Fix UI issue where third party providers would sometimes disappear from the provider selection UI. [3.2.9] - 2020-04-18 Fix Linux tests in CI. [3.2.8] - 2020-04-17 Fix double click to un-toggle Magic Leap bug. Fix name of Magic Leap Zero Iteration entry for standalone. [3.2.7] - 2020-04-14 Fix issue where the wrong time value was being used to test for a timeout. [3.2.6] - 2020-04-07 Add log message to clarify the error when dealing with the un-bundled AR packages. [3.2.5] - 2020-04-07 Fixes LIH version Fixes linked LIH documentation version [3.2.4] - 2020-04-02 Add documentation related to re-ordering loaders. [3.2.3] - 2020-03-27 Pick up updated Legacy Input Handlers. [3.2.2] - 2020-03-26 Re-enable Mac automation testing Add force removal of legacy LIH package to deal with package management resolution issue. [3.2.1] - 2020-03-23 CI issues causing an update to LIH, which mean we need to spin an update for that as well. [3.2.0] - 2020-03-13 Release of new management workflow. [3.2.0-preview.9] - 2020-03-11 Disable legacy vr if we install XR Management. This doesn't lock the UI out but it at least keeps it from being activated at the same time as XR. Stop nagging users to uninstall if not a plugin is unassigned. Instead just add text to the above the fold copy to point out users need to use Pack Man UI instead. [3.2.0-preview.8] - 2020-03-09 Cleanup of the uninstaller code. Will eventually do the same thing for the package metadata code as well. [3.2.0-preview.7] - 2020-03-06 Add utility for requesting uninstall of the currently installed built in VR packages. Add callbacks to XRLoaderHelper to allow clients to handle assignment/unassigment of their loader to a build target in the Editor. [3.2.0-preview.6] - 2020-03-04 Make documentation link color differentiate between Personal and Professional editor themes. More UI tweaks [3.2.0-preview.5] - 2020-03-01 Fix state management for queue processing. Add ability for users to remove plug-ins that are no longer actively referenced. Add documentation link to management pane in Player Settings. [3.2.0-preview.4] - 2020-02-26 Further Documentation review changes. Fix bug allowing user to enable/disable loaders at play time. Fix bug with compilation errors causing progress bar to hang around. [3.2.0-preview.3] - 2020-02-25 Modify metadata store to hold packages and not just metadatas. This allows us to call the settings instance initializer function even after initialization. Fixed some minor known package naming issues. [3.2.0-preview.2] - 2020-02-24 Add in Mock HMD package to known packages. Fix up some asynchronous issues with checking for installable packages. Change UI a little to try to differentiate installable from installed packages. Correct documentation after review. Modify sorted list to make Mock HMD last item always. Modify assignment to make sure that the order of the items is always the same order as in the UI. [3.2.0-preview.1] - 2020-02-20 Entire re-write of the UI and backing data store to provide a better user experience more inline with the previous Built In XR Settings UI. Removed the Legacy Input Helpers sub pane and replaced with a more integrated set of menu options in the Assets menu (provided by the Legacy Input Helpers package). [3.1.0] - 2020-02-07 Preparation for verification release. [3.1.0-preview.2] - 2019-12-17 Fix FB 1206103: Serialized loader list is not saved correctly when a new loader asset is created as part of the add operation. Fix package checking system to also look at installed packages and not just remotely registered packages. This allows us to see packages the user has locally installed on disk that may not be registered in the package registry. Add check to make sure we pick up any class in the project that derives from XRLoader and not just those in packages. This allows a developer to create a loader in their assets folder and use that regardless of installed packages. [3.1.0-preview.1] - 2019-12-06 Fixes an issue where subsystems could not be initialized before awake in the editor Fixes an issue where subsystems were not re-started after a pause in the editor Re-add build target filtering into management. Documentation copy review and edit. [3.1.0-preview] - 2019-09-11 Adds generic gfx capabilities method to XRLoader class [3.0.5] - 2019-12-06 Fix package validation errors. Release for verification. [3.0.5-preview.4] - 2019-12-06 Release for verification. Remove build target filtering support. Will be added back into 3.1.0. [3.0.5-preview.3] - 2019-11-22 Correct Samples code to make sure that it compiles correctly. Make some documentation fixes for inline code. Replace XR SDK text with just XR or other appropriate messaging. [3.0.5-preview.2] - 2019-11-18 New attribute was incorrectly placed into Runtime instead of Editor. Moved to Editor where it belongs. [3.0.5-preview.1] - 2019-11-13 UI rework to provide for simpler installation and management of XR Plug-in Providers. Reworked the underlying data handling and maintenance to be more streamlines and less coupled. [3.0.4] - 2019-11-04 Release package for verification. [3.0.4-preview.3] - 2019-10-29 Update minimum compatible Editor version to 2019.3.0b9 Fixes an issue where subsystems could not be initialized before awake in the editor Fixes an issue where subsystems were not re-started after a pause in the editor Removes dialog boxes for creating Loaders and initializing settings. [3.0.4-preview.2] - 2019-10-23 Modifies wording of LIH inclusion page from \"required\" to recommended. [3.0.4-preview.1] - 2019-09-20 Public API InitializeLoaderAsync was erroneously made internal. Move back to being publicly accessible. Fix editor application perf issue due to not unhooking update callback. [3.0.3] - 2019-08-29 Fix package dependency version for subsystem registration package. [3.0.2] - 2019-08-29 Release package for verification. [3.0.2-preview.3] - 2019-08-29 Update to reflect changes in downstream subsystem definitions in 19.3+. [3.0.2-preview.2] - 2019-08-23 Change legacy input helpers version to 1.* Fix documentation validation errors. Allow 3.x to work with Unity 2019.2. This package will not work with 2019.3a1 - a11. [3.0.2-preview.1] - 2019-08-06 Remove asset menu creation entry for XR Settings as it is unsupported now. Fix an issue with downloading packages that could allow PackMan to get corrupted, forcing the user to reload Unity. [3.0.1] - 2019-07-11 Update base Unity release version after namespace changes. [3.0.0] - 2019-07-09 Update docs to add more information around correct usage. add useful names to sub objects of general settings. Add Magic Leap to curated packages list. [2.99.0-preview.2] - 2019-06-19 Pick up 2019.2 preview changes that are applicable to 2019.3. Fix up the code after Experimental namespace change. [2.99.0-preview.1] - 2019-06-14 Update package to support 2019.3+ only. [2.99.0-preview] - 2019-06-14 Update package to support 2019.3+ only. Rev version to almost 3. This is to make space for 2019.2 preview versions and in acknowledgement of the breaking changes that will happen soon. [2.0.0-preview.24] - 2019-06-14 Tie version to 2019.2 exclusively for preview. Strip document revision history. Remove third party notice as unneeded. [2.0.0-preview.23] - 2019-06-10 Add promotion pipeline yaml file to get promotion to production working again. [2.0.0-preview.22] - 2019-06-11 Revert Legacy Input Helpers dependency to newly pushed 1.3.2 production version. [2.0.0-preview.21] - 2019-06-10 Downgrade Legacy Input Helpers dependency to correct production version. [2.0.0-preview.20] - 2019-06-10 Downgrade Legacy Input Helpers dependency to help get package to production. [2.0.0-preview.19] - 2019-06-04 Fix package name and description. [2.0.0-preview.18] - 2019-06-03 Minor corrections in samples header file. Remove Windows from log message. Remove tutorial UI and unsupported data. [2.0.0-preview.17] - 2019-05-28 Fix issue where no settings object would cause an error to be logged at build time incorrectly. Add helper method to get XRGeneralSettings instance for a specific build target. [2.0.0-preview.16] - 2019-05-28 Move PR template to correct location. [2.0.0-preview.15] - 2019-05-23 Fix the readme help page to only appear once on initial add of package. Fix up test namespaces to use correct namespace naming [2.0.0-preview.14] - 2019-05-23 updating number for Yamato, adds dependency to com.unity.xr.legacyinputhelpers [2.0.0-preview.13] - 2019-05-09 Fix more output logging for Yamato. [2.0.0-preview.12] - 2019-05-09 Add support for Yamato Fix unit tests broken with streamlined workflow changes. [2.0.0-preview.10] - 2019-04-19 Add ability for users to disable auto initialize at start. This should allow for hybrid applications that want to start in non-XR mode and manually switch. Fix play mode initialization so that we can guarantee that XR has been initialized (or at least attempted initialization) by the time the Start method is called on MonoBehaviours. Documentation updated to cover the above. Fixed a bug in the new Readme script code that caused a crash in headless mode. Seems the code was launching an Editor window and causing UIElements to crash on an attempt to repaint. We have a workaround to make sure we don't load the window if in headless mode and a bug is filed with the responsible team to correct the crash. [2.0.0-preview.9] - 2019-04-10 Fix package validation console errors. [2.0.0-preview.8] - 2019-04-10 Fix package validation compilation errors. Remove .github folder from npm packaging. [2.0.0-preview.7] - 2019-04-10 Streamlining of the management system. Move XR Manager to a singleton instance on XRGeneralSettings that is populated by an XRManagerSettings instance that the user can switch in and out. NOTE: This removes the ability to use XRManagement for per scene situations. For hybrid or manual scenes the user will be responsible for instantiating/loading the XRManagerSettings instance they want and dealing with lifecycle themselves. [2.0.0-preview.6] - 2019-03-29 Fix up package repo information for rel mgmt. [2.0.0-preview.5] - 2019-02-05 Split documentation into separate audience files for End Users and Providers. Update package target Unity version to Unity 2019.1. [2.0.0-preview.4] - 2019-02-05 Fix an issue with with an NRE in the build processor. [2.0.0-preview.3] - 2019-01-22 Add missing repo url to package json file Fix NRE issue in build processor [2.0.0-preview.3] - 2019-01-22 Fix error in general build processor due to a potential null deref. Fix missing check for unity version when referencing UIElements. [2.0.0-preview.2] - 2018-12-19 Fix package validation issues. Fix bug due to preinit code that would cause a null ref exception. [2.0.0-preview.1] - 2018-12-19 Updated to support loading integrated and standalone subsystems. Add support for pre-init framework to allow for setting handling things like LUID setup pre-gfx setup. Add ability for general settings to be set per platform and not just globally. Tagged with release preview build. This should be the base on which we move to release for 2019.1 [0.2.0-preview.9] - 2018-11-27 Fixed some issues with boot time and general setting. [0.2.0-preview.8] - 2018-10-29 Fix an API breaking change to UnifiedSettings api Fix a NRE in XRGeneralSettings if the user has set an XRManager Component on a scene game object and didn't setup general settings. [0.2.0-preview.7] - 2018-10-29 Hopefully all CI issues are resolved now. [0.2.0-preview.4] - 2018-10-24 Merged in general settings support. Initial implementation allows for ability to assign an XR Manager instance for loading XR SDK at boot launch time. [0.2.0-preview.3] - 2018-10-24 Merged in Unified Settings dependent changes. [0.1.0-preview.9] - 2018-07-30 Add missing .npmignore file [0.1.0-preview.8] - 2018-07-30 Updated UI for XR Manager to allow for adding, removing and reordering loaders. No more need for CreateAssetMenu attributes on loaders. Updated code to match formatting and code standards. [0.1.0-preview.7] - 2018-07-25 Fix issue #3: Add ASMDEFs for sample code to get it to compile. No longer need to keep copy in project. Fix Issue #4: Update documentation to reflect API changes and to expand information and API documentation. Fix Issue #5: Move boilerplate loader code to a common helper base class that can be used if an implementer wants to. [0.1.0-preview.6] - 2018-07-17 Added runtime tests for XRManager Updated code to reflect name changes for XR Subsystem types. [0.1.0-preview.5] - 2018-07-17 Simplified settings for build/runtime Since we are 2018.3 and later only we can take advantage of the new PlayerSettings Preloaded Assets API. This API allows us to stash assets in PLayerSettings that are preloaded at runtime. Now, instead of figuring out where to write a file for which build target we just use the standard Unity engine and code access to get the settings we need when we need them. [0.1.0-preview.4] - 2018-07-17 Added samples and ability to load settings This change adds a full fledged sample base that shows how to work with XR Management from start to finish, across run and build. This includes serializing and de-serializing the settings. [0.1.0-preview.3] - 2018-07-17 [0.1.0-preview.2] - 2018-06-22 Update build settings management Changed XRBuildData from a class to an attribute. This allows providers to use simpler SO classes for build data and not foreach them to subclass anything. Added a SettingsProvider subclass that wraps each of these attribute tagged classes. We use the display name from the attribute to populate the path in Unified Settings. The key in the attribute is used to store a single instance of the build settings SO in EditorBuildSettings as a single point to manage the instance. Added code to auto create the first SO settings instance using a file panel since the Editor build settings container requires stored instances be backed in the Asset DB. There is no UI for creating the settings (unless added by the Provider) so this should allow us to maintain the singleton settings. Even if a user duplicates the settings instance, since it won't be in the Editor build settings container we won't honor it. [0.1.0-preview.1] - 2018-06-21 This is the first release of Unity Package XR Management."
  },
  "Library/PackageCache/com.unity.xr.management@4.4.0/Documentation~/EndUser.html": {
    "href": "Library/PackageCache/com.unity.xr.management@4.4.0/Documentation~/EndUser.html",
    "title": "End-user documentation | Cacher Game",
    "summary": "End-user documentation Installing and using XR Plug-in Management For instructions on how to install the XR Plug-in Manager, see the XR Plug-in Framework page in the Unity Manual. Automatic XR loading By default, XR Plug-in Management initializes automatically and starts your XR environment when the application loads. At runtime, this happens immediately before the first Scene loads. In Play mode, this happens immediately after the first Scene loads, but before Start is called on your GameObjects. In both scenarios, XR should be set up before calling the MonoBehaviour Start method, so you should be able to query the state of XR in the Start method of your GameObjects. If you want to start XR on a per-Scene basis (for example, to start in 2D and transition into VR), follow these steps: Access the Project Settings window (menu: Edit > Project Settings). Select the XR Plug-in Management tab on the left. Disable the Initialize on start option for each platform you support. At runtime, call the following methods on XRGeneralSettings.Instance.Manager to add/create, remove, and reorder the Loaders from your scripts: Manual initialization can not be done before Start completes as it depends on graphics initialization within Unity completing. Initialization of XR must be complete either before the Unity graphics system is setup and initialized (as in Automatic life cycle management) or must be put off till after graphics is completely initialized. The easiest way to check this is to just make sure you do not try to start XR until Start is called on your MonoBehaviour instance. Method Description InitializeLoader(Async) Sets up the XR environment to run manually. Should be called on or after Start has finished to avoid conflicts with graphics initialization sequence. StartSubsystems Starts XR and puts your application into XR mode. StopSubsystems Stops XR and takes your application out of XR mode. You can call StartSubsystems again to go back into XR mode. DeinitializeLoader Shuts down XR and removes it entirely. You must call InitializeLoader(Async) before you can run XR again. To handle pause state changes in the Editor, subscribe to the EditorApplication.pauseStateChanged API, then stop and start the subsystems according to the new pause state that the pauseStateChange delegate method returns. The following code shows an example of how to manually control XR using XR Plug-in Management: using System.Collections; using UnityEngine; using UnityEngine.XR.Management; public class ManualXRControl { public IEnumerator StartXRCoroutine() { Debug.Log(\"Initializing XR...\"); yield return XRGeneralSettings.Instance.Manager.InitializeLoader(); if (XRGeneralSettings.Instance.Manager.activeLoader == null) { Debug.LogError(\"Initializing XR Failed. Check Editor or Player log for details.\"); } else { Debug.Log(\"Starting XR...\"); XRGeneralSettings.Instance.Manager.StartSubsystems(); } } void StopXR() { Debug.Log(\"Stopping XR...\"); XRGeneralSettings.Instance.Manager.StopSubsystems(); XRGeneralSettings.Instance.Manager.DeinitializeLoader(); Debug.Log(\"XR stopped completely.\"); } } Managing XR Loader Lifecycles Manually The previous section showed how to manage the entire XR system lifecycle. If you require more granular control, you can manage an individual loader's lifecycle instead. API You can use the following methods in your script to control the lifecycle of XR manually: Method Description XRLoader.Initialize Sets up the XR environment to run manually and initializes all subsystems for the XR loader. XRLoader.Start Starts XR and requests the XR loader to start all initialized subsystems. XRLoader.Stop Stops XR and requests the XR loader to stop all initialized subsystems. You can call StartSubsystems again to go back into XR mode. XRLoader.Deinitialize Shuts down the XR loader and de-initializes all initialized subsystems. You must call XRLoader.Initialize before you can use the loader again. The following code example demonstrates how to manage individual loaders at runtime. Disclaimer The following circumvents XR Management Lifecycle control. The developer is indicating that they intend to manage the lifecycle of the loaders initialized in this manner manually. APIs that expect to use XR Plug-In Management to acquire subsystems from a loader will not function properly when manually handling loader lifecycles. If you need a specific loader initialized but want that loader to still be managed by XR Plug-In Management, look into the 'Modifying the Loader List' section on how to do that. Example using System; using System.Collections; using UnityEngine; using UnityEngine.XR.Management; public class RuntimeXRLoaderManager : MonoBehaviour { XRLoader m_SelectedXRLoader; void StartXR(int loaderIndex) { // Once a loader has been selected, prevent the RuntimeXRLoaderManager from // losing access to the selected loader if (m_SelectedXRLoader == null) { m_SelectedXRLoader = XRGeneralSettings.Instance.Manager.activeLoaders[loaderIndex]; } StartCoroutine(StartXRCoroutine()); } IEnumerator StartXRCoroutine() { Debug.Log(\"Init XR loader\"); var initSuccess = m_SelectedXRLoader.Initialize(); if (!initSuccess) { Debug.LogError(\"Error initializing selected loader.\"); } else { yield return null; Debug.Log(\"Start XR loader\"); var startSuccess = m_SelectedXRLoader.Start(); if (!startSuccess) { yield return null; Debug.LogError(\"Error starting selected loader.\"); m_SelectedXRLoader.Deinitialize(); } } } void StopXR() { Debug.Log(\"Stopping XR Loader...\"); m_SelectedXRLoader.Stop(); m_SelectedXRLoader.Deinitialize(); m_SelectedXRLoader = null; Debug.Log(\"XR Loader stopped completely.\"); } } Using XR Plug-In Management to Initialize a Specific Loader Sometimes, you may want to include multiple loaders in a build and have them fall through in a specific order. By default, XR Plug-In Management will attempt to initialize the loader in alphabetical order based on the loaders' name. If this isn't adequate you can modify the loader list in Edit Mode, Play Mode, and in a built player with some caveats. In Edit Mode, you may modify the loaders list without restriction. You may reorder or remove loaders from the loader list at runtime. A new loader that wasn't known at startup can't be added to the loader list at runtime. Any attempt to add an unknown loader to the list at runtime will fail. This means that you are able to do the following during runtime: Remove loaders from the list of loaders. Re-add loaders that were previously removed. Reorder the list of loaders. Any operation on the XR Plug-in Manager UI will reset the ordering to the original alphabetical ordering. Example: Modifying the Active Loader List at Runtime If you wish to reorder the set of loaders so XR Plug-In Management attempts to initialize a specific loader first you could do the following at runtime: var generalSettings = XRGeneralSettingsPerBuildTarget.XRGeneralSettingsForBuildTarget(BuildTarget.Standalone); var settingsManager = generalSettings.Manager; // Get a readonly reference to the current set of loaders. var readonlyCurrentLoaders = settingsManager.activeLoaders; // Modifying the loader list order var reorderedLoadersList = new List<XRLoader>(); foreach (var loader in readonlyCurrentLoaders) { #if UNITY_ANDROID if (loader is XRFooLoader) { // Insert 'Foo' Loaders at head of list reorderedLoaderList.Insert(loader, 0); } else if (loader is XRBarLoader) { // Insert 'Bar' Loaders at back of list reorderedLoaderList.Insert(loader, reorderedLoaderList.Count); } #else // !UNITY_ANDROID if (loader is XRBarLoader) { // Insert 'Bar' Loaders at head of list reorderedLoaderList.Insert(loader, 0); } else if (loader is XRFooLoader) { // Insert 'Foo' Loaders at back of list reorderedLoaderList.Insert(loader, reorderedLoaderList.Count); } #endif // end UNITY_ANDROID } // Would only fail if the new list contains a loader that was // not in the original list. if (!settingsManager.TrySetLoaders(reorderedLoadersList)) Debug.Log(\"Failed to set the reordered loader list! Refer to the documentation for additional information!\"); Example: General Modification the loader list You may also modify the loader list in other more general ways. The following shows how to use TryAdd, TryRemove, and TrySet in a variety of ways. var generalSettings = XRGeneralSettingsPerBuildTarget.XRGeneralSettingsForBuildTarget(BuildTarget.Standalone); var settingsManager = generalSettings.Manager; // Get example loaders as XRLoaders var fooLoader = new FooLoader() as XRLoader; var barLoader = new BarLoader() as XRLoader; // Adding new loaders // Append the new FooLoader if (!settingsManager.TryAddLoader(fooLoader)) Debug.Log(\"Adding new Foo Loader failed! Refer to the documentation for additional information!\"); // Insert the new BarLoader at the start of the list if (!settingsManager.TryAddLoader(barLoader, 0)) Debug.Log(\"Adding new Bar Loader failed! Refer to the documentation for additional information!\"); // Removing loaders if (!settingsManager.TryRemoveLoader(fooLoader)) Debug.Log(\"Failed to remove the fooLoader! Refer to the documentation for additional information!\"); // Modifying the loader list order var readonlyCurrentLoaders = settingsManager.activeLoaders; // Copy the returned read only list var currentLoaders = new List<XRLoader>(readonlyCurrentLoaders); // Reverse the list currentLoaders.Reverse(); if (!settingsManager.TrySetLoaders(currentLoaders)) Debug.Log(\"Failed to set the reordered loader list! Refer to the documentation for additional information!\"); You would most likely place this script in a custom pre-process build script, but that isn't required. Regardless of the script's location, you should do this as a setup step before you start a build as XR Plug-in Manager will serialize this list as part of the build execution. Customizing build and runtime settings Any package that needs build or runtime settings should provide a settings data type for use. This data type appears in the Project Settings window, underneath a top level XR node. You can use scripts to configure the settings for a specific plug-in, or change the active and inactive plug-ins per build target. Example: Accessing custom settings Note: This doesn't install any plug-ins for you. Make sure your plug-ins are installed and available before you try this script. var metadata = XRPackageMetadataStore.GetMetadataForPackage(my_pacakge_id); assets = AssetDatabase.FindAssets($\"t:{metadata.settingsType}\"); var assetPath = AssetDatabase.GUIDToAssetPath(assets[0]); // Settings access is type specific. You will need information from your plug-in documentation // to know how to get at specific instances and properties. // You must know the type of the settings you are accessing. var directInstance = AssetDatabase.LoadAssetAtPath(assetPath, typeof(full.typename.for.pluginsettings)); // You must know the access method for getting build target specific settings data. var buildTargetSettings = directInstance.GetSettingsForBuildTargetGroup(BuildTargetGroup.Android); // Do something with settings... // Mark instance dirty and save any changes. EditorUtility.SetDirty(directInstance); AssetDatabase.SaveAssets(); Example: Configuring plug-ins per build target Note: This doesn't install any plug-ins for you. Make sure your plug-ins are installed and available before you try this script. Adding a plug-in to the set of assigned plug-ins for a build target: var buildTargetSettings = XRGeneralSettingsPerBuildTarget.SettingsForBuildTarget(BuildTarget.Standalone); var pluginsSettings = buildTargetSettings.AssignedSettings; var didAssign = XRPackageMetadataStore.AssignLoader(pluginsSettings, \"full.typename.for.pluginloader\", BuildTargetGroup.Standalone); if (!didAssign) { // Report error or do something here. ... } Removing a plug-in from the set of assigned plug-ins for a build target: var buildTargetSettings = XRGeneralSettingsPerBuildTarget.SettingsForBuildTarget(BuildTarget.Standalone); var pluginsSettings = buildTargetSettings.AssignedSettings; var didRemove = XRPackageMetadataStore.RemoveLoader(pluginsSettings, \"full.typename.for.pluginloader\", BuildTargetGroup.Standalone); if (!didRemove) { // Report error or do something here. ... } Installing the XR Plug-in Management package Please see related Unity documentation for Configuring XR."
  },
  "Library/PackageCache/com.unity.xr.management@4.4.0/Documentation~/Provider.html": {
    "href": "Library/PackageCache/com.unity.xr.management@4.4.0/Documentation~/Provider.html",
    "title": "Package author documentation | Cacher Game",
    "summary": "Package author documentation XR Plug-in Management packages and Unity packages All XR Plug-in Management packages must also be full Unity packages. The package does not have to be registered or exist in any external repository or package server. It can live within the Assets folder. The only requirement is that you define the package with a package.json file and a unique package id. For more information, see documentation on Unity Packages. Lifecycle management This package enables you to manage the lifecycle of XR SDK subsystems without the need for boilerplate code. The XRManagerSettingsclass provides a scriptable object that your app can use to start, stop, initialize, and deinitialize a set of subsystems defined in an XRLoader instance. Providers must create a subclass of XRLoader to make a Loader available for their particular runtime scheme. The XRLoader interface looks like this: public abstract class XRLoader : ScriptableObject { public virtual bool Initialize() { return false; } public virtual bool Start() { return false; } public virtual bool Stop() { return false; } public virtual bool Deinitialize() { return false; } public abstract T GetLoadedSubsystem<T>() where T : IntegratedSubsystem; } To handle subsystem management in a type-safe manner, derive from the XRLoaderHelper class. For an example, see Samples/SampleLoader.cs. An XRLoader is a ScriptableObject, which means you can create one or more instances of it. Each XRLoader subclass defines the subsystems and their load order, and manages the set of subsystems they require. Add all the XRLoader instances you created to the Loaders property of the XRManagerSettings, and arrange them in the order you want them to load. When initializing Loaders, XR Manager Settings calls each XRLoader instance it has a reference to, in the order you specify, and attempts to initialize each one. The first Loader to initialize successfully becomes the active Loader and Unity stops all further attempts to initialize other Loaders. Once that happens, you can query the static XRManagerSettings.ActiveLoader instance to access the active Loader. If all Loaders fail to initialize, Unity sets activeLoader to null. Scene-based automatic lifecycle management hooks into the following MonoBehaviour callback points: Callback Lifecycle step OnEnable Find the first Loader that initialized successfully and set ActiveLoader. Start Start all subsystems. OnDisable Stop all subsystems. OnDestroy Deinitialize all subsystems and remove the ActiveLoader instance. Application lifetime-based automatic lifecycle management hooks into the following callback points: Callback Lifecycle step Runtime initialization after assemblies loaded Find the first Loader that succeeds initialization and set ActiveLoader. Runtime initialization before splash screen displays Start all subsystems. OnDisable Stop all subsystems. OnDestroy Deintialize all subsystems and remove the ActiveLoader instance. Configuring build and runtime settings through Unified Settings A provider might need additional settings to help manage build issues or runtime configuration. To do this, add an XRConfigurationData attribute to a ScriptableObject, and define a set of properties you want to surface to allow users to control configuration. Unity displays configuration options in the XR section of the Unified Settings window. Unity manages the lifecycle of one instance of the class marked with the attribute through the EditorBuildSettings config object API. If you don't provide a dedicated UI, configuration settings are displayed in the Unified Settings window using the standard Scriptable Object UI Inspector. You can create a custom Editor for your configuration settings type, which then replaces the standard Inspector in the Unified Settings window. The provider needs to handle getting the settings from EditorUserBuildSettings into the built application. You can do this with a custom build processing script. If you only need to make sure that you have access to the same settings at runtime, you can derive from XRBuildHelper<T>. This is a generic abstract base class that takes the build settings stored in EditorUserBuildSettings and gets them into the built application for runtime access. The simplest build script for your package would look like this: public class MyBuildProcessor : XRBuildHelper<MySettings> { public override string BuildSettingsKey { get { return \"MyPackageSettingsKey\"; } } } You can override the build processing steps from IPreprocessBuildWithReport and IPostprocessBuildWithReport, but make sure you call to the base class implementation. If you don’t, your settings don't transfer to the built application. public class MyBuildProcessor : XRBuildHelper<MySettings> { public override string BuildSettingsKey { get { return \"MyPackageSettingsKey\"; } } public override void OnPreprocessBuild(BuildReport report) { base.OnPreprocessBuild(report); // Do your work here } public override void OnPostprocessBuild(BuildReport report) { base.OnPreprocessBuild(report); // Do your work here } } If you want to support different settings per platform at build time, you can override UnityEngine.Object SettingsForBuildTargetGroup(BuildTargetGroup buildTargetGroup) and use the buildTargetGroup attribute to retrieve the appropriate platform settings. By default, this method uses the key associated with the settings instance to copy the entire settings object from EditorUserBuildSettings to PlayerSettings. public class MyBuildProcessor : XRBuildHelper<MySettings> { public override string BuildSettingsKey { get { return \"MyPackageSettingsKey\"; } } public override UnityEngine.Object SettingsForBuildTargetGroup(BuildTargetGroup buildTargetGroup) { // Get platform specific settings and return them. Use something like the following // for simple settings data that isn't platform specific. UnityEngine.Object settingsObj = null; EditorBuildSettings.TryGetConfigObject(BuildSettingsKey, out settingsObj); if (settingsObj == null || !(settingsObj is T)) return null; return settingsObj; } } If you need more extensive support and/or complete control, you can make a copy of the SampleBuildProcessor in the Samples/Editor folder and work from there. Package metadata Your plug-in must provide metadata information for it to be usable by the XR Plug-in Management system. Your plug-in must implement the following interfaces: IXRPackage IXRPackageMetadata IXRLoaderMetadata The system will use .Net reflection to find all types implementing the IXRPackage interface. It will then attempt to instantiate each one and populate the metadata store with the information provided by each instance. You can only have one instance of IXRPackage within a given Unity package. The IXRMetadata.packageId field must return the same id as set in the package's package.json file. Example: Simple, minimal package information setup: class MyPackage : IXRPackage { private class MyLoaderMetadata : IXRLoaderMetadata { public string loaderName { get; set; } public string loaderType { get; set; } public List<BuildTargetGroup> supportedBuildTargets { get; set; } } private class MyPackageMetadata : IXRPackageMetadata { public string packageName { get; set; } public string packageId { get; set; } public string settingsType { get; set; } public List<IXRLoaderMetadata> loaderMetadata { get; set; } } private static IXRPackageMetadata s_Metadata = new MyPackageMetadata(){ packageName = \"My XR Plug-in\", packageId = \"my.xr.package\", settingsType = \"My.Package.MyPackageSettings\", loaderMetadata = new List<IXRLoaderMetadata>() { new MyLoaderMetadata() { loaderName = \"My Loader\", loaderType = \"My.Package.MyLoader\", supportedBuildTargets = new List<BuildTargetGroup>() { BuildTargetGroup.Standalone, BuildTargetGroup.Android, BuildTargetGroup.iOS } }, } }; public IXRPackageMetadata metadata => s_Metadata; public bool PopulateNewSettingsInstance(ScriptableObject obj) { MyPackageSettings packageSettings = obj as MyPackageSettings; if (packageSettings != null) { // Do something here if you need to... } return false; } } Package initialization Implementing the Package Metadata allows the XR Plug-in Management system to auto create and initialize your loaders and settings instances. The system will pass any new instances of your settings to the PopulateNewSettingsInstance function to allow your plug-in to do post creation initialization of the new instance data if needed. Providing a custom loader UI for the loader selection screen A package author can provide a custom UI for their loader within one or more build targets. See XRCustomLoaderUI for more information about the API. The image below was rendered by the sample provided in this package. Note: If you're using the samples, make sure to add them to a Unity package. Otherwise, the XR Plug-in Management UI won't work correctly. See Unity documentation on custom packages to learn more about custom package requirements. Displaying plug-in notifications in the XR Plug-in Management window If your package loader needs to notify the user about upcoming changes to the package, XR Plug-in Management provides an API that allows packages to display a tooltip and icon inside the XR Plug-in Management window in the Unity Editor. To do this, use the UnityEngine.XR.Management.PackageNotificationUtils API. The code example below shows The code example below shows how to register your package with an icon, tooltip, and optionally a URL. Clicking the icon will redirect the user to a resource with more information. // The following sample assumes some package \"com.unity.xr.foobar\" has all // relevant package information class FoobarLoaderMetadata : IXRLoaderMetadata { public string loaderName { get; set; } public string loaderType { get; set; } public List<BuildTargetGroup> supportedBuildTargets { get; set; } } class FoobarPackageMetadata : IXRPackageMetadata { public string packageName { get; set; } public string packageId { get; set; } public string settingsType { get; set; } public List<IXRLoaderMetadata> loaderMetadata { get; set; } } static IXRPackageMetadata s_Metadata = new FoobarPackageMetadata() { packageName = \"Foobar Package\", packageId = \"com.unity.xr.foobar\", settingsType = typeof(SampleSettings).FullName, loaderMetadata = new List<IXRLoaderMetadata>() { new FoobarLoaderMetadata() { loaderName = \"Foobar Loader\", loaderType = typeof(SampleLoader).FullName, supportedBuildTargets = new List<BuildTargetGroup>() { BuildTargetGroup.Standalone, BuildTargetGroup.WSA } } } }; // This is the tooltip string that will be shown in the XR Plug-in Management window when the user // mouses over the icon const string k_PackageNotificationTooltip = @\"This is a sample and will not work if copied verbatim.\"; // This is a string that links to the Unity Editor built-in icon for a warning symbol. const GUIContent k_PackageNotificationIcon = EditorGUIUtility.IconContent(\"console.warnicon.sml\"); // This is the link that opens when the user clicks on the icon in the XR Plug-in Management window. const string k_PackageNotificationManagementDocsURL = @\"https://docs.unity3d.com/Packages/com.unity.xr.management@latest/index.html\"; public IXRPackageMetadata metadata { get { // Register package notification information any time the metadata is // requested. This prevents domain reloads from losing your notification. var packageNotificationInfo = new PackageNotificationInfo( EditorGUIUtility.IconContent(k_PackageNotificationIcon), k_PackageNotificationTooltip, k_PackageNotificationManagementDocsURL); PackageNotificationUtils.RegisterPackageNotificationInformation( s_Metadata.packageId, packageNotificationInfo); return s_Metadata; } } The code above should display a notification in the XR Plug-in Management window. Note: The code samples in SampleMetadata.cs contain further examples of how to use this API. Installing the XR Plug-in Management package Most XR SDK Provider packages typically include XR Plug-in Management, so you shouldn't need to install it. If you do need to install it, follow the instructions in the Package Manager documentation."
  },
  "Library/PackageCache/com.unity.xr.management@4.4.0/Documentation~/com.unity.xr.management.html": {
    "href": "Library/PackageCache/com.unity.xr.management@4.4.0/Documentation~/com.unity.xr.management.html",
    "title": "About the XR Plug-in Management package | Cacher Game",
    "summary": "About the XR Plug-in Management package Use the XR Plug-in Management package to help streamline XR plug-in lifecycle management and potentially provide users with build time UI through the Unity Unified Settings system. Installation To use this package, you need to add a reference to it in your Project's Packages/manifest.json file. There are three ways you can reference a specific version of a package, depending on how you use it. Using a production version of the package For a released version of the package in production, referencing the package is no different than any other released package. If you can see the package in the Package Manager window, you can select and install it from there. Alternatively, you can edit add it manually to manifest.json like this: \"dependencies\": { //... \"com.unity.xr.management\":\"<full version number>\" } Using a local clone of the package If you want to use a cloned version of the package directly, you can point the Package Manager at a local folder as the location from which to get the package from. \"dependencies\": { //... \"com.unity.xr.management\":\"file:path/to/package/root\" } Note: The root of the package folder isn't necessarily the root of the cloned repository. The root of the package folder is the folder where the package.json file is located. Using the XR Plug-in Management package There are two target audiences for XR Plug-in Management: the end user and the provider. You can find documentation for both audiences here: End-user documentation Provider documentation Technical details Requirements This version of XR Plug-in Management is compatible with the following versions of the Unity Editor: 2019.4.15f1 and later Known limitations Attempting to manually initialize XR using XRManagerSettings.InitializeLoader from Awake could potentially interfere with graphics initialization. If you wish to manually initialize XR then call InitializeLoader from Start to ensure the graphics initialization has completed. Package contents This version of XR Plug-in Management includes: XRManagerSettings - This is a ScriptableObject that you can use to manage XRLoader instances and their lifecycle. XRLoader - This is the base class all Loaders should derive from. It provides a basic API that the XRManagerSettings can use to manage lifecycle, and a simple API you can use to request specific subsystems from the Loader. XRConfigurationData - This is an attribute that allows for build and runtime settings to be hosted within the Unified Settings window. All instances display under the top-level XR entry within the Unified Settings window, using the name supplied in the script as part of the attribute. The management package uses the EditorBuildSettings config object API, stored with the key provided in the attribute, to maintain and manage the lifecycle for one instance of the build settings. You can access the configuration settings instance by retrieving the instance associated with the chosen key (as set in the attribute) from EditorBuildSettings. XRPackageInitializationBase - Helper class to derive from that simplifies package initialization. Helps to create default instances of the package's XRLoader and default settings when you install the package. Initialization only runs once, and you shouldn't depend on the user to create the specified instances on their own. XRBuildHelper - Abstract class useful for handling some of the boilerplate around moving settings from the Editor to the runtime. If you derive from this class and specify the appropriate settings type, the system moves settings of that type from EditorUserBuildSettings to PlayerSettings so that the system can use them at runtime. XRGeneralSettings - Contains settings that apply to all XR Plug-ins, rather than any single provider. Samples folder - Contains an implementation of all parts of XR Plug-in Management. You can copy this folder to your Project or package to start implementing XR Plug-in Management for your needs."
  },
  "Library/PackageCache/com.unity.xr.management@4.4.0/Documentation~/upgrade-guide.html": {
    "href": "Library/PackageCache/com.unity.xr.management@4.4.0/Documentation~/upgrade-guide.html",
    "title": "Upgrade Guide to 4.0.0 | Cacher Game",
    "summary": "Upgrade Guide to 4.0.0 Runtime behavior of XRManagerSettings.loaders property has changed to return a shallow copy of the list of loaders. This list can be operated on without affecting the original currently held list. However, the list itself can be set to a mutated list as long as it follows the following guidelines: It only reorders the elements. It only adds loaders that are of the same type as a loader that was present and registered prior to initial startup. It only removes loaders. While this was always the intended runtime behavior for this collection, it was not actually enforced before this release."
  },
  "Library/PackageCache/com.unity.xr.management@4.4.0/Documentation~/whats-new.html": {
    "href": "Library/PackageCache/com.unity.xr.management@4.4.0/Documentation~/whats-new.html",
    "title": "What's new in version 4.0.0 | Cacher Game",
    "summary": "What's new in version 4.0.0 Summary of changes in XR Plug-in Management package version 4.0.0-pre.4. The main updates in this release include: Added API to support packages providing their own rendered UI in the Loader Selection pane. API for providing notifications per package in the Loader Selection pane. Updated Added sample code to documentation to show how to manage an individual loader manually. The XRManagerSettings.loaders collection now returns a copy of the collection at runtime. Before this, modifying the list was reflected immediately in the running XRManagerSettings instance. This is no longer the case. Fixed Small bug in package resolution that could cause the ui To gray out when returning from Play. If there are no loaders set for a target platform, Unity no longer copies XRGeneralSettings to the built target. For a full list of changes and updates in this version, see the XR Plug-in Management package changelog."
  },
  "Library/PackageCache/com.unity.xr.management@4.4.0/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.xr.management@4.4.0/LICENSE.html",
    "title": "| Cacher Game",
    "summary": "com.unity.xr.management copyright © 2020 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.xr.management@4.4.0/README.html": {
    "href": "Library/PackageCache/com.unity.xr.management@4.4.0/README.html",
    "title": "XR Management | Cacher Game",
    "summary": "XR Management This package provides for management of XR subsystem lifecycles without the need for boilerplate code as well as support for provider specific build settings. This package is primarily intented for XR Package authors to provide management tools and touchpoints for their package users. As such, most end users will have this package installed transitively through install of the end user XR package using it. Installing XR Management To install this package, follow the instructions in the Package Manager documentation. This package is com.unity.xr.management Documentation Editor Script API Runtime Script API Manual CI Status"
  },
  "Library/PackageCache/com.unity.xr.management@4.4.0/Tests/TestTooling/README.html": {
    "href": "Library/PackageCache/com.unity.xr.management@4.4.0/Tests/TestTooling/README.html",
    "title": "xr.sdk.test-tooling | Cacher Game",
    "summary": "xr.sdk.test-tooling Shared repo to put generally useful XR test tooling and support. Use as a git submodule in your provider package to allow for shared testing tools support. Requirements Your provider package must have a dependency on XR Plugin Management prior to using this."
  },
  "Packages/DnsClient.1.8.0/README.html": {
    "href": "Packages/DnsClient.1.8.0/README.html",
    "title": "DnsClient.NET | Cacher Game",
    "summary": "DnsClient.NET DnsClient.NET is a simple yet very powerful and high performance open source library for the .NET Framework to do DNS lookups. Usage See the DnsClient site for more details and documentation. The following example instantiates a new LookupClient to query some IP address. var lookup = new LookupClient(); var result = await lookup.QueryAsync(\"google.com\", QueryType.A); var record = result.Answers.ARecords().FirstOrDefault(); var ip = record?.Address; Features General Sync & Async API UDP and TCP lookup, configurable if TCP should be used as fallback in case the UDP result is truncated (default=true). Configurable EDNS support to change the default UDP buffer size and request security relevant records Caching Query result cache based on provided TTL Minimum TTL setting to overrule the result's TTL and always cache the responses for at least that time. (Even very low value, like a few milliseconds, do make a huge difference if used in high traffic low latency scenarios) Maximum TTL to limit cache duration Cache can be disabled Nameserver auto discovery. If no servers are explicitly configured, DnsClient will try its best to resolve them based on your local system configuration. This includes DNS servers configured via network interfaces or even via Windows specific NRPT policies. Multiple DNS endpoints can be configured. DnsClient will use them in random or sequential order (configurable), with re-tries. Configurable retry of queries Optional audit trail of each response and exception Configurable error handling. Throwing DNS errors, like NotExistentDomain is turned off by default Optional Trace/Logging Supported resource records A, AAAA, NS, CNAME, SOA, MB, MG, MR, WKS, HINFO, MINFO, MX, RP, TXT, AFSDB, URI, CAA, NULL, SSHFP, TLSA, RRSIG, NSEC, NSEC3, NSEC3PARAM, DNSKEY, DS, NAPTR, CERT PTR for reverse lookups SRV for service discovery. LookupClient has some extensions to help with that. AXFR zone transfer (as per spec, LookupClient has to be set to TCP mode only for this type. Also, the result depends on if the DNS server trusts your current connection) Build from Source To build and contribute to this project, you must have the latest .NET SDKs and Visual Studio 2022 installed. Examples See MiniDig's readme for what this example command line tool can do. More documentation and examples The Samples repository (there might be more in the future)."
  },
  "Packages/Microsoft.Bcl.AsyncInterfaces.8.0.0/PACKAGE.html": {
    "href": "Packages/Microsoft.Bcl.AsyncInterfaces.8.0.0/PACKAGE.html",
    "title": "| Cacher Game",
    "summary": "About As of C# 8, the C# language has support for producing and consuming asynchronous iterators. The library types in support of those features are available in .NET Core 3.0 and newer as well as in .NET Standard 2.1. This library provides the necessary definitions of those types to support these language features on .NET Framework and on .NET Standard 2.0. This library is not necessary nor recommended when targeting versions of .NET that include the relevant support. Key Features Enables the use of C# async iterators on older .NET platforms How to Use using System; using System.Collections.Generic; using System.Threading.Tasks; internal static class Program { private static async Task Main() { Console.WriteLine(\"Starting...\"); await foreach (var value in GetValuesAsync()) { Console.WriteLine(value); } Console.WriteLine(\"Finished!\"); static async IAsyncEnumerable<int> GetValuesAsync() { for (int i = 0; i < 10; i++) { await Task.Delay(TimeSpan.FromSeconds(1)); yield return i; } } } } Main Types The main types provided by this library are: IAsyncEnumerable<T> IAsyncEnumerator<T> IAsyncDisposable<T> Additional Documentation C# Feature Specification Walkthrough article Feedback & Contributing Microsoft.Bcl.AsyncInterfaces is released as open source under the MIT license. Bug reports and contributions are welcome at the GitHub repository."
  },
  "Packages/Microsoft.Extensions.DependencyInjection.Abstractions.8.0.1/PACKAGE.html": {
    "href": "Packages/Microsoft.Extensions.DependencyInjection.Abstractions.8.0.1/PACKAGE.html",
    "title": "| Cacher Game",
    "summary": "About Supports the lower-level abstractions for the dependency injection (DI) software design pattern which is a technique for achieving Inversion of Control (IoC) between classes and their dependencies. Key Features Interfaces for DI implementations which are provided in other packages including Microsoft.Extensions.DependencyInjection. An implementation of a service collection, which is used to add services to and later retrieve them either directly or through constructor injection. Interfaces, attributes and extensions methods to support various DI concepts including specifying a service's lifetime and supporting keyed services. How to Use This package is typically used with an implementation of the DI abstractions, such as Microsoft.Extensions.DependencyInjection. Main Types The main types provided by this library are: Microsoft.Extensions.DependencyInjection.ActivatorUtilities Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.DependencyInjection.ServiceCollection Microsoft.Extensions.DependencyInjection.ServiceCollectionDescriptorExtensions Microsoft.Extensions.DependencyInjection.ServiceDescriptor Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<TContainerBuilder> Additional Documentation Conceptual documentation API documentation ActivatorUtilities ServiceCollection ServiceDescriptor Related Packages Microsoft.Extensions.DependencyInjection Microsoft.Extensions.Hosting Microsoft.Extensions.Options Feedback & Contributing Microsoft.Extensions.DependencyInjection.Abstractions is released as open source under the MIT license. Bug reports and contributions are welcome at the GitHub repository."
  },
  "Packages/Microsoft.Extensions.Logging.Abstractions.8.0.1/PACKAGE.html": {
    "href": "Packages/Microsoft.Extensions.Logging.Abstractions.8.0.1/PACKAGE.html",
    "title": "| Cacher Game",
    "summary": "About Microsoft.Extensions.Logging.Abstractions provides abstractions of logging. Interfaces defined in this package are implemented by classes in Microsoft.Extensions.Logging and other logging packages. This package includes a logging source generator that produces highly efficient and optimized code for logging message methods. Key Features Define main logging abstraction interfaces like ILogger, ILoggerFactory, ILoggerProvider, etc. How to Use Custom logger provider implementation example using Microsoft.Extensions.Logging; public sealed class ColorConsoleLogger : ILogger { private readonly string _name; private readonly Func<ColorConsoleLoggerConfiguration> _getCurrentConfig; public ColorConsoleLogger( string name, Func<ColorConsoleLoggerConfiguration> getCurrentConfig) => (_name, _getCurrentConfig) = (name, getCurrentConfig); public IDisposable? BeginScope<TState>(TState state) where TState : notnull => default!; public bool IsEnabled(LogLevel logLevel) => _getCurrentConfig().LogLevelToColorMap.ContainsKey(logLevel); public void Log<TState>( LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter) { if (!IsEnabled(logLevel)) { return; } ColorConsoleLoggerConfiguration config = _getCurrentConfig(); if (config.EventId == 0 || config.EventId == eventId.Id) { ConsoleColor originalColor = Console.ForegroundColor; Console.ForegroundColor = config.LogLevelToColorMap[logLevel]; Console.WriteLine($\"[{eventId.Id,2}: {logLevel,-12}]\"); Console.ForegroundColor = originalColor; Console.Write($\" {_name} - \"); Console.ForegroundColor = config.LogLevelToColorMap[logLevel]; Console.Write($\"{formatter(state, exception)}\"); Console.ForegroundColor = originalColor; Console.WriteLine(); } } } Create logs // Worker class that uses logger implementation of teh interface ILogger<T> public sealed class Worker : BackgroundService { private readonly ILogger<Worker> _logger; public Worker(ILogger<Worker> logger) => _logger = logger; protected override async Task ExecuteAsync(CancellationToken stoppingToken) { while (!stoppingToken.IsCancellationRequested) { _logger.LogInformation(\"Worker running at: {time}\", DateTimeOffset.UtcNow); await Task.Delay(1_000, stoppingToken); } } } Use source generator public static partial class Log { [LoggerMessage( EventId = 0, Level = LogLevel.Critical, Message = \"Could not open socket to `{hostName}`\")] public static partial void CouldNotOpenSocket(this ILogger logger, string hostName); } public partial class InstanceLoggingExample { private readonly ILogger _logger; public InstanceLoggingExample(ILogger logger) { _logger = logger; } [LoggerMessage( EventId = 0, Level = LogLevel.Critical, Message = \"Could not open socket to `{hostName}`\")] public partial void CouldNotOpenSocket(string hostName); } Main Types The main types provided by this library are: Microsoft.Extensions.Logging.ILogger Microsoft.Extensions.Logging.ILoggerProvider Microsoft.Extensions.Logging.ILoggerFactory Microsoft.Extensions.Logging.ILogger<TCategoryName> Microsoft.Extensions.Logging.LogLevel Microsoft.Extensions.Logging.Logger<T> Microsoft.Extensions.Logging.LoggerMessage Microsoft.Extensions.Logging.Abstractions.NullLogger Additional Documentation Conceptual documentation API documentation Related Packages Microsoft.Extensions.Logging Microsoft.Extensions.Logging.Console Microsoft.Extensions.Logging.Debug Microsoft.Extensions.Logging.EventSource Microsoft.Extensions.Logging.EventLog Microsoft.Extensions.Logging.TraceSource Feedback & Contributing Microsoft.Extensions.Logging.Abstractions is released as open source under the MIT license. Bug reports and contributions are welcome at the GitHub repository."
  },
  "Packages/SharpCompress.0.37.2/README.html": {
    "href": "Packages/SharpCompress.0.37.2/README.html",
    "title": "SharpCompress | Cacher Game",
    "summary": "SharpCompress SharpCompress is a compression library in pure C# for .NET Framework 4.62, .NET Standard 2.1, .NET 6.0 and NET 8.0 that can unrar, un7zip, unzip, untar unbzip2, ungzip, unlzip with forward-only reading and file random access APIs. Write support for zip/tar/bzip2/gzip/lzip are implemented. The major feature is support for non-seekable streams so large files can be processed on the fly (i.e. download stream). GitHub Actions Build - Need Help? Post Issues on Github! Check the Supported Formats and Basic Usage. Recommended Formats In general, I recommend GZip (Deflate)/BZip2 (BZip)/LZip (LZMA) as the simplicity of the formats lend to better long term archival as well as the streamability. Tar is often used in conjunction for multiple files in a single archive (e.g. .tar.gz) Zip is okay, but it's a very hap-hazard format and the variation in headers and implementations makes it hard to get correct. Uses Deflate by default but supports a lot of compression methods. RAR is not recommended as it's a propriatory format and the compression is closed source. Use Tar/LZip for LZMA 7Zip and XZ both are overly complicated. 7Zip does not support streamable formats. XZ has known holes explained here: (http://www.nongnu.org/lzip/xz_inadequate.html) Use Tar/LZip for LZMA compression instead. A Simple Request Hi everyone. I hope you're using SharpCompress and finding it useful. Please give me feedback on what you'd like to see changed especially as far as usability goes. New feature suggestions are always welcome as well. I would also like to know what projects SharpCompress is being used in. I like seeing how it is used to give me ideas for future versions. Thanks! Please do not email me directly to ask for help. If you think there is a real issue, please report it here. Want to contribute? I'm always looking for help or ideas. Please submit code or email with ideas. Unfortunately, just letting me know you'd like to help is not enough because I really have no overall plan of what needs to be done. I'll definitely accept code submissions and add you as a member of the project! TODOs (always lots) RAR 5 decryption crc check support 7Zip writing Zip64 (Need writing and extend Reading) Multi-volume Zip support. Version Log Releases Version 0.18 Now on Github releases Version 0.17.1 Fix - Bug Fix for .NET Core on Windows Version 0.17.0 New - Full LZip support! Can read and write LZip files and Tars inside LZip files. Make LZip a first class citizen. #241 New - XZ read support! Can read XZ files and Tars inside XZ files. XZ in SharpCompress #91 Fix - Regression - zip file writing on seekable streams always assumed stream start was 0. Introduced with Zip64 writing. Fix - Zip files with post-data descriptors can be properly skipped via decompression Version 0.16.2 Fix .NET 3.5 should support files and cryptography (was a regression from 0.16.0) Fix Zip per entry compression customization wrote the wrong method into the zip archive Version 0.16.1 Fix Preserve compression method when getting a compressed stream Fix RAR entry key normalization fix Version 0.16.0 Breaking - Progress Event Tracking rethink Update to VS2017 - VS2017 - Framework targets have been changed. New - Add Zip64 writing Fix invalid/mismatching Zip version flags. - This allows nuget/System.IO.Packaging to read zip files generated by SharpCompress Fix 7Zip directory hiding Verify RAR CRC headers Version 0.15.2 Fix invalid headers - fixes an issue creating large-ish zip archives that was introduced with zip64 reading. Version 0.15.1 Zip64 extending information and ZipReader Version 0.15.0 Add zip64 support for ZipArchive extraction Version 0.14.1 .NET Assemblies aren't strong named Pkware encryption for Zip files didn't allow for multiple reads of an entry GZip Entry couldn't be read multiple times Version 0.14.0 Support for LZip reading in for Tars Version 0.13.1 Fix null password on ReaderFactory. Fix null options on SevenZipArchive Make PpmdProperties lazy to avoid unnecessary allocations. Version 0.13.0 Breaking change: Big refactor of Options on API. 7Zip supports Deflate Version 0.12.4 Forward only zip issue fix https://github.com/adamhathcock/sharpcompress/issues/160 Try to fix frameworks again by copying targets from JSON.NET Version 0.12.3 7Zip fixes https://github.com/adamhathcock/sharpcompress/issues/73 Maybe all profiles will work with project.json now Version 0.12.2 Support Profile 259 again Version 0.12.1 Support Silverlight 5 Version 0.12.0 .NET Core RTM! Bug fix for Tar long paths Version 0.11.6 Bug fix for global header in Tar Writers now have a leaveOpen bool overload. They won't close streams if not-requested to. Version 0.11.5 Bug fix in Skip method Version 0.11.4 SharpCompress is now endian neutral (matters for Mono platforms) Fix for Inflate (need to change implementation) Fixes for RAR detection Version 0.11.1 Added Cancel on IReader Removed .NET 2.0 support and LinqBridge dependency Version 0.11 Been over a year, contains mainly fixes from contributors! Possible breaking change: ArchiveEncoding is UTF8 by default now. TAR supports writing long names using longlink RAR Protect Header added Version 0.10.3 Finally fixed Disposal issue when creating a new archive with the Archive API Version 0.10.2 Fixed Rar Header reading for invalid extended time headers. Windows Store assembly is now strong named Known issues with Long Tar names being worked on Updated to VS2013 Portable targets SL5 and Windows Phone 8 (up from SL4 and WP7) Version 0.10.1 Fixed 7Zip extraction performance problem Version 0.10: Added support for RAR Decryption (thanks to https://github.com/hrasyid) Embedded some BouncyCastle crypto classes to allow RAR Decryption and Winzip AES Decryption in Portable and Windows Store DLLs Built in Release (I think) XZ implementation based on: https://github.com/sambott/XZ.NET by @sambott XZ BCJ filters support contributed by Louis-Michel Bergeron, on behalf of aDolus Technology Inc. - 2022 7Zip implementation based on: https://code.google.com/p/managed-lzma/ LICENSE Copyright (c) 2000 - 2011 The Legion Of The Bouncy Castle (http://www.bouncycastle.org) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Packages/Snappier.1.1.6/README.html": {
    "href": "Packages/Snappier.1.1.6/README.html",
    "title": "Snappier | Cacher Game",
    "summary": "Snappier Introduction Snappier is a pure C# port of Google's Snappy compression algorithm. It is designed with speed as the primary goal, rather than compression ratio, and is ideal for compressing network traffic. Please see the Snappy README file for more details on Snappy. Project Goals The Snappier project aims to meet the following needs of the .NET community. Cross-platform C# implementation for Linux and Windows, without P/Invoke or special OS installation requirements Compatible with .NET 4.6.1 and later and .NET Core 2.0 and later Use .NET paradigms, including asynchronous stream support Full compatibility with both block and stream formats Near C++ level performance Note: This is only possible on .NET Core 3.0 and later with the aid of Span<T> and System.Runtime.Intrinsics. .NET Core 2.1 is almost as good, .NET 4.6.1 is the slowest Keep allocations and garbage collection to a minimum using buffer pools Installing Simply add a NuGet package reference to the latest version of Snappier. <PackageReference Include=\"Snappier\" Version=\"1.0.0\" /> or dotnet add package Snappier Block compression/decompression using a buffer you already own using Snappier; public class Program { private static byte[] Data = {0, 1, 2}; // Wherever you get the data from public static void Main() { // This option assumes that you are managing buffers yourself in an efficient way. // In this example, we're using heap allocated byte arrays, however in most cases // you would get these buffers from a buffer pool like ArrayPool<byte> or MemoryPool<byte>. // Compression byte[] buffer = new byte[Snappy.GetMaxCompressedLength(Data)]; int compressedLength = Snappy.Compress(Data, buffer); Span<byte> compressed = buffer.AsSpan(0, compressedLength); // Decompression byte[] outputBuffer = new byte[Snappy.GetUncompressedLength(compressed)]; int decompressedLength = Snappy.Decompress(compressed, outputBuffer); for (var i = 0; i < decompressedLength; i++) { // Do something with the data } } } Block compression/decompression using a memory pool buffer using Snappier; public class Program { private static byte[] Data = {0, 1, 2}; // Wherever you get the data from public static void Main() { // This option uses `MemoryPool<byte>.Shared`. However, if you fail to // dispose of the returned buffers correctly it can result in memory leaks. // It is imperative to either call .Dispose() or use a using statement. // Compression using (IMemoryOwner<byte> compressed = Snappy.CompressToMemory(Data)) { // Decompression using (IMemoryOwner<byte> decompressed = Snappy.DecompressToMemory(compressed.Memory.Span)) { // Do something with the data } } } } Block compression/decompression using heap allocated byte[] using Snappier; public class Program { private static byte[] Data = {0, 1, 2}; // Wherever you get the data from public static void Main() { // This is generally the least efficient option, // but in some cases may be the simplest to implement. // Compression byte[] compressed = Snappy.CompressToArray(Data); // Decompression byte[] decompressed = Snappy.DecompressToArray(compressed); } } Stream compression/decompression Compressing or decompressing a stream follows the same paradigm as other compression streams in .NET. SnappyStream wraps an inner stream. If decompressing you read from the SnappyStream, if compressing you write to the SnappyStream This approach reads or writes the Snappy framing format designed for streaming. The input/output is not the same as the block method above. It includes additional headers and CRC32C checks. using System.IO; using System.IO.Compression; using Snappier; public class Program { public static async Task Main() { using var fileStream = File.OpenRead(\"somefile.txt\"); // First, compression using var compressed = new MemoryStream(); using (var compressor = new SnappyStream(compressed, CompressionMode.Compress, true)) { await fileStream.CopyToAsync(compressor); // Disposing the compressor also flushes the buffers to the inner stream // We pass true to the constructor above so that it doesn't close/dispose the inner stream // Alternatively, we could call compressor.Flush() } // Then, decompression compressed.Position = 0; // Reset to beginning of the stream so we can read using var decompressor = new SnappyStream(compressed, CompressionMode.Decompress); var buffer = new byte[65536]; var bytesRead = decompressor.Read(buffer, 0, buffer.Length); while (bytesRead > 0) { // Do something with the data bytesRead = decompressor.Read(buffer, 0, buffer.Length) } } } Other Projects There are other projects available for C#/.NET which implement Snappy compression. Snappy.NET - Uses P/Invoke to C++ for great performance. However, it only works on Windows, and is a bit heap allocation heavy in some cases. It also hasn't been updated since 2014 (as of 10/2020). This project may still be the best choice if your project is on the legacy .NET Framework on Windows, where Snappier is much less performant. IronSnappy - Another pure C# port, based on the Golang implemenation instead of the C++ implementation."
  },
  "Packages/System.Text.Encoding.CodePages.8.0.0/PACKAGE.html": {
    "href": "Packages/System.Text.Encoding.CodePages.8.0.0/PACKAGE.html",
    "title": "| Cacher Game",
    "summary": "About System.Text.Encoding.CodePages enable creating single and double bytes encodings for code pages that otherwise are available only in the desktop .NET Framework. Key Features Support single and double byte encodings for code pages that are not available in .NET Core. How to Use using System.Text; // Register the CodePages encoding provider at application startup to enable using single and double byte encodings. Encoding.RegisterProvider(CodePagesEncodingProvider.Instance); // Now can create single and double byte encodings for code pages that are not available in .NET Core. Encoding windows1252Encoding = Encoding.GetEncoding(1252); // Western European (Windows) byte[] encodedBytes = windows1252Encoding.GetBytes(\"String to encode\"); Main Types The main types provided by this library are: CodePagesEncodingProvider Additional Documentation API documentation Related Packages System.Text.Encodings.Web Feedback & Contributing System.Text.Encoding.CodePages is released as open source under the MIT license. Bug reports and contributions are welcome at the GitHub repository."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Cacher Game",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Cacher Game",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Cacher Game",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}