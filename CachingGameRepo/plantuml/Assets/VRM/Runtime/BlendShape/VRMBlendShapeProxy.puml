@startuml
class VRMBlendShapeProxy {
    + OnImported(context:VRMImporterContext) : void
    + Reinitialize() : void
    + ImmediatelySetValue(key:BlendShapeKey, value:float) : void
    + AccumulateValue(key:BlendShapeKey, value:float) : void
    + GetValue(key:BlendShapeKey) : float
    + GetValues() : IEnumerable<KeyValuePair<BlendShapeKey, float>>
    + SetValues(values:IEnumerable<KeyValuePair<BlendShapeKey, float>>) : void
    + Apply() : void
}
class VRMBlendShapeProxyExtensions <<static>> {
    + {static} GetValue(proxy:VRMBlendShapeProxy, key:BlendShapePreset) : float
    + {static} GetValue(proxy:VRMBlendShapeProxy, key:String) : float
    + {static} SetValue(proxy:VRMBlendShapeProxy, key:BlendShapePreset, value:float) : void
    + {static} ImmediatelySetValue(proxy:VRMBlendShapeProxy, key:BlendShapePreset, value:float) : void
    + {static} AccumulateValue(proxy:VRMBlendShapeProxy, key:BlendShapePreset, value:float) : void
    + {static} SetValue(proxy:VRMBlendShapeProxy, key:String, value:float) : void
    + {static} ImmediatelySetValue(proxy:VRMBlendShapeProxy, key:String, value:float) : void
    + {static} AccumulateValue(proxy:VRMBlendShapeProxy, key:String, value:float) : void
    + {static} SetValue(proxy:VRMBlendShapeProxy, key:BlendShapeKey, value:float) : void
    + {static} SetValue(proxy:VRMBlendShapeProxy, key:BlendShapePreset, value:float, apply:bool) : void
    + {static} SetValue(proxy:VRMBlendShapeProxy, key:String, value:float, apply:bool) : void
    + {static} SetValue(proxy:VRMBlendShapeProxy, key:BlendShapeKey, value:float, apply:bool) : void
}
MonoBehaviour <|-- VRMBlendShapeProxy
IVRMComponent <|-- VRMBlendShapeProxy
VRMBlendShapeProxy --> "BlendShapeAvatar" BlendShapeAvatar
@enduml
