@startuml
enum AvatarPermissionType {
    onlyAuthor,
    onlySeparatelyLicensedPerson,
    everyone,
}
enum CommercialUsageType {
    personalNonProfit,
    personalProfit,
    corporation,
}
enum CreditNotationType {
    required,
    unnecessary,
}
enum ModificationType {
    prohibited,
    allowModification,
    allowModificationRedistribution,
}
class Meta {
    + Extensions : object
    + Extras : object
    + Name : string
    + Version : string
    + CopyrightInformation : string
    + ContactInformation : string
    + ThirdPartyLicenses : string
    + ThumbnailImage : int?
    + LicenseUrl : string
    + AllowExcessivelyViolentUsage : bool?
    + AllowExcessivelySexualUsage : bool?
    + AllowPoliticalOrReligiousUsage : bool?
    + AllowAntisocialOrHateUsage : bool?
    + AllowRedistribution : bool?
    + OtherLicenseUrl : string
}
class HumanBone {
    + Extensions : object
    + Extras : object
    + Node : int?
}
class HumanBones {
}
class Humanoid {
    + Extensions : object
    + Extras : object
}
enum FirstPersonType {
    auto,
    both,
    thirdPersonOnly,
    firstPersonOnly,
}
class MeshAnnotation {
    + Extensions : object
    + Extras : object
    + Node : int?
}
class FirstPerson {
    + Extensions : object
    + Extras : object
}
enum LookAtType {
    bone,
    expression,
}
class LookAtRangeMap {
    + Extensions : object
    + Extras : object
    + InputMaxValue : float?
    + OutputScale : float?
}
class LookAt {
    + Extensions : object
    + Extras : object
}
class MorphTargetBind {
    + Extensions : object
    + Extras : object
    + Node : int?
    + Index : int?
    + Weight : float?
}
enum MaterialColorType {
    color,
    emissionColor,
    shadeColor,
    matcapColor,
    rimColor,
    outlineColor,
}
class MaterialColorBind {
    + Extensions : object
    + Extras : object
    + Material : int?
}
class TextureTransformBind {
    + Extensions : object
    + Extras : object
    + Material : int?
}
enum ExpressionOverrideType {
    none,
    block,
    blend,
}
class Expression {
    + Extensions : object
    + Extras : object
    + IsBinary : bool?
}
class Preset {
}
class Expressions {
    + Extensions : object
    + Extras : object
}
class VRMC_vrm {
    + <<const>> ExtensionName : string = "VRMC_vrm"
    + Extensions : object
    + Extras : object
    + SpecVersion : string
}
class "List`1"<T> {
}
class "Dictionary`2"<T1,T2> {
}
Meta --> "Authors<string>" "List`1"
Meta --> "References<string>" "List`1"
Meta --> "AvatarPermission" AvatarPermissionType
Meta --> "CommercialUsage" CommercialUsageType
Meta --> "CreditNotation" CreditNotationType
Meta --> "Modification" ModificationType
HumanBones --> "Hips" HumanBone
HumanBones --> "Spine" HumanBone
HumanBones --> "Chest" HumanBone
HumanBones --> "UpperChest" HumanBone
HumanBones --> "Neck" HumanBone
HumanBones --> "Head" HumanBone
HumanBones --> "LeftEye" HumanBone
HumanBones --> "RightEye" HumanBone
HumanBones --> "Jaw" HumanBone
HumanBones --> "LeftUpperLeg" HumanBone
HumanBones --> "LeftLowerLeg" HumanBone
HumanBones --> "LeftFoot" HumanBone
HumanBones --> "LeftToes" HumanBone
HumanBones --> "RightUpperLeg" HumanBone
HumanBones --> "RightLowerLeg" HumanBone
HumanBones --> "RightFoot" HumanBone
HumanBones --> "RightToes" HumanBone
HumanBones --> "LeftShoulder" HumanBone
HumanBones --> "LeftUpperArm" HumanBone
HumanBones --> "LeftLowerArm" HumanBone
HumanBones --> "LeftHand" HumanBone
HumanBones --> "RightShoulder" HumanBone
HumanBones --> "RightUpperArm" HumanBone
HumanBones --> "RightLowerArm" HumanBone
HumanBones --> "RightHand" HumanBone
HumanBones --> "LeftThumbMetacarpal" HumanBone
HumanBones --> "LeftThumbProximal" HumanBone
HumanBones --> "LeftThumbDistal" HumanBone
HumanBones --> "LeftIndexProximal" HumanBone
HumanBones --> "LeftIndexIntermediate" HumanBone
HumanBones --> "LeftIndexDistal" HumanBone
HumanBones --> "LeftMiddleProximal" HumanBone
HumanBones --> "LeftMiddleIntermediate" HumanBone
HumanBones --> "LeftMiddleDistal" HumanBone
HumanBones --> "LeftRingProximal" HumanBone
HumanBones --> "LeftRingIntermediate" HumanBone
HumanBones --> "LeftRingDistal" HumanBone
HumanBones --> "LeftLittleProximal" HumanBone
HumanBones --> "LeftLittleIntermediate" HumanBone
HumanBones --> "LeftLittleDistal" HumanBone
HumanBones --> "RightThumbMetacarpal" HumanBone
HumanBones --> "RightThumbProximal" HumanBone
HumanBones --> "RightThumbDistal" HumanBone
HumanBones --> "RightIndexProximal" HumanBone
HumanBones --> "RightIndexIntermediate" HumanBone
HumanBones --> "RightIndexDistal" HumanBone
HumanBones --> "RightMiddleProximal" HumanBone
HumanBones --> "RightMiddleIntermediate" HumanBone
HumanBones --> "RightMiddleDistal" HumanBone
HumanBones --> "RightRingProximal" HumanBone
HumanBones --> "RightRingIntermediate" HumanBone
HumanBones --> "RightRingDistal" HumanBone
HumanBones --> "RightLittleProximal" HumanBone
HumanBones --> "RightLittleIntermediate" HumanBone
HumanBones --> "RightLittleDistal" HumanBone
Humanoid --> "HumanBones" HumanBones
MeshAnnotation --> "Type" FirstPersonType
FirstPerson --> "MeshAnnotations<MeshAnnotation>" "List`1"
LookAt --> "Type" LookAtType
LookAt --> "RangeMapHorizontalInner" LookAtRangeMap
LookAt --> "RangeMapHorizontalOuter" LookAtRangeMap
LookAt --> "RangeMapVerticalDown" LookAtRangeMap
LookAt --> "RangeMapVerticalUp" LookAtRangeMap
MaterialColorBind --> "Type" MaterialColorType
Expression --> "MorphTargetBinds<MorphTargetBind>" "List`1"
Expression --> "MaterialColorBinds<MaterialColorBind>" "List`1"
Expression --> "TextureTransformBinds<TextureTransformBind>" "List`1"
Expression --> "OverrideBlink" ExpressionOverrideType
Expression --> "OverrideLookAt" ExpressionOverrideType
Expression --> "OverrideMouth" ExpressionOverrideType
Preset --> "Happy" Expression
Preset --> "Angry" Expression
Preset --> "Sad" Expression
Preset --> "Relaxed" Expression
Preset --> "Surprised" Expression
Preset --> "Aa" Expression
Preset --> "Ih" Expression
Preset --> "Ou" Expression
Preset --> "Ee" Expression
Preset --> "Oh" Expression
Preset --> "Blink" Expression
Preset --> "BlinkLeft" Expression
Preset --> "BlinkRight" Expression
Preset --> "LookUp" Expression
Preset --> "LookDown" Expression
Preset --> "LookLeft" Expression
Preset --> "LookRight" Expression
Preset --> "Neutral" Expression
Expressions --> "Preset" Preset
Expressions --> "Custom<string,Expression>" "Dictionary`2"
VRMC_vrm --> "Meta" Meta
VRMC_vrm --> "Humanoid" Humanoid
VRMC_vrm --> "FirstPerson" FirstPerson
VRMC_vrm --> "LookAt" LookAt
VRMC_vrm --> "Expressions" Expressions
@enduml
