@startuml
class MeshExportInfo {
    + IsSameMeshAndMaterials(other:MeshExportInfo) : bool
    + IsSameMeshAndMaterials(mesh:Mesh, materials:Material[]) : bool
    + IsSameMeshAndMaterials(r:Renderer) : bool
    + {static} TryGetSameMeshIndex(meshWithRenderers:IReadOnlyList<MeshExportInfo>, mesh:Mesh, materials:Material[], meshIndex:int) : bool
    + CanExport : bool <<get>>
    + IsRendererActive : bool <<get>>
    + Skinned : bool
    + GetJointIndex(index:int) : int
    + GetBindPoses() : IEnumerable<Matrix4x4>
    + HasNormal : bool <<get>>
    + HasUV : bool <<get>>
    + HasVertexColor : bool <<get>>
    + HasSkinning : bool <<get>>
    + VertexCount : int
    + ExportVertexSize : int
    + IndexCount : int
    + IndicesSize : int <<get>>
    + ExportBlendShapeVertexSize : int
    + TotalBlendShapeCount : int
    + ExportBlendShapeCount : int
    + ExportByteSize : int <<get>>
    + Summary : string
    + MeshExportInfo(renderer:Renderer, settings:GltfExportSettings)
    + PushRenderer(renderer:Renderer) : void
    + CalcMeshSize(root:GameObject, renderer:Renderer, settings:GltfExportSettings, blendShapeFilter:IBlendShapeExportFilter) : void
    + CalcMeshSize(relativePath:string, settings:GltfExportSettings, blendShapeFilter:IBlendShapeExportFilter) : void
}
class MeshExportList {
    + Count : int <<get>>
    + GetEnumerator() : IEnumerator<MeshExportInfo>
    + GetUniqueMaterials() : IEnumerable<Material>
    + GetInfo(nodes:IEnumerable<Transform>, settings:GltfExportSettings) : void
    + {static} Create(go:GameObject) : MeshExportInfo
}
class "IReadOnlyList`1"<T> {
}
MeshExportInfo --> "Mesh" Mesh
MeshExportInfo --> "Renderers<(Renderer, Transform[] UniqueBones)>" "IReadOnlyList`1"
MeshExportInfo --> "VertexColor" VertexColorState
"IReadOnlyList`1" "<MeshExportInfo>" <|-- MeshExportList
@enduml
