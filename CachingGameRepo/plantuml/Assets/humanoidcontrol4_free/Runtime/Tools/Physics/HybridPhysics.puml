@startuml
class HybridPhysics {
    + {static} kinematicMass : float = 1
    + strength : float = 100
    <<virtual>> + OnTriggerEnter(collider:Collider) : void
    <<virtual>> + OnCollisionEnter(collision:Collision) : void
    <<virtual>> + OnCollisionStay(collision:Collision) : void
    <<virtual>> + OnCollisionExit(collision:Collision) : void
    + {static} CalculateForce(thisRigidbody:Rigidbody, sollPosition:Vector3, strength:float, damping:float) : Vector3
    + {static} ApplyTorqueBackwardsPD(rb:Rigidbody, desiredRotation:Quaternion, frequency:float, damping:float) : void
    + DeterminePhysicsMode() : void
    + {static} CalculateTotalMass(thisRigidbody:Rigidbody) : float
    + SetNonKinematic() : void
    + {static} SetNonKinematic(rigidbody:Rigidbody, colliders:Collider[]) : void
    + {static} SetNonKinematic(rigidbody:Rigidbody, colliders:List<Collider>) : void
    + SetHybridKinematic() : void
    + SetKinematic() : void
    + {static} SetKinematic(rigidbody:Rigidbody, colliders:Collider[]) : List<Collider>
    + {static} SetKinematic(rigidbody:Rigidbody) : List<Collider>
    + SetCollidersToTrigger() : void
    + {static} SetCollidersToTrigger(rigidbody:Rigidbody, colliders:Collider[]) : List<Collider>
    + {static} SetCollidersToTrigger(rigidbody:Rigidbody, colliders:List<Collider>) : List<Collider>
    + <<virtual>> UnsetCollidersToTrigger() : void
    + {static} UnsetCollidersToTrigger(colliders:Collider[]) : void
    + {static} UnsetCollidersToTrigger(colliders:List<Collider>) : void
}
enum PhysicsMode {
    Kinematic,
    NonKinematic,
    HybridKinematic,
}
MonoBehaviour <|-- HybridPhysics
HybridPhysics --> "target" Transform
HybridPhysics o-> "mode" PhysicsMode
HybridPhysics +-- PhysicsMode
@enduml
