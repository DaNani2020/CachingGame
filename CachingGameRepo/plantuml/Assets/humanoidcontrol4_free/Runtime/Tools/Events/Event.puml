@startuml
abstract class EventHandler {
    + eventNetworking : bool = false
    + <<virtual>> boolValue : bool <<get>> <<set>>
    + boolInverse : bool = false
    + <<virtual>> Update() : void
    + isDead : bool <<get>>
}
class "EventHandlers`1"<T> {
    + id : int
    + label : string
    + tooltip : string
    + fromEventLabel : string
}
enum Type {
    Never,
    OnStart,
    OnEnd,
    WhileActive,
    WhileInactive,
    OnChange,
    Continuous,
}
enum OverrideMode {
    Prepend,
    Append,
    Replace,
}
class "List`1"<T> {
}
EventHandler o-> "eventType" Type
EventHandler --> "functionCall" FunctionCall
EventHandler --> "overrideMode" OverrideMode
"EventHandlers`1" o-> "events<T>" "List`1"
EventHandler +-- Type
EventHandler +-- OverrideMode
@enduml
