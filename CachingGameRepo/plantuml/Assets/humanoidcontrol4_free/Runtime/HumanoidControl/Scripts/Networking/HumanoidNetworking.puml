@startuml
interface IHumanoidNetworking {
}
class HumanoidNetworking <<static>> {
    + {static} Connected(humanoid:HumanoidControl) : void
    + {static} ReceiveInstantiate(networking:IHumanoidNetworking, serializedData:byte[]) : void
    + {static} Receive(receivingNetworking:IHumanoidNetworking, msg:InstantiateHumanoid) : void
    + {static} FindRemoteHumanoid(humanoids:List<HumanoidControl>, nwId:ulong, humanoidId:int) : HumanoidControl
    + {static}  <<event>> OnConnectedToNetwork : ConnectedToNetwork 
    + {static}  <<event>> OnNewRemoteHumanoid : NewRemoteHumanoidArgs 
    + {static} ReceiveDestroy(networking:IHumanoidNetworking, serializedData:byte[]) : void
    + {static} Receive(networking:IHumanoidNetworking, msg:DestroyHumanoid) : void
    + {static} ReceiveHumanoidPose(networking:IHumanoidNetworking, data:byte[]) : void
    + {static} Receive(receivingNetworking:IHumanoidNetworking, humanoidPose:HumanoidPose) : void
    + {static} ReceiveHumanoidPose(remoteHumanoid:HumanoidControl, humanoidPose:HumanoidPose, lastHumanoidPose:HumanoidPose, smoothing:HumanoidNetworking.Smoothing) : void
    + {static} IsTargetActive(targetMask:byte, targetIndex:HumanoidControl.TargetId) : bool
    + {static} ReceiveGrab(networking:IHumanoidNetworking, serializedData:byte[]) : void
    + {static} Receive(networking:IHumanoidNetworking, msg:Grab) : void
    + {static} ReceiveLetGo(networking:IHumanoidNetworking, serializedData:byte[]) : void
    + {static} Receive(networking:IHumanoidNetworking, msg:LetGo) : void
    + {static} ReceiveChangeAvatar(networking:IHumanoidNetworking, serializedData:byte[]) : void
    + {static} Receive(receivingNetworking:IHumanoidNetworking, msg:ChangeAvatar) : void
    + {static} GetTrackingTransform(humanoid:HumanoidControl) : Transform
    + {static} ReceiveSyncTrackingSpace(networking:IHumanoidNetworking, serializedData:byte[]) : void
    + {static} Receive(networking:IHumanoidNetworking, msg:SyncTrackingSpace) : void
    + {static} GetHumanoidNetworking(networking:IHumanoidNetworking, nwId:ulong) : IHumanoidNetworking
    + {static} FindLocalHumanoids() : List<HumanoidControl>
    + {static} GetLocalHumanoidNetworking() : IHumanoidNetworking
    + {static} DisableNetworkSync(obj:GameObject) : void
    + {static} ReenableNetworkSync(obj:GameObject) : void
    + {static} TakeOwnership(obj:GameObject) : void
    + {static} FindHumanoid(humanoids:List<HumanoidControl>, humanoidId:int) : HumanoidControl
    + {static} FindLocalHumanoid(humanoids:List<HumanoidControl>, humanoidId:int) : HumanoidControl
    + {static} FindRemoteHumanoid(humanoids:List<HumanoidControl>, humanoidId:int) : HumanoidControl
    + {static} SmoothUpdate(humanoids:List<HumanoidControl>) : void
    + {static} SmoothUpdate(humanoid:HumanoidControl) : void
}
enum Smoothing {
    None,
    Interpolation,
    Extrapolation,
}
enum DebugLevel {
    Debug,
    Info,
    Warning,
    Error,
    None,
}
class IMessage {
    + IMessage()
    + IMessage(data:byte[])
    + <<virtual>> Serialize() : byte[]
    + <<virtual>> Deserialize(data:byte[]) : void
}
class InstantiateHumanoid {
    + nwId : ulong
    + humanoidId : byte
    + name : string
    + avatarPrefabName : string
    + physics : bool
    + possessionLocation : string = ""
    + InstantiateHumanoid()
    + InstantiateHumanoid(humanoid:HumanoidControl)
    + InstantiateHumanoid(data:byte[])
    + <<override>> Serialize() : byte[]
    + <<override>> Deserialize(data:byte[]) : void
}
class DestroyHumanoid {
    + nwId : ulong
    + humanoidId : byte
    + DestroyHumanoid()
    + DestroyHumanoid(humanoid:HumanoidControl)
    + DestroyHumanoid(data:byte[])
    + <<override>> Serialize() : byte[]
    + <<override>> Deserialize(data:byte[]) : void
}
struct Vector3S {
    + x : float
    + y : float
    + z : float
    + Vector3S(v:Vector3)
    + Vector3S(q:Quaternion)
    + Write(bw:BinaryWriter) : void
    + {static} Read(br:BinaryReader) : Vector3S
}
class HumanoidAnimatorParameters {
    + HumanoidAnimatorParameters()
    + HumanoidAnimatorParameters(humanoid:HumanoidControl)
    + <<virtual>> Write(bw:BinaryWriter) : void
    + {static} Read(br:BinaryReader) : HumanoidAnimatorParameters
}
class HumanoidHandPose {
    + thumbCurl : float
    + indexCurl : float
    + middleCurl : float
    + ringCurl : float
    + littleCurl : float
    + syncSwing : bool
    + thumbSwing : float
    + indexSwing : float
    + middleSwing : float
    + ringSwing : float
    + littleSwing : float
    + HumanoidHandPose()
    + HumanoidHandPose(boneId:Tracking.Bone)
    + HumanoidHandPose(handTarget:HandTarget, syncSwing:bool)
    + <<override>> Write(bw:BinaryWriter) : void
    + {static} <<new>> Read(br:BinaryReader) : HumanoidHandPose
}
class HumanoidTargetPose {
    + positionConfidence : float <<get>>
    + rotationConfidence : float <<get>>
    + ToFloat(confidenceByte:byte) : float
    + HumanoidTargetPose()
    + HumanoidTargetPose(boneId:Tracking.Bone)
    + HumanoidTargetPose(target:HumanoidTarget)
    + <<virtual>> Write(bw:BinaryWriter) : void
    + {static} Read(br:BinaryReader) : HumanoidTargetPose
}
class HumanoidPose {
    + nwId : ulong
    + humanoidId : byte
    + poseTime : float
    + receiveTime : float
    + syncFace : bool
    + HumanoidPose()
    + HumanoidPose(humanoid:HumanoidControl, poseTime:float, syncFingerSwing:bool, syncFace:bool)
    + HumanoidPose(data:byte[])
    + {static} TargetActive(target:HumanoidTarget) : bool
    + <<override>> Serialize() : byte[]
    + <<override>> Deserialize(data:byte[]) : void
    + GetTargetPose(boneId:Tracking.Bone) : HumanoidTargetPose
}
class Grab {
    + nwId : ulong
    + humanoidId : byte
    + isLeft : bool
    + nwId_grabbedObject : ulong
    + rangeCheck : bool
    + Grab()
    + Grab(handTarget:HandTarget, nwId_grabbedObject:ulong, rangeCheck:bool, grabType:HandTarget.GrabType)
    + Grab(data:byte[])
    + <<override>> Serialize() : byte[]
    + <<override>> Deserialize(data:byte[]) : void
}
class LetGo {
    + nwId : ulong
    + humanoidId : byte
    + isLeft : bool
    + LetGo()
    + LetGo(handTarget:HandTarget)
    + LetGo(data:byte[])
    + <<override>> Serialize() : byte[]
    + <<override>> Deserialize(data:byte[]) : void
}
class ChangeAvatar {
    + nwId : ulong
    + humanoidId : byte
    + avatarPrefabName : string
    + possessionLocation : string = ""
    + ChangeAvatar()
    + ChangeAvatar(humanoid:HumanoidControl, avatarPrefabName:string, possessionLocation:string)
    + ChangeAvatar(data:byte[])
    + <<override>> Serialize() : byte[]
    + <<override>> Deserialize(data:byte[]) : void
}
class SyncTrackingSpace {
    + nwId : ulong
    + humanoidId : byte
    + SyncTrackingSpace()
    + SyncTrackingSpace(humanoid:HumanoidControl, position:Vector3, rotation:Quaternion)
    + SyncTrackingSpace(data:byte[])
    + <<override>> Serialize() : byte[]
    + <<override>> Deserialize(data:byte[]) : void
}
class AnimatorParameter {
    + boolValue : bool
    + floatValue : float
    + intValue : int
}
HumanoidNetworking o-> "debug" DebugLevel
HumanoidNetworking +-- Smoothing
HumanoidNetworking +-- DebugLevel
HumanoidNetworking +-- IMessage
HumanoidNetworking +-- InstantiateHumanoid
IMessage <|-- InstantiateHumanoid
HumanoidNetworking +-- DestroyHumanoid
IMessage <|-- DestroyHumanoid
HumanoidNetworking +-- Vector3S
Vector3S --> "vector3" Vector3
Vector3S --> "quaternion" Quaternion
HumanoidNetworking +-- HumanoidAnimatorParameters
HumanoidNetworking +-- HumanoidHandPose
HumanoidTargetPose <|-- HumanoidHandPose
HumanoidNetworking +-- HumanoidTargetPose
HumanoidTargetPose --> "localPosition" Vector3S
HumanoidTargetPose --> "rotation" Vector3S
HumanoidNetworking +-- HumanoidPose
IMessage <|-- HumanoidPose
HumanoidPose --> "position" Vector3S
HumanoidPose --> "rotation" Vector3S
HumanoidPose --> "animatorParameters" HumanoidAnimatorParameters
HumanoidPose --> "hips" HumanoidTargetPose
HumanoidPose --> "head" HumanoidTargetPose
HumanoidPose --> "leftHand" HumanoidHandPose
HumanoidPose --> "rightHand" HumanoidHandPose
HumanoidPose --> "leftFoot" HumanoidTargetPose
HumanoidPose --> "rightFoot" HumanoidTargetPose
HumanoidNetworking +-- Grab
IMessage <|-- Grab
HumanoidNetworking +-- LetGo
IMessage <|-- LetGo
HumanoidNetworking +-- ChangeAvatar
IMessage <|-- ChangeAvatar
HumanoidNetworking +-- SyncTrackingSpace
IMessage <|-- SyncTrackingSpace
SyncTrackingSpace --> "position" Vector3S
SyncTrackingSpace --> "rotation" Vector3S
HumanoidAnimatorParameters +-- AnimatorParameter
AnimatorParameter --> "type" AnimatorControllerParameterType
@enduml
