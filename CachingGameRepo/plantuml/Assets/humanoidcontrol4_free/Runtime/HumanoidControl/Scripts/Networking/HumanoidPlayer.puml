@startuml
class HumanoidPlayer {
    + Send(b:bool) : void
    + Send(b:byte) : void
    + Send(x:int) : void
    + Send(f:float) : void
    + Send(v:Vector3) : void
    + Send(q:Quaternion) : void
    + ReceiveBool() : bool
    + ReceiveByte() : byte
    + ReceiveInt() : int
    + ReceiveFloat() : float
    + ReceiveVector3() : Vector3
    + ReceiveQuaternion() : Quaternion
    + GetObjectIdentity(obj:GameObject) : ulong
    + GetGameObject(objIdentity:ulong) : GameObject
    + InstantiateHumanoid(humanoid:HumanoidControl) : void
    + DestroyHumanoid(humanoid:HumanoidControl) : void
    + UpdateHumanoidPose(humanoid:HumanoidControl) : void
    + Grab(handTarget:HandTarget, obj:GameObject, rangeCheck:bool, grabType:HandTarget.GrabType) : void
    + LetGo(handTarget:HandTarget) : void
    + ChangeAvatar(humanoid:HumanoidControl, avatarPrefabName:string, possessionLocation:string) : void
    + SyncTrackingSpace(humanoid:HumanoidControl) : void
    + ReenableNetworkSync(obj:GameObject) : void
    + DisableNetworkSync(obj:GameObject) : void
    + DebugLog(s:string) : void
    + DebugWarning(s:string) : void
    + DebugError(s:string) : void
    + sendRate : float <<get>>
    + createLocalRemotes : bool <<get>> <<set>>
    + isLocal : bool <<get>>
    + nwId : ulong <<get>>
    + syncFingerSwing : bool <<get>>
    + syncTracking : bool <<get>> <<set>>
    + fuseTracking : bool <<get>>
}
class "List`1"<T> {
}
MonoBehaviour <|-- HumanoidPlayer
IHumanoidNetworking <|-- HumanoidPlayer
HumanoidPlayer --> "humanoids<HumanoidControl>" "List`1"
HumanoidPlayer --> "instance" HumanoidPlayer
@enduml
