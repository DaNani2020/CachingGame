@startuml
class FingersTarget {
    + FingersTarget(handTarget:HandTarget)
    + RetrieveBones(handTarget:HandTarget) : void
    + SetBlendshapeWeight(blendshape:string, weight:float) : void
    + GetBlendshapeWeight(blendshape:string) : float
    + InitAvatar() : void
    + NewComponent(_handTarget:HandTarget) : void
    + MatchTargetsToAvatar() : void
    + {static} CopyFingerTargetsToRig(handTarget:HandTarget) : void
    + {static} CopyRigToFingerTargets(handTarget:HandTarget) : void
    + {static} UpdateCurlValues(handTarget:HandTarget) : void
    + {static} UpdateTargetCurlValues(handTarget:HandTarget) : void
    + GetFingerCurl(fingerID:Finger) : float
    + AddFingerCurl(fingerID:Finger, curlValue:float) : void
    + SetFingerCurl(fingerID:Finger, curlValue:float) : void
    + SetFingerGroupCurl(fingerGroupID:FingerGroup, curlValue:float) : void
    + DetermineFingerCurl() : void
    + DetermineFingerCurl(fingerID:Finger) : void
    + {static} GetFingerBone(handTarget:HandTarget, finger:Finger, bone:FingerBones) : Transform
    + {static} GetFingerBone(rig:Animator, isLeft:bool, finger:Finger, bone:FingerBones) : Transform
    + DrawTargetRig(handTarget:HandTarget) : void
    + DrawAvatarRig(handTarget:HandTarget) : void
}
class TargetedFinger {
    + TargetedFinger(fingers:FingersTarget)
    + Init(_fingers:FingersTarget) : void
    + RetrieveBones(humanoid:HumanoidControl, firstBoneId:Bone) : void
    + MatchTargetToAvatar() : void
    + DoMeasurements() : void
    + curl : float <<get>> <<set>>
    + GetCurl(handTarget:HandTarget) : float
    + GetTargetCurl(handTarget:HandTarget) : float
    + CalculateCurl() : float
    + swing : float <<get>> <<set>>
    + GetSwing() : float
    + SetSwing(swingValue:float) : void
}
class TargetedPhalanges {
    + TargetedPhalanges(finger:TargetedFinger, nextBone:HumanoidTarget.TargetedBone)
    + <<override>> DetermineRotation() : Quaternion
}
enum FingerGroup {
    AllButIndex,
    FingersButIndex,
    AllFingers,
}
ITarget <|-- FingersTarget
FingersTarget --> "handTarget" HandTarget
FingersTarget o-> "thumb" TargetedFinger
FingersTarget o-> "index" TargetedFinger
FingersTarget o-> "middle" TargetedFinger
FingersTarget o-> "ring" TargetedFinger
FingersTarget o-> "little" TargetedFinger
FingersTarget o-> "minProximalAngles" Vector3
FingersTarget o-> "maxProximalAngles" Vector3
FingersTarget o-> "minIntermediateAngles" Vector3
FingersTarget o-> "maxIntermediateAngles" Vector3
FingersTarget o-> "minDistalAngles" Vector3
FingersTarget o-> "maxDistalAngles" Vector3
FingersTarget --> "blendshapeRenderer" SkinnedMeshRenderer
FingersTarget +-- TargetedFinger
TargetedFinger --> "fingers" FingersTarget
TargetedFinger --> "proximal" TargetedPhalanges
TargetedFinger --> "intermediate" TargetedPhalanges
TargetedFinger --> "distal" TargetedPhalanges
TargetedFinger --> "right" Vector3
FingersTarget +-- TargetedPhalanges
TargetedPhalanges --> "forward" Vector3
FingersTarget +-- FingerGroup
@enduml
