@startuml
class TransformExtension <<static>> {
    + {static} FindDeepChild(parent:Transform, name:string) : Transform
}
interface ITarget {
}
class VectorRotation {
    + {static} ToVector(vector3:Vector3) : Vector
    + {static} ToVector3(position:Vector) : Vector3
    + {static} ToRotation(quaternion:Quaternion) : Rotation
    + {static} ToQuaternion(orientation:Rotation) : Quaternion
    + {static} SetRotation(transform:Transform, orientation:Rotation) : void
}
abstract class HumanoidTarget {
    + {static} ToVector(vector3:Vector3) : Vector
    + {static} ToVector3(position:Vector) : Vector3
    + {static} ToRotation(quaternion:Quaternion) : Rotation
    + {static} ToQuaternion(orientation:Rotation) : Quaternion
    + {static} SetRotation(transform:Transform, orientation:Rotation) : void
    + {abstract} GetDefaultTarget(humanoid:HumanoidControl) : Transform
    + {abstract} InitAvatar() : void
    + <<virtual>> NewComponent(_humanoid:HumanoidControl) : void
    + OnDrawGizmos() : void
    + OnDrawGizmosSelected() : void
    + {static} DrawTarget(confidence:Confidence, target:Transform, direction:Vector3, length:float) : void
    + {static} DrawTargetBone(bone:TargetedBone, direction:Vector3) : void
    + {static} DrawTargetBone(target:TargetTransform, direction:Vector3) : void
    + {static} DrawAvatarBone(bone:TargetedBone, direction:Vector3) : void
    + {static} DrawAvatarBone(bone:BoneTransform, direction:Vector3) : void
    + <<virtual>> DrawTensions() : void
    + {static} GetDefaultBone(rig:Animator, boneTransform:Transform, boneId:Bone, boneNames:string[]) : void
    + {static} GetDefaultBone(rig:Animator, boneTransform:Transform, boneID:HumanBodyBones, boneNames:string[]) : void
    + {static} GetDefaultTargetBone(rig:Animator, boneTransform:Transform, boneID:Bone, boneNames:string[]) : void
    + {static} GetDefaultBone(rig:Animator, boneTransform:Transform, boneNames:string[]) : void
    + {abstract} UpdateMovements(humanoid:HumanoidControl) : void
    + {abstract} MatchTargetsToAvatar() : void
    + {abstract} CopyTargetToRig() : void
    + {abstract} CopyRigToTarget() : void
}
class TargetTransform {
}
class BoneTransform {
    + length : float
    + jointLimitations : bool = false
    + maxAngle : float
    + CalculateAngularVelocity() : Quaternion
    + CalculateVelocity() : Vector3
}
class TargetedBone {
    + name : string
    + TargetedBone()
    + TargetedBone(_nextBone:TargetedBone)
    + <<virtual>> Init() : void
    + isPresent : bool <<get>>
    + {static} NewTargetTransform(name:string) : Transform
    + RetrieveBones(humanoid:HumanoidControl) : void
    + RetrieveBone(humanoid:HumanoidControl, boneID:HumanBodyBones) : void
    + <<virtual>> DetermineRotation() : Quaternion
    + <<virtual>> MatchTargetToAvatar() : void
    + CopyBonePositionToTarget() : void
    + <<virtual>> TargetBasePosition() : Vector3
    + <<virtual>> TargetBaseRotation() : Quaternion
    + SetTargetPositionToAvatar() : void
    + DoMeasurements() : void
    + <<virtual>> GetTension() : float
    + SetBonePosition(targetPosition:Vector3) : void
    + SetBoneRotation(targetRotation:Quaternion) : void
    + <<virtual>> CalculateVelocity() : void
}
Target <|-- HumanoidTarget
HumanoidTarget --> "humanoid" HumanoidControl
HumanoidTarget --> "main" TargetedBone
HumanoidTarget --> "animator" Sensor
HumanoidTarget +-- TargetTransform
TargetData <|-- TargetTransform
TargetTransform o-> "transform" Transform
TargetTransform o-> "baseRotation" Quaternion
TargetTransform o-> "basePosition" Vector3
TargetTransform o-> "toBoneRotation" Quaternion
HumanoidTarget +-- BoneTransform
BoneTransform --> "transform" Transform
BoneTransform --> "minAngles" Vector3
BoneTransform --> "maxAngles" Vector3
BoneTransform o-> "baseRotation" Quaternion
BoneTransform o-> "basePosition" Vector3
BoneTransform --> "toTargetRotation" Quaternion
BoneTransform --> "targetRotation" Quaternion
BoneTransform --> "rotationVelocity" Quaternion
BoneTransform --> "velocity" Vector3
HumanoidTarget +-- TargetedBone
TargetedBone o-> "boneId" Bone
TargetedBone o-> "target" TargetTransform
TargetedBone o-> "bone" BoneTransform
TargetedBone --> "parent" TargetedBone
TargetedBone --> "nextBone" TargetedBone
TargetedBone o-> "velocity" Vector3
TargetedBone o-> "angularVelocity" Vector3
@enduml
