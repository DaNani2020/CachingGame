@startuml
class HeadTarget {
    + HeadTarget()
    + <<const>> maxNeckAngle : float = 80
    + <<const>> maxHeadAngle : float = 50
    + {static} <<readonly>> neckTurnRatio : float = 0.65F
    + tracking : bool
    + <<override>> InitSensors() : void
    + <<override>> StartSensors() : void
    + audioEnergy : float
    + TurnTo(obj:GameObject) : void
    + TurnTo(obj:GameObject, confidence:float) : void
    + LookTo(position:Vector3) : void
    + TurnTo(position:Vector3, confidence:float) : void
    + SetLookDirection(direction:Vector3, confidence:float) : void
    + <<override>> GetDefaultTarget(humanoid:HumanoidControl) : Transform
    + {static} CreateTarget(oldTarget:HumanoidTarget) : HeadTarget
    + {static} SetTarget(humanoid:HumanoidControl, targetTransform:Transform) : HeadTarget
    + RetrieveBones() : void
    + {static} GetDefaultNeck(rig:Animator, boneTransform:Transform) : void
    + {static} GetDefaultHead(rig:Animator, boneTransform:Transform) : void
    + {static} ClearBones(headTarget:HeadTarget) : void
    + collisionFader : bool = false
    + isInsideCollider : bool = false
    + virtual3d : bool = false
    + {static} IsInitialized(humanoid:HumanoidControl) : bool
    + <<override>> InitAvatar() : void
    + <<override>> NewComponent(_humanoid:HumanoidControl) : void
    + <<override>> InitComponent() : void
    + <<override>> StartTarget() : void
    + {static} DetermineTarget(humanoid:HumanoidControl) : void
    + <<override>> MatchTargetsToAvatar() : void
    + <<override>> InitializeTrackingConfidence() : void
    + <<override>> UpdateTarget() : void
    + <<override>> UpdateMovements(humanoid:HumanoidControl) : void
    + <<override>> CopyTargetToRig() : void
    + <<override>> CopyRigToTarget() : void
    + UpdateSensorsFromTarget() : void
    + RotationX(angle:float) : void
    + RotationY(angle:float) : void
    + {static} GetRotationAround(axis:Vector3, rotation:Quaternion) : Quaternion
    + {static} Normalize(q:Quaternion) : Quaternion
    + {static} GetSwingTwist(axis:Vector3, rotation:Quaternion, swing:Quaternion, twist:Quaternion) : void
    + <<virtual>> GetEyePosition() : Vector3
    + GetNeckEyeDelta() : Vector3
    + GetHeadEyeDelta() : Vector3
    + GetNeckHeadDelta() : Vector3
    + {static} FindAvatarMeshes(humanoid:HumanoidControl) : SkinnedMeshRenderer[]
    + {static} DistillAvatarMeshNames(meshes:SkinnedMeshRenderer[]) : string[]
    + {static} FindMeshWithBlendshapes(renderers:SkinnedMeshRenderer[]) : int
    + {static} FindBlendshapemesh(renderers:SkinnedMeshRenderer[], renderer:SkinnedMeshRenderer) : int
    + {static} GetBlendshapes(renderer:SkinnedMeshRenderer) : string[]
    + {static} FindBlendshapeWith(blendshapes:string[], namepart1:string, namepart2:string, blendshape:int) : void
    + DisableVR() : void
    + EnableVR() : void
}
class TargetedHeadBone {
    + TargetedHeadBone(headTarget:HeadTarget)
    + <<override>> Init() : void
    + <<override>> DetermineRotation() : Quaternion
    + <<override>> GetTension() : float
    + <<override>> TargetBasePosition() : Vector3
}
class TargetedNeckBone {
    + TargetedNeckBone(headTarget:HeadTarget)
    + <<override>> Init() : void
    + <<override>> DetermineRotation() : Quaternion
    + <<override>> GetTension() : float
}
enum InteractionType {
    None,
    Gazing,
}
HumanoidTarget <|-- HeadTarget
HeadTarget o-> "minHeadAngles" Vector3
HeadTarget o-> "maxHeadAngles" Vector3
HeadTarget o-> "minNeckAngles" Vector3
HeadTarget o-> "maxNeckAngles" Vector3
HeadTarget o-> "minNeckAngles2" Vector
HeadTarget o-> "maxNeckAngles2" Vector
HeadTarget o-> "headAnimator" HeadAnimator
HeadTarget --> "main" TargetedBone
HeadTarget o-> "head" TargetedHeadBone
HeadTarget o-> "neck" TargetedNeckBone
HeadTarget o-> "lookDirection" Vector3
HeadTarget o-> "localLookDirection" Vector3
HeadTarget --> "neck2eyes" Vector3
HeadTarget --> "head2eyes" Vector3
HeadTarget --> "screenTransform" Transform
HeadTarget o-> "trackingEvent" BoolEventHandlers
HeadTarget o-> "audioEvent" FloatEventHandlers
HeadTarget o-> "insideColliderEvent" BoolEventHandlers
HeadTarget --> "smRenderer" SkinnedMeshRenderer
HeadTarget --> "headRigidbody" Rigidbody
HeadTarget o-> "headMovements" HeadMovements
HeadTarget +-- TargetedHeadBone
TargetedBone <|-- TargetedHeadBone
HeadTarget +-- TargetedNeckBone
TargetedBone <|-- TargetedNeckBone
TargetedNeckBone --> "headTarget" HeadTarget
HeadTarget +-- InteractionType
@enduml
