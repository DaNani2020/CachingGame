@startuml
enum ArmBones {
    Hand,
    Forearm,
    UpperArm,
    Shoulder,
}
enum HandBones {
    ThumbProximal= 0,
    ThumbIntermediate= 1,
    ThumbDistal= 2,
    IndexProximal= 3,
    IndexIntermediate= 4,
    IndexDistal= 5,
    MiddleProximal= 6,
    MiddleIntermediate= 7,
    MiddleDistal= 8,
    RingProximal= 9,
    RingIntermediate= 10,
    RingDistal= 11,
    LittleProximal= 12,
    LittleIntermediate= 13,
    LittleDistal= 14,
    LastHandBone= 15,
}
class HandTarget <<partial>> {
    + HandTarget()
    + isLeft : bool
    + rotationSpeedLimitation : bool = false
    + <<const>> maxShoulderAngle : float = 30
    + <<const>> maxUpperArmAngle : float = 120
    + <<const>> maxForearmAngle : float = 130
    + <<const>> maxHandAngle : float = 100
    + isTrackingHand : bool <<get>> <<protected set>>
    + <<override>> InitSensors() : void
    + <<override>> StartSensors() : void
    + <<override>> StopSensors() : void
    + ShowSensors(shown:bool, refresh:bool) : void
    + AddSensorComponent(sensorComponent:SensorComponent) : void
    + AddTrackedRigidbody(trackedRigidbody:TrackedRigidbody) : void
    + RemoveTrackedRigidbody(trackedRigidbody:TrackedRigidbody) : void
    + <<override>> GetDefaultTarget(humanoid:HumanoidControl) : Transform
    + {static} CreateTarget(oldTarget:HandTarget) : HandTarget
    + {static} SetTarget(humanoid:HumanoidControl, targetTransform:Transform, isLeft:bool) : HandTarget
    + GetBoneId(isLeft:bool, armBone:ArmBones) : Bone
    + GetTargetBone(boneID:ArmBones) : TargetedBone
    + {static} ClearBones(handTarget:HandTarget) : void
    + RetrieveBones() : void
    + physics : bool = true
    + strength : float = 100
    + touchInteraction : bool = true
    + detectedPoseIx : int <<get>> <<protected set>>
    + SetPose1(pose:Pose) : void
    + SetPose(pose:Pose, weight:float) : void
    + grabbedRigidbody : bool
    + grabbedKinematicRigidbody : bool
    + twoHandedGrab : bool = false
    + TouchedStaticObject() : bool
    + GrabbedStaticObject() : bool
    + {static} TmpDisableCollisions(handTarget:HandTarget, duration:float) : void
    + HandBoneRightAxis() : Vector3
    + HandBoneOutwardAxis() : Vector3
    + {static} IsInitialized(humanoid:HumanoidControl) : bool
    + InitTarget() : void
    + <<override>> InitAvatar() : void
    + <<override>> NewComponent(_humanoid:HumanoidControl) : void
    + <<override>> InitComponent() : void
    + <<override>> StartTarget() : void
    + {static} DetermineTarget(humanoid:HumanoidControl, isLeft:bool) : void
    + <<override>> MatchTargetsToAvatar() : void
    + <<override>> InitializeTrackingConfidence() : void
    + grabbedChanged : bool
    + <<override>> UpdateTarget() : void
    + <<override>> UpdateMovements(humanoid:HumanoidControl) : void
    + directFingerMovements : bool = true
    + <<override>> CopyTargetToRig() : void
    + <<override>> CopyRigToTarget() : void
    + UpdateSensorsFromTarget() : void
    + GetFingerCurl(fingerID:Finger) : float
    + GetFingerCurl(finger:FingersTarget.TargetedFinger) : float
    + AddFingerCurl(fingerID:Finger, curlValue:float) : void
    + SetFingerCurl(fingerID:Finger, curlValue:float) : void
    + SetFingerGroupCurl(fingerGroupID:FingersTarget.FingerGroup, curlValue:float) : void
    + DetermineFingerCurl(fingerID:Finger) : void
    + HandCurl() : float
    + Vibrate(strength:float) : void
}
class TargetedShoulderBone {
    + TargetedShoulderBone(handTarget:HandTarget)
    + <<override>> Init() : void
    + <<override>> DetermineRotation() : Quaternion
    + <<override>> GetTension() : float
}
class TargetedUpperArmBone {
    + TargetedUpperArmBone(handTarget:HandTarget)
    + <<override>> Init() : void
    + <<override>> DetermineRotation() : Quaternion
    + <<override>> GetTension() : float
}
class TargetedForearmBone {
    + TargetedForearmBone(handTarget:HandTarget)
    + <<override>> Init() : void
    + <<override>> DetermineRotation() : Quaternion
    + <<override>> GetTension() : float
}
class TargetedHandBone {
    + TargetedHandBone(handTarget:HandTarget)
    + <<override>> Init() : void
    + <<override>> DetermineRotation() : Quaternion
    + <<override>> GetTension() : float
    + <<override>> TargetBasePosition() : Vector3
    + <<override>> CalculateVelocity() : void
}
enum PoseMethod {
    Position,
    Rotation,
}
enum GrabbingTechnique {
    TouchGrabbing,
    NearGrabbing,
    NoGrabbing,
}
class "List`1"<T> {
}
HumanoidTarget <|-- HandTarget
HandTarget --> "side" Side
HandTarget --> "outward" Vector3
HandTarget --> "up" Vector3
HandTarget o-> "fingers" FingersTarget
HandTarget o-> "minLeftShoulderAngles" Vector3
HandTarget o-> "maxLeftShoulderAngles" Vector3
HandTarget o-> "minRightShoulderAngles" Vector3
HandTarget o-> "maxRightShoulderAngles" Vector3
HandTarget o-> "minLeftUpperArmAngles" Vector3
HandTarget o-> "maxLeftUpperArmAngles" Vector3
HandTarget o-> "minRightUpperArmAngles" Vector3
HandTarget o-> "maxRightUpperArmAngles" Vector3
HandTarget o-> "minLeftForearmAngles" Vector3
HandTarget o-> "maxLeftForearmAngles" Vector3
HandTarget o-> "minRightForearmAngles" Vector3
HandTarget o-> "maxRightForearmAngles" Vector3
HandTarget o-> "minLeftHandAngles" Vector3
HandTarget o-> "maxLeftHandAngles" Vector3
HandTarget o-> "minRightHandAngles" Vector3
HandTarget o-> "maxRightHandAngles" Vector3
HandTarget o-> "armAnimator" ArmAnimator
HandTarget --> "main" TargetedBone
HandTarget --> "stretchlessTarget" Transform
HandTarget --> "shoulder" TargetedShoulderBone
HandTarget --> "upperArm" TargetedUpperArmBone
HandTarget --> "forearm" TargetedForearmBone
HandTarget --> "hand" TargetedHandBone
HandTarget --> "poseMethod" PoseMethod
HandTarget o-> "grabbingTechnique" GrabbingTechnique
HandTarget --> "detectedPose" Pose
HandTarget o-> "poseMixer" PoseMixer
HandTarget --> "grabSocket" HandSocket
HandTarget --> "pinchSocket" Socket
HandTarget --> "inputModule" InteractionModule
HandTarget o-> "touchedObject" GameObject
HandTarget --> "grabbedPrefab" GameObject
HandTarget --> "grabbedObject" GameObject
HandTarget o-> "grabbedHandle" Handle
HandTarget --> "targetToHandle" Vector3
HandTarget --> "colliders<Collider>" "List`1"
HandTarget --> "targetToSecondaryHandle" Vector3
HandTarget o-> "poseEvent" IntEventHandlers
HandTarget o-> "touchEvent" GameObjectEventHandlers
HandTarget o-> "grabEvent" GameObjectEventHandlers
HandTarget --> "handPalm" Transform
HandTarget --> "handRigidbody" Rigidbody
HandTarget --> "handPhysics" AdvancedHandPhysics
HandTarget o-> "handMovements" HandMovements
HandTarget o-> "armMovements" ArmMovements
HandTarget --> "otherHand" HandTarget
HandTarget --> "localPalmPosition" Vector3
HandTarget --> "palmPosition" Vector3
HandTarget --> "palmRotation" Quaternion
HandTarget +-- TargetedShoulderBone
TargetedBone <|-- TargetedShoulderBone
HandTarget +-- TargetedUpperArmBone
TargetedBone <|-- TargetedUpperArmBone
HandTarget +-- TargetedForearmBone
TargetedBone <|-- TargetedForearmBone
HandTarget +-- TargetedHandBone
TargetedBone <|-- TargetedHandBone
HandTarget +-- PoseMethod
HandTarget +-- GrabbingTechnique
@enduml
