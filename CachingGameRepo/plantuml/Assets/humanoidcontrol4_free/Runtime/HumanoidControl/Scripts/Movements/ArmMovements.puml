@startuml
class ArmMovements {
    + {static} Update(handTarget:HandTarget) : void
    + FullInverseKinematics(handTarget:HandTarget, speedLimitation:bool) : void
    + NaturalUpperArmOrientation(handTarget:HandTarget, handPosition:Vector3, handOrientation:Quaternion, speedLimitation:bool) : Quaternion
    + {static} UpperArmRotationIK(upperArmPosition:Vector3, handPosition:Vector3, elbowAxis:Vector3, upperArmLength:float, forearmLength:float, isLeft:bool) : Quaternion
    + CalculateElbowAxis(handTarget:HandTarget, handPosition:Vector3, handRotation:Quaternion) : Vector3
    + {static} CalculateUpperArmUp(forearmRotation:Quaternion) : Vector3
    + CalculateUpperArmRotation2(handTarget:HandTarget, upperArmUp:Vector3, handPosition:Vector3) : Quaternion
    + {static} NaturalForearmOrientation(handTarget:HandTarget, upperArmRotation:Quaternion, handPosition:Vector3, speedLimitation:bool) : Quaternion
    + {static} ForearmRotationIK(forearmPosition:Vector3, handPosition:Vector3, handRotation:Quaternion, upperArmRotation:Quaternion, isLeft:bool) : Quaternion
    + {static} ForearmRotationIK(forearmPosition:Vector3, handPosition:Vector3, elbowAxis:Vector3, isLeft:bool) : Quaternion
    + {static} CalculateForearmAngle(handTarget:HandTarget, upperArmPosition:Vector3, handPosition:Vector3, upperArmLength:float, forearmLength:float) : float
    + {static} CalculateBoneRotation(bonePosition:Vector3, parentBonePosition:Vector3) : Quaternion
    + {static} CalculateBoneRotation(bonePosition:Vector3, parentBonePosition:Vector3, upDirection:Vector3) : Quaternion
    + {static} ArmBoneRotationIK(bonePosition:Vector3, targetPosition:Vector3, upAxis:Vector3, isLeft:bool) : Quaternion
    + {static} CosineRule(a:float, b:float, c:float) : float
}
Movements <|-- ArmMovements
@enduml
