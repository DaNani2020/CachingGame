@startuml
enum NetworkingSystems {
    None,
    UnityNetworking,
}
class HumanoidControl {
    + path : string
    + showTargetRig : bool = false
    + trackingNeckHeight : float <<get>>
    + showAvatarRig : bool = true
    + avatarNeckHeight : float
    + showMuscleTension : bool = false
    + calculateBodyPose : bool = true
    + {static} SetControllerID(humanoid:HumanoidControl, controllerID:int) : void
    + animatorEnabled : bool = true
    + editPose : bool
    + playerType : int
    + syncRootTransform : bool = true
    + remoteTrackerIpAddress : string
    + humanoidId : int
    + showRealObjects : bool = true
    + showSkeletons : bool <<get>> <<set>>
    + physics : bool = true
    + useGravity : bool = true
    + generateColliders : bool = true
    + haptics : bool = false
    + calibrateAtStart : bool = false
    + dontDestroyOnLoad : bool = false
    + disconnectInstances : bool = false
    +  <<event>> OnChangeAvatarEvent : OnChangeAvatar 
    + ChangeAvatar(fpAvatarPrefab:GameObject) : void
    + ChangeAvatar(fpAvatarPrefab:GameObject, tpAvatarPrefab:GameObject) : void
    + <<virtual>> LocalChangeAvatar(avatarPrefab:GameObject) : void
    + <<virtual>> InitializeAvatar() : void
    + InitAvatar() : void
    + ScaleAvatarToTracking() : void
    + {static} CheckTargetRig(humanoid:HumanoidControl) : void
    + GetAvatar(avatarRoot:GameObject) : Animator
    + InitTargets() : void
    + DetermineTargets() : void
    + MatchTargetsToAvatar() : void
    + UpdateMovements() : void
    + CopyTargetsToRig() : void
    + CopyRigToTargets() : void
    + UpdateSensorsFromTargets() : void
    + GetBone(boneId:Bone) : HumanoidTarget.TargetedBone
    + GetBone(side:Side, sideBoneId:SideBone) : HumanoidTarget.TargetedBone
    + gameControllerEnabled : bool = true
    + gameControllerIndex : int
    + ScaleTrackingToAvatar() : void
    + AdjustTracking(translation:Vector3) : void
    + AdjustTracking(translation:Vector3, rotation:Quaternion) : void
    + RetrieveBones() : void
    + OnApplicationQuit() : void
    +  <<event>> OnNewNeckHeightEvent : OnNewNeckHeight 
    + <<virtual>> SetStartPosition() : void
    + Calibrate() : void
    +  <<event>> onHumanoidPose : OnHumanoidPose 
    + forwardSpeed : float = 1
    + backwardSpeed : float = 0.6F
    + sidewardSpeed : float = 1
    + maxAcceleration : float = 1
    + rotationSpeed : float = 60
    + stepOffset : float = 0.3F
    + proximitySpeed : bool = false
    + proximitySpeedRate : float = 0.8f
    + bodyPull : bool = false
    + MoveForward(z:float) : void
    + MoveSideward(x:float) : void
    + <<virtual>> Move(velocity:Vector2) : void
    + <<virtual>> Move(velocity:Vector3) : void
    + MoveWorldVector(v:Vector3) : void
    + Stop() : void
    + Rotate(angularSpeed:float) : void
    + Rotation(yAngle:float) : void
    + Dash(targetPosition:Vector3) : void
    + Teleport(targetPosition:Vector3) : void
    + TeleportForward(distance:float) : void
    + MoveTo(position:Vector3, movementType:MovementType) : void
    + RotateTo(targetRotation:Quaternion) : IEnumerator
    + LookAt(targetPosition:Vector3) : IEnumerator
    + WalkTo(targetPosition:Vector3) : IEnumerator
    + WalkTo(targetPosition:Vector3, targetRotation:Quaternion) : IEnumerator
    + Jump(takeoffVelocity:float) : void
    + turningVelocity : float
    + CheckMovement() : Vector3
    + triggerEntered : bool
    + collided : bool
    + <<virtual>> IsMyRigidbody(rigidbody:Rigidbody) : bool
    + groundAngularVelocity : float
    + useLegLengthCorrection : bool = false
    + floatCorrection : bool = false
    + floatReverting : bool = false
    + GetDistanceToGroundAt(position:Vector3, maxDistance:float) : float
    + GetDistanceToGroundAt(position:Vector3, maxDistance:float, ground:Transform, normal:Vector3) : float
    + SetAnimationParameterBool(parameterName:string, boolValue:bool) : void
    + SetAnimationParameterFloat(parameterName:string, floatValue:float) : void
    + SetAnimationParameterInt(parameterName:string, intValue:int) : void
    + SetAnimationParameterTrigger(parameterName:string) : void
    + {static} GetRealWorld(transform:Transform) : GameObject
    + {static} FindTrackerObject(realWorld:GameObject, trackerName:string) : GameObject
    + GetHumanoidPosition() : Vector3
    + isRemote : bool = false
    + nwId : ulong
    + id : int
    + {static}  <<event>> onNewHumanoid : OnNewHumanoid 
    + {static} AllVisibleHumanoids(camera:Camera) : HumanoidControl[]
    + IsVisible(camera:Camera) : bool
}
enum PrimaryTarget {
    Head,
    Hips,
}
enum TargetId {
    Hips,
    Head,
    LeftHand,
    RightHand,
    LeftFoot,
    RightFoot,
    Face,
}
enum StartPosition {
    AvatarPosition,
    PlayerPosition,
}
enum ScalingType {
    None,
    SetHeightToAvatar,
    ScaleTrackingToAvatar,
    ScaleAvatarToTracking,
}
class HumanoidPose {
    + nwId : ulong
    + humanoidId : int
    + time : float
    + {static} Retrieve(humanoid:HumanoidControl, poseTime:float) : HumanoidPose
}
class Bone {
    + positionConfidence : byte
    + rotationConfidence : byte
}
class Blendshape {
    + name : string
    + value : int
}
MonoBehaviour <|-- HumanoidControl
HumanoidControl --> "headTarget" HeadTarget
HumanoidControl --> "leftHandTarget" HandTarget
HumanoidControl --> "rightHandTarget" HandTarget
HumanoidControl --> "hipsTarget" HipsTarget
HumanoidControl --> "leftFootTarget" FootTarget
HumanoidControl --> "rightFootTarget" FootTarget
HumanoidControl --> "primaryTarget" PrimaryTarget
HumanoidControl --> "targetsRig" Animator
HumanoidControl --> "avatarRig" Animator
HumanoidControl o-> "animatorController" RuntimeAnimatorController
HumanoidControl --> "pose" Pose
HumanoidControl --> "humanoidNetworking" IHumanoidNetworking
HumanoidControl --> "remoteAvatar" GameObject
HumanoidControl o-> "startPosition" StartPosition
HumanoidControl --> "gameController" GameControllers
HumanoidControl --> "realWorld" Transform
HumanoidControl --> "up" Vector3
HumanoidControl --> "velocity" Vector3
HumanoidControl --> "targetVelocity" Vector3
HumanoidControl --> "acceleration" Vector3
HumanoidControl o-> "hitNormal" Vector3
HumanoidControl --> "humanoidRigidbody" Rigidbody
HumanoidControl --> "characterRigidbody" Rigidbody
HumanoidControl --> "bodyCapsule" CapsuleCollider
HumanoidControl --> "bodyCollider" CapsuleCollider
HumanoidControl --> "ground" Transform
HumanoidControl --> "groundVelocity" Vector3
HumanoidControl +-- PrimaryTarget
HumanoidControl +-- TargetId
HumanoidControl +-- StartPosition
HumanoidControl +-- ScalingType
HumanoidControl +-- HumanoidPose
HumanoidPose +-- Bone
Bone --> "position" Vector3
Bone --> "rotation" Quaternion
HumanoidPose +-- Blendshape
@enduml
