@startuml
class VisitorPossessions {
    + clearOnAwake : bool
    + {static} DestroyScenePossessions() : void
    + TryAddGameObject(gameObject:GameObject) : void
    + AddPossessions(scenePossessions:Possessable[], removable:bool) : void
    + Add(possessable:Possessable, preserved:bool) : Possession
    + DeletePossession(possession:Possession) : void
    + {static} RetrievePossessionAsync(possession:Possession, callback:System.Action<GameObject>) : IEnumerator
    + {static} RetrievePossessableAsync(possessableLocation:string, possessablePath:string, callback:System.Action<GameObject>) : IEnumerator
    + {static} UnloadPossession() : void
    + UseNextAvatar() : void
    + UseAvatar(avatarIndex:int) : void
    + {static} mod(k:int, n:int) : int
}
class Possession {
    + name : string
    + persistent : bool
    + removable : bool = true
    + siteLocation : string
    + assetPath : string
}
class CachedPossessionBundle {
    + siteLocation : string
    + {static} Find(possessionLocation:string) : CachedPossessionBundle
}
class CachedPossession {
    + assetPath : string
    + preserved : bool = false
    + {static} Update(cachedBundle:CachedPossessionBundle, possessablePath:string, prefab:GameObject) : void
}
class Possessions {
}
class "List`1"<T> {
}
MonoBehaviour <|-- VisitorPossessions
VisitorPossessions --> "possessions<Possession>" "List`1"
VisitorPossessions --> "myPossessions<Possession>" "List`1"
VisitorPossessions +-- Possession
Possession --> "scenePossession" Possessable
VisitorPossessions +-- CachedPossessionBundle
CachedPossessionBundle --> "assetBundle" AssetBundle
VisitorPossessions +-- CachedPossession
CachedPossession --> "possessionBundle" CachedPossessionBundle
CachedPossession --> "possession" GameObject
VisitorPossessions +-- Possessions
Possessions o-> "list<Possession>" "List`1"
@enduml
